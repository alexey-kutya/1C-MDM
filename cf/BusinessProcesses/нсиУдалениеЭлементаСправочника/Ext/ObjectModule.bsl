#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ДанныеЗаполнения<>Неопределено Тогда 
		Тип = ТипЗнч(ДанныеЗаполнения);
		Если Справочники.ТипВсеСсылки().СодержитТип(Тип) Тогда  
			Если Тип = Тип("СправочникСсылка.нсиУниверсальныйФункциональныйСправочник")
				ИЛИ Тип = Тип("СправочникСсылка.нсиУниверсальныйКлассификатор") Тогда 
				ИмяСправочника = ДанныеЗаполнения.Владелец;
			Иначе
				ИмяСправочника = ДанныеЗаполнения.Метаданные().Имя;
			КонецЕсли;
			Предмет = ДанныеЗаполнения;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	СтандартнаяОбработка = Ложь;
	Номер = (Формат(нсиБизнесПроцессы.ПолучитьНовыйНомер("НумераторБП"),"ЧЦ=9; ЧВН=; ЧГ=0"));
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА УСЛОВИЙ

Процедура ОтозватьЗаявкуПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	Результат = ОтозватьЗаявку;
КонецПроцедуры

Процедура УсловиеОтклонитьЗаявкуПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	Результат = ОтклонитьЗаявку;
КонецПроцедуры

Процедура НадоУточнитьПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	Результат = НадоУточнить;
КонецПроцедуры

Процедура УсловиеЕстьЭтапыОбработкиПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	СтрокиЭтапов = ПрохождениеЭтапов.НайтиСтроки(
		новый Структура("Шаг,Пройден",
			Перечисления.нсиШагиБП.Обработка,
			Ложь
		)
	);
	Результат = Ложь;
	Для каждого Строка Из СтрокиЭтапов Цикл
		Если нсиБизнесПроцессы.УсловиеВыполняется(Строка.УсловиеВыполнения,Ссылка) Тогда 
			Результат = Истина;
			Прервать;
		Иначе
			Строка.Пройден = Истина;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	Записать();
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВЫПОЛНЕНИЕ ОБРАБОТОК
Процедура ВыводИзОбращенияОбработка(ТочкаМаршрутаБизнесПроцесса)

	КлючеваяОперация_ЗавершениеЗаявки = "Завершение заявки на удаление элемента справочника """+Строка(ИмяСправочника)+"""";
	ВремяНачала_ЗавершениеЗаявки = ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация_ЗавершениеЗаявки);
	ДополнительныеСвойства.Вставить("ВремяНачала_ЗавершениеЗаявки",ВремяНачала_ЗавершениеЗаявки);
	ДополнительныеСвойства.Вставить("КлючеваяОперация_ЗавершениеЗаявки",КлючеваяОперация_ЗавершениеЗаявки);
	
	УстановитьПривилегированныйРежим(Истина);
	

	РегистрыСведений.нсиСтатусыОбработкиСправочников.УстановитьСтатусСправочника(Предмет,
		Новый Структура("Пользователь,СозданаЗаявка", Неопределено, Ложь));
		
	ПредметОбъект = Предмет.ПолучитьОбъект();
	ПредметОбъект.УстановитьПометкуУдаления(НоваяПометкаУдаления);
	ПредметОбъект.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СОБЫТИЯ ЗАДАЧ

Процедура ЗадачаПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)

	РезультатВыполнения = РезультатВыполненияДляТочек(Задача, ТочкаМаршрутаБизнесПроцесса.Имя) + РезультатВыполнения;
	
	Если Задача.Результат <> Перечисления.нсиРезультатыВыполненияЗадач.ЗапрошеноУточнение Тогда 
		СтрокаЭтапа = ПрохождениеЭтапов.НайтиСтроки(новый Структура("Шаг,НомерЭтапа",Задача.ШагБП,Задача.НомерЭтапаБП));
		Если СтрокаЭтапа.Количество()>0 Тогда 
			СтрокаЭтапа[0].Пройден = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ЗадачаОбъект = Задача.ПолучитьОбъект();
	ЗадачаОбъект.ДатаИсполнения = ТекущаяДата();
	
	ЗадачаОбъект.ДлительностьИсполнения 	= 
		нсиБизнесПроцессы.ОпределитьДлительностьПоГрафику(
			Задача.ДатаНачала,
			Задача.ДатаИсполнения,
			Задача.Исполнитель
	);
	ЗадачаОбъект.Записать();
	
	УстановитьПривилегированныйРежим(Истина);
	Записать();
	
КонецПроцедуры

Функция ПолучитьШагЭтапИсполнителя(ТочкаМаршрутаБизнесПроцесса)
	Результат = Новый Структура(
		"Шаг,
		|НомерЭтапа,
		|СпособРаспределения,
		|РольИсполнителя,
		|Исполнитель,
		|ОсновнойОбъектАдресации,
		|ВремяИсполнения,
		|ВремяОповещения"
	);
	
	Если ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.нсиУдалениеЭлементаСправочника.ТочкиМаршрута.ОбработкаИнформации Тогда 
		Результат.Шаг = Перечисления.нсиШагиБП.Обработка;
	ИначеЕсли ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.нсиУдалениеЭлементаСправочника.ТочкиМаршрута.УточнениеИнформации Тогда 
		Результат.Шаг = Перечисления.нсиШагиБП.ПустаяСсылка();
		Результат.НомерЭтапа = 0;
		Результат.РольИсполнителя = Справочники.РолиИсполнителей.ПустаяСсылка();
		Результат.Исполнитель = Автор;
		Результат.ОсновнойОбъектАдресации = Неопределено;
		Результат.ВремяИсполнения = 0;
		Результат.ВремяОповещения = 0;
		Возврат Результат;
	КонецЕсли;
	
	нсиБизнесПроцессы.ЗаполнитьПараметрыЭтапа(ЭтотОбъект,Результат);
	
	Возврат Результат;
		
КонецФункции

Процедура ЗаполнениеПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	
	Для Каждого Задача Из ФормируемыеЗадачи Цикл
		
		Задача.Автор 			= Автор;
		Задача.Наименование 	= ""+ТочкаМаршрутаБизнесПроцесса+": "+Наименование;
		Задача.Предмет 			= Предмет;
		Задача.ДатаНачала = ТекущаяДата();
		
		Если ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.нсиУдалениеЭлементаСправочника.ТочкиМаршрута.УточнениеИнформации Тогда 
			Задача.Исполнитель 		= Автор;
			Исполнитель = Автор;
			Задача.РольИсполнителя  = Автор;
			Задача.СпособРаспределения = Перечисления.нсиСпособыРаспределенияЗадач.ПустаяСсылка();
		Иначе
			Структура = ПолучитьШагЭтапИсполнителя(ТочкаМаршрутаБизнесПроцесса);
			Задача.Исполнитель 		= Структура.Исполнитель;
			Исполнитель = Структура.Исполнитель;
			Задача.РольИсполнителя  = Структура.РольИсполнителя;
			Задача.ШагБП            = Структура.Шаг;
			Задача.НомерЭтапаБП     = Структура.НомерЭтапа;
			Задача.ОсновнойОбъектАдресации = Структура.ОсновнойОбъектАдресации;
			Задача.СпособРаспределения = Структура.СпособРаспределения;
			Задача.СрокИсполнения 	= 
				нсиБизнесПроцессы.ОпределитьДатуОкончанияПоКалендарномуГрафику(
					Задача.ДатаНачала,
					Структура.ВремяИсполнения,
					Структура.Исполнитель
			);
			Задача.СрокОповещения 	= 
				нсиБизнесПроцессы.ОпределитьДатуОкончанияПоКалендарномуГрафику(
					Задача.ДатаНачала,
					Структура.ВремяОповещения,
					Структура.Исполнитель
			);
		КонецЕсли;
		
		
		РегистрыСведений.нсиСтатусыОбработкиСправочников.УстановитьСтатусСправочника(Предмет,
			Новый Структура("Пользователь,СозданаЗаявка", Исполнитель, Истина));
		
		
		нсиБизнесПроцессы.ОтправитьОповещениеПоЭлектроннойПочте(Задача);
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	Записать();
	
КонецПроцедуры

// Функция - возвращает результат выполнения для точки по шаблону.
//
Функция РезультатВыполненияДляТочек(Знач ЗадачаСсылка, ПеренаправитьЗадачи = Неопределено) Экспорт
	
#Если Сервер ИЛИ ВнешнееСоединение тогда	

	СтрокаВставки = "обработал(а) задачу:";
	Если ЗадачаСсылка.Результат = Перечисления.нсиРезультатыВыполненияЗадач.Перенаправлена Тогда
		Возврат "";
	ИначеЕсли ЗадачаСсылка.Результат = Перечисления.нсиРезультатыВыполненияЗадач.ВзятаВОбработку Тогда
		Возврат "";
	ИначеЕсли ПеренаправитьЗадачи = "ОбработкаИнформации" Тогда
		Если Выполнено Тогда
			СтрокаВставки = "обработано:";
		ИначеЕсли НадоУточнить Тогда
			СтрокаВставки = "отправлено на уточнение:";
		ИначеЕсли ОтклонитьЗаявку Тогда
			СтрокаВставки = "отклонено:";
		КонецЕсли;
	ИначеЕсли ПеренаправитьЗадачи = "УточнениеИнформации" Тогда
		Если Выполнено Тогда
			СтрокаВставки = "уточнено:";
		ИначеЕсли ОтозватьЗаявку Тогда
			СтрокаВставки = "отозвано:";
		КонецЕсли;
	КонецЕсли;
	
	СтрокаФормат = НСтр("ru = '%1, %2, " + СтрокаВставки + "
		|%3
		|'");
	//--
	ЗадачаДанные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗадачаСсылка, 
		"РезультатВыполнения,ДатаИсполнения,Исполнитель");
	Комментарий = СокрЛП(ЗадачаДанные.РезультатВыполнения);
	Комментарий = ?(ПустаяСтрока(Комментарий), "", Комментарий + Символы.ПС);
	Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаФормат, 
	              ЗадачаДанные.ДатаИсполнения,
	              ЗадачаДанные.Исполнитель,
	              Комментарий);
	
	Возврат Результат;
	
#Иначе
	
	Возврат "";
	
#КонецЕсли

КонецФункции

// Процедура - заполняет табличную часть "Прохождение этапов"
// Заполнение осуществляется по настройке бизнес-процесса
Процедура ЗаполнитьПрохождениеЭтапов() Экспорт
	ПрохождениеЭтапов.Очистить();
	Если НЕ ЗначениеЗаполнено(НастройкаБП) Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого Шаг Из НастройкаБП.ШагиБП Цикл 
		Этапы = НастройкаБП.ЭтапыБП.НайтиСтроки(новый Структура("Шаг",Шаг.Шаг));
		Для Каждого Этап ИЗ Этапы Цикл 
			Если НЕ ЗначениеЗаполнено(Этап.УсловиеВыполненияТипПредмета)
				ИЛИ Этап.УсловиеВыполненияТипПредмета = ИмяСправочника Тогда 
				
				НС = ПрохождениеЭтапов.Добавить();
				ЗаполнитьЗначенияСвойств(НС,Этап);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура ЗавершениеПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	ДатаЗавершения = ТекущаяДата();
	нсиБизнесПроцессы.ОтправитьОповещениеОЗавершенииБП(Ссылка);
	Исполнитель = Справочники.Пользователи.ПустаяСсылка();
	
	УстановитьПривилегированныйРежим(Истина);
	
	РегистрыСведений.нсиСтатусыОбработкиСправочников.УстановитьСтатусСправочника(Предмет,
		Новый Структура("Пользователь,СозданаЗаявка", Неопределено, Ложь));
	
	Записать();
	
	
	Если ДополнительныеСвойства.Свойство("ВремяНачала_ЗавершениеЗаявки") Тогда 
		ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(
			ДополнительныеСвойства.КлючеваяОперация_ЗавершениеЗаявки,
			ДополнительныеСвойства.ВремяНачала_ЗавершениеЗаявки
		);	
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
