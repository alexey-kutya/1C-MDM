
#Область ПрограммныйИнтерфейс

// Процедура создает временный элемент справочника, записывает ссылку на него в реквизит Предмет.
// Для созданного временного элемента устанавливает соответствующий статус в РС нсиСтатусыОбработкиСправочников.
// Записывает текущий объект.
// Возвращаемое значение:
//	Отказ - булево, принимает значение Истина, если создать временный элемент не удалось.
//
Процедура СоздатьВременныйЭлемент(Отказ) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	Если СоздатьГруппу Тогда 
		НовыйПредмет = нсиБизнесПроцессыРаботаСоСправочниками.СоздатьГруппуСправочника(ИмяСправочника);
		НовыйПредмет.Наименование = "Новая группа справочника";
	Иначе 
		НовыйПредмет = нсиБизнесПроцессыРаботаСоСправочниками.СоздатьЭлементСправочника(ИмяСправочника);
//	ITRR Кутья АА Локализация	
//		НовыйПредмет.Наименование = "Новый элемент справочника";
		НовыйПредмет.Наименование = НСтр("ru = 'Новый элемент справочника'; en = 'New item'");
	КонецЕсли;
				
	Если НовыйПредмет.Метаданные().Реквизиты.Найти("ТипПозиции") <> Неопределено Тогда 
		НовыйПредмет.ТипПозиции = Перечисления.нсиТипыПозицийСправочников.ЭталоннаяПозиция;
	КонецЕсли;
	
	Если НовыйПредмет.Метаданные().Реквизиты.Найти("ПризнакИспользования") <> Неопределено Тогда 
		НовыйПредмет.ПризнакИспользования = нсиБизнесПроцессыРаботаСоСправочниками.ПолучитьПризнакИспользованияПоУмолчанию(ИмяСправочника);
	КонецЕсли;
	
	НовыйПредмет.ЭтоМакет = Истина;
	НовыйПредмет.ОбменДанными.Загрузка = Истина;
	НовыйПредмет.ДополнительныеСвойства.Вставить("СозданиеИзБП", Истина);	
	НачатьТранзакцию();
	Попытка
		СсылкаНового = нсиБизнесПроцессыРаботаСоСправочниками.ПолучитьНовуюСсылку(ИмяСправочника);
		НовыйПредмет.УстановитьСсылкуНового(СсылкаНового);
		РегистрыСведений.нсиСтатусыОбработкиСправочников.УстановитьСтатусСправочника(СсылкаНового,
					Новый Структура("Пользователь,ВременныйЭлемент,СозданаЗаявка", ПараметрыСеанса.ТекущийПользователь, Истина, Истина));
		НовыйПредмет.Записать();
		Предмет = НовыйПредмет.Ссылка;
		Если НЕ ЗначениеЗаполнено(Номер) Тогда 
			УстановитьНовыйНомер("");
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось создать макет: "+ОписаниеОшибки(),,,,Отказ);
		ОтменитьТранзакцию();
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события "ПриКопировании" объекта
// 	
Процедура ПриКопировании(ОбъектКопирования)
	
	// Комментарий: Для любой новой задачи создания элемента предмет не должен быть заполнен.
	Предмет = Неопределено;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	Если ТипЗнч(ДанныеЗаполнения) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ВедущаяЗадача = ДанныеЗаполнения;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА УСЛОВИЙ

Процедура ОтозватьЗаявкуПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	Результат = ОтозватьЗаявку;
КонецПроцедуры

Процедура ЕстьОшибкиПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	Результат = ЕстьОшибки;
	Если ЕстьОшибки Тогда 
		ОтменитьПрохождение(Перечисления.нсиШагиБП.Обработка);
		ОтменитьПрохождение(Перечисления.нсиШагиБП.Утверждение);
	КонецЕсли;
КонецПроцедуры

Процедура УсловиеОтклонитьЗаявкуПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	Результат = ОтклонитьЗаявку;
КонецПроцедуры

Процедура НадоУточнитьПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	Результат = НадоУточнить;
КонецПроцедуры

Процедура УсловиеЕстьЭтапыДиспетчеризацииПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	СтрокиЭтапов = ПрохождениеЭтапов.НайтиСтроки(
		новый Структура("Шаг,Пройден",
			Перечисления.нсиШагиБП.РаспределениеЗадач,
			Ложь
		)
	);
	Результат = Ложь;
	Для каждого Строка Из СтрокиЭтапов Цикл
		Если нсиБизнесПроцессы.УсловиеВыполняется(Строка.УсловиеВыполнения,Ссылка) Тогда 
			Результат = Истина;
			Прервать;
		Иначе
			Строка.Пройден = Истина;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	Записать();
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

Процедура УсловиеЕстьЭтапыОбработкиПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	СтрокиЭтапов = ПрохождениеЭтапов.НайтиСтроки(
		новый Структура("Шаг,Пройден",
			Перечисления.нсиШагиБП.Обработка,
			Ложь
		)
	);
	Результат = Ложь;
	Для каждого Строка Из СтрокиЭтапов Цикл
		Если нсиБизнесПроцессы.УсловиеВыполняется(Строка.УсловиеВыполнения,Ссылка) Тогда 
			Результат = Истина;
			Прервать;
		Иначе
			Строка.Пройден = Истина;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	Записать();
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

Процедура УсловиеЕстьЭтапыУтвержденияПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	СтрокиЭтапов = ПрохождениеЭтапов.НайтиСтроки(
		новый Структура("Шаг,Пройден",
			Перечисления.нсиШагиБП.Утверждение,
			Ложь
		)
	);
	Результат = Ложь;
	Для каждого Строка Из СтрокиЭтапов Цикл
		Если нсиБизнесПроцессы.УсловиеВыполняется(Строка.УсловиеВыполнения,Ссылка) Тогда 
			Результат = Истина;
			Прервать;
		Иначе
			Строка.Пройден = Истина;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	Записать();
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВЫПОЛНЕНИЕ ОБРАБОТОК

Процедура СоздатьМакетЭлементаСправочникаОбработка(ТочкаМаршрутаБизнесПроцесса)
	
	Если ЗначениеЗаполнено(Предмет) Тогда 
		Возврат;
	КонецЕсли;	
	
	Отказ = Ложь;
	СоздатьВременныйЭлемент(Отказ);
	
	Если Отказ Тогда 
		ВызватьИсключение "Макет не создан!";
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьЭлементСправочникаОбработка(ТочкаМаршрутаБизнесПроцесса)
	
	КлючеваяОперация_СозданиеЭлемента = "Создание элемента справочника по заявке (справочник """+Строка(ИмяСправочника)+""")";
	ВремяНачала_СозданиеЭлемента = ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация_СозданиеЭлемента);
	
	КлючеваяОперация_ЗавершениеЗаявки = "Завершение заявки на ввод нового элемента справочника """+Строка(ИмяСправочника)+"""";
	ВремяНачала_ЗавершениеЗаявки = ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация_ЗавершениеЗаявки);
	ДополнительныеСвойства.Вставить("ВремяНачала_ЗавершениеЗаявки",ВремяНачала_ЗавершениеЗаявки);
	ДополнительныеСвойства.Вставить("КлючеваяОперация_ЗавершениеЗаявки",КлючеваяОперация_ЗавершениеЗаявки);
	
	УстановитьПривилегированныйРежим(Истина);
	
//	Кутья АА ITRR		
	ДелатьЭлементОсновным = Ложь;
	Если ТипЗнч(Предмет) = Тип("СправочникСсылка.GlobalSKU") Тогда
		ДелатьЭлементОсновным = GlobalMDM.ДелатьЭлементОсновным("GlobalSKU", Предмет.ID, "ID", Предмет);
	ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.GlobalPartners") Тогда
		ДелатьЭлементОсновным = GlobalMDM.ДелатьЭлементОсновным("GlobalPartners", Предмет.ID, "ID", Предмет);
	Иначе 
		ДелатьЭлементОсновным = Истина;
	КонецЕсли; 
	
//	Кутья АА ITRR		
	
	//// записывается статус
	//РегистрыСведений.нсиСтатусыОбработкиСправочников.УстановитьСтатусСправочника(Предмет,
	//	Новый Структура("Пользователь,ВременныйЭлемент,СозданаЗаявка,Обработано", Неопределено, Ложь,Ложь,Истина));
	// записывается статус
	РегистрыСведений.нсиСтатусыОбработкиСправочников.УстановитьСтатусСправочника(Предмет,
		Новый Структура("Пользователь,ВременныйЭлемент,СозданаЗаявка,Обработано", Неопределено, НЕ ДелатьЭлементОсновным,Ложь,Истина));
		
//	Кутья АА ITRR		
	Если ДелатьЭлементОсновным Тогда
//	Кутья АА ITRR		

	ПредметОбъект = Предмет.ПолучитьОбъект();
	
	ПредметОбъект.ЭтоМакет = ложь;
	ПредметОбъект.Записать();
	
//	Кутья АА ITRR		
	КонецЕсли; 
//	Кутья АА ITRR		
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(КлючеваяОперация_СозданиеЭлемента,ВремяНачала_СозданиеЭлемента);	
	
КонецПроцедуры

Процедура УдалитьМакетЭлементаСправочникаОбработка(ТочкаМаршрутаБизнесПроцесса)

	КлючеваяОперация_ЗавершениеЗаявки = "Завершение заявки на ввод нового элемента справочника """+Строка(ИмяСправочника)+"""";
	ВремяНачала_ЗавершениеЗаявки = ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация_ЗавершениеЗаявки);
	ДополнительныеСвойства.Вставить("ВремяНачала_ЗавершениеЗаявки",ВремяНачала_ЗавершениеЗаявки);
	ДополнительныеСвойства.Вставить("КлючеваяОперация_ЗавершениеЗаявки",КлючеваяОперация_ЗавершениеЗаявки);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(Предмет) Тогда 
		Возврат;
	КонецЕсли;	
	
	Блокировка = Новый БлокировкаДанных;
	Если ТипЗнч(ИмяСправочника) = Тип("Строка") Тогда 
		ЭлементБлокировки = Блокировка.Добавить("Справочник."+ИмяСправочника);
	Иначе
		ИмяСправочникаУХ = нсиУниверсальноеХранилищеПовтИсп.ПолучитьИмяСправочникаХранилища(ИмяСправочника);
		ЭлементБлокировки = Блокировка.Добавить("Справочник."+ИмяСправочникаУХ);
	КонецЕсли;
	ЭлементБлокировки.УстановитьЗначение("Ссылка",Предмет); 
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	Блокировка.Заблокировать();
	
	НовыйПредмет = Предмет.ПолучитьОбъект();
	НовыйПредмет.УстановитьПометкуУдаления(Истина);
	
	РегистрыСведений.нсиСтатусыОбработкиСправочников.УстановитьСтатусСправочника(Предмет,
		Новый Структура("Пользователь,ВременныйЭлемент,СозданаЗаявка", Неопределено, Истина,Ложь));
		
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ЗавершениеПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	ДатаЗавершения = ТекущаяДата();
	нсиБизнесПроцессы.ОтправитьОповещениеОЗавершенииБП(Ссылка);
	Исполнитель = Справочники.Пользователи.ПустаяСсылка();
	
	УстановитьПривилегированныйРежим(Истина);
	Записать();
	
	ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(
		ДополнительныеСвойства.КлючеваяОперация_ЗавершениеЗаявки,
		ДополнительныеСвойства.ВремяНачала_ЗавершениеЗаявки
	);	
	
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	СтандартнаяОбработка = Ложь;
	Номер = (Формат(нсиБизнесПроцессы.ПолучитьНовыйНомер("НумераторБП"),"ЧЦ=9; ЧВН=; ЧГ=0"));
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СОБЫТИЯ ЗАДАЧ

Процедура ЗадачаПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)

	РезультатВыполнения = РезультатВыполненияДляТочек(Задача, ТочкаМаршрутаБизнесПроцесса.Имя) + РезультатВыполнения;
	
	Если Задача.Результат <> Перечисления.нсиРезультатыВыполненияЗадач.ЗапрошеноУточнение
		И НЕ (
			ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.нсиВводНовогоЭлементаСправочника.ТочкиМаршрута.НазначениеОтветственного 
			И Задача.Результат = Перечисления.нсиРезультатыВыполненияЗадач.Отклонена
		)
		Тогда 
		
		СтрокаЭтапа = ПрохождениеЭтапов.НайтиСтроки(новый Структура("Шаг,НомерЭтапа",Задача.ШагБП,Задача.НомерЭтапаБП));
		Если СтрокаЭтапа.Количество()>0 Тогда 
			СтрокаЭтапа[0].Пройден = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗадачаОбъект = Задача.ПолучитьОбъект();
	ЗадачаОбъект.ДатаИсполнения = ТекущаяДата();
	
	ЗадачаОбъект.ДлительностьИсполнения 	= 
		нсиБизнесПроцессы.ОпределитьДлительностьПоГрафику(
			Задача.ДатаНачала,
			Задача.ДатаИсполнения,
			Задача.Исполнитель
	);
	ЗадачаОбъект.Записать();
	
	УстановитьПривилегированныйРежим(Истина);
	Записать();
	
КонецПроцедуры

Функция ПолучитьШагЭтапИсполнителя(ТочкаМаршрутаБизнесПроцесса)
	Результат = Новый Структура(
		"Шаг,
		|НомерЭтапа,
		|СпособРаспределения,
		|РольИсполнителя,
		|Исполнитель,
		|ОсновнойОбъектАдресации,
		|ВремяИсполнения,
		|ВремяОповещения"
	);
	
	Если ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.нсиВводНовогоЭлементаСправочника.ТочкиМаршрута.НазначениеОтветственного Тогда 
		Результат.Шаг = Перечисления.нсиШагиБП.РаспределениеЗадач;
	ИначеЕсли ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.нсиВводНовогоЭлементаСправочника.ТочкиМаршрута.ОбработкаИнформации Тогда 
		Результат.Шаг = Перечисления.нсиШагиБП.Обработка;
	ИначеЕсли ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.нсиВводНовогоЭлементаСправочника.ТочкиМаршрута.КонтрольИсполнения Тогда 
		Результат.Шаг = Перечисления.нсиШагиБП.Утверждение;
	ИначеЕсли ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.нсиВводНовогоЭлементаСправочника.ТочкиМаршрута.УточнениеИнформации Тогда 
		Результат.Шаг = Перечисления.нсиШагиБП.ПустаяСсылка();
		Результат.НомерЭтапа = 0;
		Результат.РольИсполнителя = Справочники.РолиИсполнителей.ПустаяСсылка();
		Результат.Исполнитель = Автор;
		Результат.ОсновнойОбъектАдресации = Неопределено;
		Результат.ВремяИсполнения = 0;
		Результат.ВремяОповещения = 0;
		Возврат Результат;
	КонецЕсли;
	
	нсиБизнесПроцессы.ЗаполнитьПараметрыЭтапа(ЭтотОбъект,Результат);
	Возврат Результат;
		
КонецФункции

Процедура ЗаполнениеПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	
	Для Каждого Задача Из ФормируемыеЗадачи Цикл
		
		Задача.Автор 			= Автор;
//		Задача.Наименование 	= ""+ТочкаМаршрутаБизнесПроцесса+": "+Наименование;
//	ITRR Кутья АА
		Если ТипЗнч(Предмет) = Тип("СправочникСсылка.GlobalSKU")
			ИЛИ ТипЗнч(Предмет) = Тип("СправочникСсылка.GlobalPartners") Тогда
			Если ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.нсиВводНовогоЭлементаСправочника.ТочкиМаршрута.ОбработкаИнформации Тогда
				ТочкаМаршрутаБизнесПроцессаСтрокой = НСтр("ru = 'Обработка информации'; en = 'Data processing'", "en");
				Задача.Наименование 	= ""+ТочкаМаршрутаБизнесПроцессаСтрокой+": "+Наименование;
			Иначе
				Задача.Наименование 	= ""+ТочкаМаршрутаБизнесПроцесса+": "+Наименование;
			КонецЕсли; 
		Иначе
			Задача.Наименование 	= ""+ТочкаМаршрутаБизнесПроцесса+": "+Наименование;
		КонецЕсли;
		
		Задача.Предмет 			= Предмет;
		Задача.ДатаНачала = ТекущаяДата();
		
		Если ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.нсиВводНовогоЭлементаСправочника.ТочкиМаршрута.УточнениеИнформации Тогда 
			Задача.Исполнитель 		= Автор;
			Исполнитель = Автор;
			Задача.РольИсполнителя  = Автор;
			Задача.СпособРаспределения = Перечисления.нсиСпособыРаспределенияЗадач.ПустаяСсылка();
		Иначе
			Структура = ПолучитьШагЭтапИсполнителя(ТочкаМаршрутаБизнесПроцесса);
			Задача.Исполнитель 		= Структура.Исполнитель;
			Исполнитель = Структура.Исполнитель;
			Задача.РольИсполнителя  = Структура.РольИсполнителя;
			Задача.ШагБП            = Структура.Шаг;
			Задача.НомерЭтапаБП     = Структура.НомерЭтапа;
			Задача.ОсновнойОбъектАдресации = Структура.ОсновнойОбъектАдресации;
			Задача.СпособРаспределения = Структура.СпособРаспределения;
			Задача.СрокИсполнения 	= 
				нсиБизнесПроцессы.ОпределитьДатуОкончанияПоКалендарномуГрафику(
					Задача.ДатаНачала,
					Структура.ВремяИсполнения,
					Структура.Исполнитель
			);
			Задача.СрокОповещения 	= 
				нсиБизнесПроцессы.ОпределитьДатуОкончанияПоКалендарномуГрафику(
					Задача.ДатаНачала,
					Структура.ВремяОповещения,
					Структура.Исполнитель
			);
		КонецЕсли;
		
		
		Если ЗначениеЗаполнено(Предмет) Тогда 
			РегистрыСведений.нсиСтатусыОбработкиСправочников.УстановитьСтатусСправочника(Предмет,
				Новый Структура("Пользователь,ВременныйЭлемент,СозданаЗаявка", Исполнитель, Истина,Истина));
		КонецЕсли;	
		
		нсиБизнесПроцессы.ОтправитьОповещениеПоЭлектроннойПочте(Задача);
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	Записать();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБЩЕГО НАЗНАЧЕНИЯ

// Функция - возвращает результат выполнения для точки по шаблону.
//
Функция РезультатВыполненияДляТочек(Знач ЗадачаСсылка, ПеренаправитьЗадачи = Неопределено) Экспорт
	
#Если Сервер ИЛИ ВнешнееСоединение тогда	

	СтрокаВставки = НСтр("ru = 'обработал(а) задачу:'; en = 'processed the task:'");
	Если ПеренаправитьЗадачи = "НазначениеОтветственного" Тогда
		Если не ОтклонитьЗаявку Тогда
			СтрокаВставки = НСтр("ru = 'исполнитель назначен:'; en = 'the executor is appointed:'");
		Иначе
			СтрокаВставки = НСтр("ru = 'отклонено:'; en = 'rejected:'");
		КонецЕсли;
	ИначеЕсли ЗадачаСсылка.Результат = Перечисления.нсиРезультатыВыполненияЗадач.Перенаправлена Тогда
		Возврат "";
	ИначеЕсли ЗадачаСсылка.Результат = Перечисления.нсиРезультатыВыполненияЗадач.ВзятаВОбработку Тогда
		Возврат "";
	ИначеЕсли ПеренаправитьЗадачи = "ОбработкаИнформации" Тогда
		Если Выполнено Тогда
			СтрокаВставки = НСтр("ru = 'обработано:'; en = 'processed:'");
		ИначеЕсли НадоУточнить Тогда
			СтрокаВставки = НСтр("ru = 'отправлено на уточнение:'; en = 'sent to clarify:'");
		ИначеЕсли ОтклонитьЗаявку Тогда
			СтрокаВставки = НСтр("ru = 'отклонено:'; en = 'rejected:'");
		КонецЕсли;
	ИначеЕсли ПеренаправитьЗадачи = "УточнениеИнформации" Тогда
		Если Выполнено Тогда
//			СтрокаВставки = НСтр("ru = 'уточнено:'; en = 'refined:'");
			Если ТипЗнч(Предмет) = Тип("СправочникСсылка.GlobalSKU")
				ИЛИ ТипЗнч(Предмет) = Тип("СправочникСсылка.GlobalPartners") Тогда
				СтрокаВставки = НСтр("ru = 'refined:'; en = 'refined:'");
			Иначе
				СтрокаВставки = НСтр("ru = 'уточнено:'; en = 'refined:'");
			КонецЕсли; 
		ИначеЕсли ОтозватьЗаявку Тогда
//			СтрокаВставки = НСтр("ru = 'отозвано:'; en = 'withdrawn:'");
			Если ТипЗнч(Предмет) = Тип("СправочникСсылка.GlobalSKU")
				ИЛИ ТипЗнч(Предмет) = Тип("СправочникСсылка.GlobalPartners") Тогда
				СтрокаВставки = НСтр("ru = 'withdrawn:'; en = 'withdrawn:'");
			Иначе
				СтрокаВставки = НСтр("ru = 'отозвано:'; en = 'withdrawn:'");
			КонецЕсли; 
		КонецЕсли;
	ИначеЕсли ПеренаправитьЗадачи = "КонтрольИсполнения" Тогда
		Если ЕстьОшибки Тогда
			СтрокаВставки = НСтр("ru = 'отправлено на доработку:'; en = 'sent for revision:'");
		ИначеЕсли Выполнено Тогда
			СтрокаВставки = НСтр("ru = 'заявка выполнена:'; en = 'request completed:'");
		ИначеЕсли ОтклонитьЗаявку Тогда
			СтрокаВставки = НСтр("ru = 'отклонено:'; en = 'rejected:'");
		КонецЕсли;
	КонецЕсли;
	
	//СтрокаФормат = НСтр("ru = '%1, %2, " + СтрокаВставки + "
	//	|%3
	//	|'");
	СтрокаФормат = "%1, %2, " + СтрокаВставки + "
		|%3
		|";
		
	ЗадачаДанные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗадачаСсылка, 
		"РезультатВыполнения,ДатаИсполнения,Исполнитель");
	Комментарий = СокрЛП(ЗадачаДанные.РезультатВыполнения);
	Комментарий = ?(ПустаяСтрока(Комментарий), "", Комментарий + Символы.ПС);
	Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаФормат, 
	              ЗадачаДанные.ДатаИсполнения,
	              ЗадачаДанные.Исполнитель,
	              Комментарий);
	
	Возврат Результат;
#Иначе
	Возврат "";
#КонецЕсли


КонецФункции

// Процедура - заполняет табличную часть "Прохождение этапов"
// Заполнение осуществляется по настройке бизнес-процесса
Процедура ЗаполнитьПрохождениеЭтапов() Экспорт
	ПрохождениеЭтапов.Очистить();
	Если НЕ ЗначениеЗаполнено(НастройкаБП) Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого Шаг Из НастройкаБП.ШагиБП Цикл 
		Этапы = НастройкаБП.ЭтапыБП.НайтиСтроки(новый Структура("Шаг",Шаг.Шаг));
		Для Каждого Этап ИЗ Этапы Цикл
			Если НЕ ЗначениеЗаполнено(Этап.УсловиеВыполненияТипПредмета)
				ИЛИ Этап.УсловиеВыполненияТипПредмета = ИмяСправочника Тогда 
				
				НС = ПрохождениеЭтапов.Добавить();
				ЗаполнитьЗначенияСвойств(НС,Этап);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура ОтменитьПрохождение(Шаг)
	СтрокиЭтапов = ПрохождениеЭтапов.НайтиСтроки(новый Структура("Шаг",Шаг));
	Для Каждого Строка Из СтрокиЭтапов Цикл 
		Строка.Пройден = Ложь;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти