#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СписокВыбора = Элементы.ИмяСправочника.СписокВыбора;
	
	нсиБизнесПроцессы.ЗаполнитьСписокДоступныхСправочников(Элементы.ИмяСправочника.СписокВыбора);
	
	Если ЗначениеЗаполнено(Объект.Предмет) И Не ЗначениеЗаполнено(Объект.ИмяСправочника) Тогда 
		Объект.ИмяСправочника = Объект.Предмет.Метаданные().Имя;
	КонецЕсли;	
	
	НачальныйПризнакСтарта = Объект.Стартован;
	Элементы.ГруппаСостояние.Видимость = Объект.Завершен;
	Если Объект.Завершен Тогда
		ДатаЗавершенияСтрокой = Формат(Объект.ДатаЗавершения, "ДЛФ=DT");
		ТекстСостояния = ?(Объект.Выполнено, 
			НСтр("en='Target completed %1.';ru='Задание выполнено %1.'"), 
			НСтр("en='Task canceled %1.';ru='Задание отменено %1.'"));	
		Элементы.ДекорацияТекст.Заголовок =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСостояния,	
				ДатаЗавершенияСтрокой);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Автор) и Не НачальныйПризнакСтарта Тогда 
		Объект.Автор = ПользователиКлиентСервер.ТекущийПользователь();
    КонецЕсли;
	
	
	ПредметСтрокой = нсиБизнесПроцессы.ПредметСтрокой(Объект.Предмет);
//	ITRR Кутья АА Локализация	
//	Если ПредметСтрокой = "не задан" Тогда 
	Если ПредметСтрокой = НСтр("ru = 'не задан'; en = 'not specified'") Тогда 
//	ITRR Кутья АА Локализация	
//		ПредметСтрокой = "введите необходимые атрибуты";
		ПредметСтрокой = НСтр("ru = 'введите необходимые атрибуты'; en = 'enter the required attributes'");
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Объект.Предмет) И Не ЗначениеЗаполнено(Объект.ИмяСправочника) Тогда 
		Объект.ИмяСправочника = Объект.Предмет.Метаданные().Имя;
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Объект.ГруппаПользователейБП = нсиБизнеспроцессы.ПолучитьГруппуПользователейБППоУмолчанию(Объект.Автор);
		Если НЕ ЗначениеЗаполнено(Объект.ГруппаПользователейБП) Тогда 
			Объект.ГруппаПользователейБП = Справочники.нсиГруппыПользователейБП.Основная;
		КонецЕсли;
	КонецЕсли;
	
	нсиРаботаСФормамиСервер.УстановитьТипПредмета(Объект.Предмет, Элементы.ПризнакЭлемента);
	
	УправлениеВидимостьюИДоступом();
	
//	ITRR Кутья АА
	Если Параметры.Ключ.Пустая() Тогда
		Объект.Статус = Перечисления.СтатусыЗаявки.Черновик;
	КонецЕсли; 
//	ITRR Кутья АА
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если Параметры.Ключ.Пустая() тогда
		Модифицированность = Истина;
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Проверяем заполнение и в остальных случаях при записи (помимо старта).
	
	ЗначениеСтарт = Ложь;
	Если ПараметрыЗаписи.Свойство("Старт", ЗначениеСтарт) И НЕ ЗначениеСтарт Тогда
		Отказ = НЕ ТекущийОбъект.ПроверитьЗаполнение();
	КонецЕсли;
	
	// При отправке в службу НСИ выполняем контроль дублей.
	Если ЗначениеСтарт = Истина тогда
		нсиКонтрольДублирующихПозиций.ВыполнитьКонтрольДублирующихПозиций(Объект.Предмет.ПолучитьОбъект(), Истина, Отказ);
	КонецЕсли;	
	
	Если Не нсиБизнесПроцессыРаботаСоСправочниками.ЭтоИерархияГруппИЭлементов(Объект.ИмяСправочника) Тогда 
		Объект.СоздатьГруппу = Ложь;
	КонецЕсли;
	
	ТекущийОбъект.Дата = ТекущаяДата();
	ТекущийОбъект.СрокИсполнения = нсиБизнесПроцессы.ОпределитьДатуОкончанияПоКалендарномуГрафику(
		ТекущаяДата(),
		ТекущийОбъект.НастройкаБП.ОбщееВремяВыполнения,
		Справочники.Пользователи.ПустаяСсылка()
	);
		
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()

	Если Параметры.Ключ.Пустая() тогда
		Ошибка = Ложь;
		УдалитьМакетНаСервереПриЗакрытии(Ошибка);
		Если Ошибка тогда
			ПоказатьОповещениеПользователя("Удаление макета",, 
				"Не удалось удалить макет. Подробнее смотрите в журнал регистрации.", БиблиотекаКартинок.Ошибка32);
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("ИзменилсяСписокБП");
	Оповестить("ЗадачаИзменена", Неопределено);
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ЭтоСтарт = Ложь;
	Если ПараметрыЗаписи.Свойство("Старт",ЭтоСтарт) Тогда 
		Если ЭтоСтарт Тогда 
			Если нсиБизнесПроцессы.НеВыполняютсяУсловияНаВсехЭтапахОбработки(ТекущийОбъект.Ссылка) Тогда 
				ТекстСообщения = 
					"Не выполняются условия ни на одном этапе шага ""Обработка"".
					|Отправка в службу НСИ не выполнена.";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрытьВыполнить()
	
	Если НЕ ЗначениеЗаполнено(Объект.Предмет) Тогда 
		ПоказатьПредупреждение(,"Не заполнены реквизиты макета!");
		Возврат;
	КонецЕсли;
	
	МассивНастроек = нсиБизнесПроцессы.ПолучитьНастройкиБП(
		Объект.ИмяСправочника,
		"нсиВводНовогоЭлементаСправочника",
		Объект.Предмет,
		Объект.Автор
	);
	
	Если МассивНастроек.Количество() = 1 Тогда 
		Объект.НастройкаБП = МассивНастроек[0];
	ИначеЕсли МассивНастроек.Количество() = 0 Тогда 
		ПоказатьПредупреждение(,
			"Отправка в службу НСИ невозможна.
			|Для Вас отсутствует настройка маршрута бизнес-процесса, 
			|соответствующая макету и типу бизнес-процесса
			|Обратитесь к администратору."
		);
		Возврат;
	Иначе
		СЗ = новый СписокЗначений;
		СЗ.ЗагрузитьЗначения(МассивНастроек);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораНастройкиБП",ЭтаФорма);
		СЗ.ПоказатьВыборЭлемента(ОписаниеОповещения,"Выберите настройку бизнес-процесса");
	КонецЕсли;
	
	ЗаполнитьПрохождениеЭтапов();
	
//	ITRR Кутья АА
	Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявки.НаУтверждении");
//	ITRR Кутья АА

	Если ЗаписатьВыполнить() Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораНастройкиБП(Результат,ДП) Экспорт
	
	Если Результат = Неопределено Тогда 
		ПоказатьПредупреждение(,
			"Не выбрана настройка маршрута бизнес-процесса.
			|Отправка в службу НСИ не выполнена."
		);
		Возврат;
	Иначе
		Объект.НастройкаБП = Результат.Значение;
	КонецЕсли;
	ЗаполнитьПрохождениеЭтапов();
	Если ЗаписатьВыполнить() Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Удалить(Команда)
	Если НЕ Объект.Стартован Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаОтветаУдалитьЗаявку",ЭтаФорма);
//	ITRR КутьяАА Локализация
		//ПоказатьВопрос(
		//	ОписаниеОповещения,
		//	"Вы уверены, что хотите удалить заявку?",
		//	РежимДиалогаВопрос.ДаНет,,,"Подтверждение удаления"
		//);
		ПоказатьВопрос(
			ОписаниеОповещения,
			НСтр("ru = 'Вы уверены, что хотите удалить заявку?'; en = 'Are you sure you want to delete the request?'"),
			РежимДиалогаВопрос.ДаНет,,,НСтр("ru = 'Подтверждение удаления'; en = 'Confirmation of deletion'")
		);
	Иначе
//	ITRR КутьяАА Локализация
//		ПоказатьПредупреждение(,"Запущенный бизнес-процесс удалить нельзя!");
		ПоказатьПредупреждение(,НСтр("ru = 'Запущенный бизнес-процесс удалить нельзя!'; en = 'The launched business process can not be deleted!'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОтветаУдалитьЗаявку(Результат, ДП) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
			УдалитьНаСервере();
			ОповеститьОбИзменении(Тип("БизнесПроцессСсылка.нсиВводНовогоЭлементаСправочника"));
			Оповестить("ИзменилсяСписокБП");
			Модифицированность = Ложь;
			Закрыть();
		Иначе
			Модифицированность = Ложь;
			УдалитьПредмет(Объект.Предмет);
			Закрыть();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Параметры(Команда)
	НаправленияОбработки = новый СписокЗначений;
	НаправленияОбработки.ЗагрузитьЗначения(нсиБизнеспроцессы.ПолучитьГруппыПользователейБП(Объект.Автор));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаЗакрытияФормыПараметровБП",ЭтаФорма);
	ОткрытьФорму(
		"ОбщаяФорма.нсиФормаПараметровБП",
		новый Структура("НаправленияОбработки,НаправлениеОбработки",НаправленияОбработки,Объект.ГруппаПользователейБП),
		ЭтаФорма,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗакрытияФормыПараметровБП(Результат,ДП) Экспорт
	Если Результат<>Неопределено Тогда 
		Объект.ГруппаПользователейБП = Результат;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПредметНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.ИмяСправочника) Тогда 
//	ITRR Кутья АА Локализация	
//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнено имя обрабатываемого справочника.");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнено имя обрабатываемого справочника.'; en = 'The name of the processed directory is empty.'"));
		Возврат;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(Объект.Предмет) Тогда 
		Отказ = Ложь;
		СоздатьВременныйЭлемент(Отказ);
		Если Отказ Тогда 
//	ITRR Кутья АА Локализация	
//			ПоказатьПредупреждение(,"Не удалось создать макет!");
			ПоказатьПредупреждение(,НСтр("ru = 'Не удалось создать макет!'; en = 'Could not create layout!'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ИмяФормыПредмета = нсиБизнесПроцессыРаботаСоСправочниками.ПолучитьИмяФормыОбъекта(Объект.ИмяСправочника, Объект.Предмет);
	ПараметрыФормы = Новый Структура("Ключ,ВременныйЭлемент", Объект.Предмет, Истина);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПредметНажатиеЗавершение", ЭтотОбъект);
	
//	ITRR Кутья АА
	ПараметрыФормы.Вставить("РежимЗаявки", Истина);
//	ITRR Кутья АА
	
	ОткрытьФорму(ИмяФормыПредмета, ПараметрыФормы, Элемент,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПредметСтрокой = ПредметСтрокой(Объект.Предмет);
//	ITRR Кутья АА Локализация	
//	Если ПредметСтрокой = "не задан" Тогда 
	Если ПредметСтрокой = НСтр("ru = 'не задан'; en = 'not specified'") Тогда 
//	ITRR Кутья АА Локализация	
//		ПредметСтрокой = "введите необходимые атрибуты";
		ПредметСтрокой = НСтр("ru = 'введите необходимые атрибуты'; en = 'enter the required attributes'");
	КонецЕсли;	
	
//	ITRR Кутья АА Локализация	
//	Объект.Наименование 	= "Создать " + Объект.Предмет;
	Если ТипЗнч(Объект.Предмет) = Тип("СправочникСсылка.GlobalSKU") 
		ИЛИ ТипЗнч(Объект.Предмет) = Тип("СправочникСсылка.GlobalPartners") Тогда
		Объект.Наименование 	= НСтр("ru = 'Создать'; en = 'Create'", "en")+" " 
		+ Объект.Предмет;
	Иначе
		Объект.Наименование 	= НСтр("ru = 'Создать'; en = 'Create'")+" " 
		+ Объект.Предмет;
	КонецЕсли; 
//	ITRR Кутья АА Локализация	
//	Объект.ОписаниеЗадания 	= "Создать " + Объект.Предмет;
	Если ТипЗнч(Объект.Предмет) = Тип("СправочникСсылка.GlobalSKU") 
		ИЛИ ТипЗнч(Объект.Предмет) = Тип("СправочникСсылка.GlobalPartners") Тогда
		Объект.ОписаниеЗадания 	= НСтр("ru = 'Создать'; en = 'Create'", "en")+" " 
		+ Объект.Предмет;
	Иначе
		Объект.ОписаниеЗадания 	= НСтр("ru = 'Создать'; en = 'Create'")+" " 
		+ Объект.Предмет;
	КонецЕсли; 
	
	УправлениеВидимостьюИДоступом();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяСправочникаПриИзменении(Элемент)
	
	Элементы.СоздатьГруппу.Видимость = нсиБизнесПроцессыРаботаСоСправочниками.ЭтоИерархияГруппИЭлементов(Объект.ИмяСправочника);
	
	УдалитьРазнотипныйЭлемент();	
	
	ПредметСтрокой = ПредметСтрокой(Объект.Предмет);
//	ITRR Кутья АА Локализация	
//	Если ПредметСтрокой = "не задан" Тогда 
	Если ПредметСтрокой = НСтр("ru = 'не задан'; en = 'not specified'") Тогда 
//	ITRR Кутья АА Локализация	
//		ПредметСтрокой = "введите необходимые атрибуты";
		ПредметСтрокой = НСтр("ru = 'введите необходимые атрибуты'; en = 'enter the required attributes'");
	КонецЕсли;	
	
	УправлениеВидимостьюИДоступом();
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовокЗаданияПриИзменении(Элемент)
	
	Объект.ОписаниеЗадания = Объект.Наименование;
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ЗаписатьВыполнить()
	
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Регистрация заявки на ввод нового элемнта справочника """+Строка(Объект.ИмяСправочника)+""""
	);
	
	ОчиститьСообщения();
	ПараметрСтарт = НЕ НачальныйПризнакСтарта И НЕ Объект.Стартован;
	УспешноЗаписано = Записать(Новый Структура("Старт", ПараметрСтарт));
	
	Если УспешноЗаписано И ПараметрСтарт Тогда
		
		НачальныйПризнакСтарта = Истина;
		ОтобразитьИзменениеДанных(Объект.Ссылка, ВидИзмененияДанных.Добавление);
		Оповестить("ЗадачаИзменена", Объект.Ссылка);
		
	КонецЕсли;
	Возврат УспешноЗаписано;
	
КонецФункции

&НаСервере
Процедура УдалитьНаСервере()
	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	Попытка
		
		Если ЗначениеЗаполнено(Объект.Предмет) Тогда
			ОбъектПредмет = Объект.Предмет.ПолучитьОбъект();
			Если ОбъектПредмет <> Неопределено Тогда 
				ОбъектПредмет.Удалить();
			КонецЕсли;
		КонецЕсли;
		
		Объект.Ссылка.ПолучитьОбъект().Удалить();
		ЗафиксироватьТранзакцию();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось удалить! "+ОписаниеОшибки());
		ОтменитьТранзакцию();
	КонецПопытки;
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

&НаСервере
Процедура УправлениеВидимостьюИДоступом()
	пТолькоПросмотр = ТолькоПросмотр ИЛИ Объект.Стартован;
	
	Элементы.ЗаписатьИЗакрыть.Доступность = НЕ пТолькоПросмотр И НЕ Объект.Стартован;
	Элементы.Удалить.Доступность = НЕ пТолькоПросмотр И НЕ Объект.Стартован;
	Элементы.Записать.Доступность = НЕ пТолькоПросмотр И НЕ Объект.Стартован;
	Элементы.ЗаголовокЗадания.ТолькоПросмотр = пТолькоПросмотр;
	Элементы.ИмяСправочника.ТолькоПросмотр = пТолькоПросмотр;
	Элементы.ТекстЗадания.ТолькоПросмотр = пТолькоПросмотр;
	Элементы.СоздатьГруппу.Доступность = НЕ пТолькоПросмотр;
	
	Если ЗначениеЗаполнено(Объект.ИмяСправочника) Тогда 
		Элементы.СоздатьГруппу.Видимость = нсиБизнесПроцессыРаботаСоСправочниками.ЭтоИерархияГруппИЭлементов(Объект.ИмяСправочника);
	Иначе
		Элементы.СоздатьГруппу.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.НастройкаБП.Видимость = 
		Объект.Стартован
		И (РольДоступна("ПолныеПрава") ИЛИ РольДоступна("нсиСтаршийЭксперт"));
		
КонецПроцедуры

&НаСервере
Процедура УдалитьПредмет(Ссылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда 
		Возврат;
	КонецЕсли;	
	
	Если Объект.Ссылка.Стартован Тогда 
		Возврат;
	КонецЕсли;

	НачатьТранзакцию();
	Попытка
		Предмет = Ссылка.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(Ссылка);
		Предмет.Удалить();
		
		БПОбъект = РеквизитФормыВЗначение("Объект");
		БПОбъект.Предмет = Неопределено;
		БПОбъект.ОбменДанными.Загрузка = Истина;
		БПОбъект.Записать();
		ЗначениеВРеквизитФормы(БПОбъект,"Объект");
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось удалить макет: "+ОписаниеОшибки());
		ОтменитьТранзакцию();
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры	

&НаСервере
Процедура СоздатьВременныйЭлемент(Отказ)
	
	БПОбъект = РеквизитФормыВЗначение("Объект");
	БПОбъект.СоздатьВременныйЭлемент(Отказ);
	ЗначениеВРеквизитФормы(БПОбъект,"Объект");
	Если НЕ Отказ Тогда 
		нсиРаботаСФормамиСервер.УстановитьТипПредмета(Объект.Предмет, Элементы.ПризнакЭлемента);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УдалитьРазнотипныйЭлемент()
	
	Если ЗначениеЗаполнено(Объект.ИмяСправочника) Тогда 
		Если Объект.Предмет <> Неопределено Тогда 
			Если ТипЗнч(Объект.ИмяСправочника) = Тип("Строка") Тогда 
				Если ТипЗнч(Объект.Предмет) <> Тип("СправочникСсылка."+Объект.ИмяСправочника) Тогда 
					УдалитьПредмет(Объект.Предмет);
					Объект.Предмет = Неопределено;
				КонецЕсли;
			ИначеЕсли ТипЗнч(Объект.ИмяСправочника) = Тип("СправочникСсылка.нсиВидыСправочников") Тогда 
				Если (ТипЗнч(Объект.Предмет) <> Тип("СправочникСсылка.нсиУниверсальныйФункциональныйСправочник")
					И ТипЗнч(Объект.Предмет) <> Тип("СправочникСсылка.нсиУниверсальныйКлассификатор"))
					ИЛИ ТипЗнч(Объект.Предмет.Владелец) <> Объект.ИмяСправочника Тогда 
					УдалитьПредмет(Объект.Предмет);
					Объект.Предмет = Неопределено;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если Объект.Предмет <> Неопределено Тогда 
			УдалитьПредмет(Объект.Предмет);
		КонецЕсли;
		Объект.Предмет = Неопределено;
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьПрохождениеЭтапов()
	БПОбъект = РеквизитФормыВЗначение("Объект");
	БПОбъект.ЗаполнитьПрохождениеЭтапов();
	ЗначениеВРеквизитФормы(БПОбъект,"Объект");
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПредметСтрокой(Предмет)
	Возврат нсиБизнесПроцессы.ПредметСтрокой(Предмет);	
КонецФункции

&НаСервере
Процедура УдалитьМакетНаСервереПриЗакрытии(Ошибка = Ложь)
	
//	ITRR Кутья АА	
	УстановитьПривилегированныйРежим(Истина);
//	ITRR Кутья АА	
	
	Если НЕ ЗначениеЗаполнено(Объект.Предмет) тогда
		Возврат
	КонецЕсли;	
	
	НачатьТранзакцию();
	Попытка
		Предмет = Объект.Предмет.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(Объект.Предмет);
		Предмет.Удалить();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();

		ИнформацияОбОшибке = ИнформацияОбОшибке(); 
		ЗаписьЖурналаРегистрации("Удаление макета", УровеньЖурналаРегистрации.Ошибка, , 
			Объект.Ссылка, "При удалении макета возникла ошибка: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти
