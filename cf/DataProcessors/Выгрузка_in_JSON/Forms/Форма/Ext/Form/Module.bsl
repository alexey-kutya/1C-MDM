
&НаСервере
Функция ВыгрузитьНаСервере()
	
	МассивТоваров=Новый Массив;
	Для каждого Стр Из Объект.ТабличнаяЧасть1 Цикл
		Если ЗначениеЗаполнено(Стр.Номенклатура) Тогда
		   МассивТоваров.Добавить(Стр.Номенклатура);
	   КонецЕсли;
   КонецЦикла;
   
   Если МассивТоваров.Количество()=0 Тогда
	   Сообщение=Новый СообщениеПользователю;
	   Сообщение.Текст="Не выгружено! Выберите номенклатуру!";
	   Сообщение.Сообщить();
	   Возврат Неопределено;
   КонецЕсли;
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",МассивТоваров); //у нас это будет список, зарегистрированный для выгрузки в SAP
	//закладки: ключевые + основные + алкоголь
	Запрос.Текст= "ВЫБРАТЬ
	              |	нсиМТР.Ссылка,
	              |	нсиМТР.Код КАК LocalID,
	              |	нсиМТР.Наименование КАК Name,
	              |	нсиМТР.Класс КАК ClassOfProducts,
	              |	нсиМТР.Status КАК Status,
	              |	нсиМТР.LocalMaterialType КАК LocalMaterialType,
	              |	нсиМТР.LocalBrand КАК LocalBrand,
	              |	нсиМТР.РазновидностьВкус КАК TypeTaste,
	              |	нсиМТР.LocalVersion КАК LocalVersion,
	              |	нсиМТР.LocalAlcoholContent КАК LocalAlcoholContent,
	              |	нсиМТР.LocalVolume КАК LocalVolume,
	              |	нсиМТР.LocalFactory КАК LocalFactory,
	              |	нсиМТР.LocalPacking КАК LocalPacking,
	              |	нсиМТР.LocalAmount КАК LocalAmount,
	              |	нсиМТР.LocalLabel КАК LocalLabel,
	              |	нсиМТР.Артикул КАК Article,
	              |	нсиМТР.ВидНоменклатуры КАК KindProduct,
	              |	нсиМТР.ПолноеНаименование КАК FullName,
	              |	нсиМТР.НаименованиеEN КАК NameEng,
	              |	нсиМТР.БазоваяЕдиницаИзмерения КАК BasicUnitMeasurement,
	              |	нсиМТР.ЕдиницаХраненияОстатков КАК UnitStorageBalance,
	              |	нсиМТР.ЕдиницаДляОтчетов КАК UnitForReport,
	              |	нсиМТР.ЕдиницаИзмеренияМест КАК UnitMeasurementLocal,
	              |	нсиМТР.СтавкаНДС КАК SizeNDS,
	              |	нсиМТР.СтранаПроисхождения КАК CountryOrigin,
	              |	нсиМТР.АртикулПлановый КАК ArticlePlanned,
	              |	нсиМТР.СтатьяЗатрат КАК CostItem,
	              |	нсиМТР.ТипПродукции КАК TypeProduct,
	              |	нсиМТР.ТипОтсрочки КАК TypeDelay,
	              |	нсиМТР.ОсновнойПоставщик КАК MainProvider,
	              |	нсиМТР.алкИмпорт КАК Import,
	              |	нсиМТР.алкЭкспорт КАК Export,
	              |	нсиМТР.КодТНВЭД КАК KodTNVD,
	              |	нсиМТР.ВидУпаковки КАК KindOfBox,
	              |	нсиМТР.НеПереноситьКрепостьВСерию КАК NotCarryStrengthInSeries,
	              |	нсиМТР.алкТипПродукции КАК AlcTypeProduct,
	              |	нсиМТР.алкСортСпирта КАК AlcSortAlcohol,
	              |	нсиМТР.алкВидПродукции КАК AlcKindProduct,
	              |	нсиМТР.КупажПоУмолчанию КАК AlcBlendDefault,
	              |	нсиМТР.СрокГодностиВДнях КАК AlcTimeUsing,
	              |	нсиМТР.алкПроизводитель КАК AlcCreator,
	              |	нсиМТР.алкГОСТ КАК AlcGOST,
	              |	нсиМТР.алкСоставПродукта КАК AlcProductComposition,
	              |	нсиМТР.алкУсловияТранспортирования КАК AlcTransportConditions,
	              |	нсиМТР.ПищеваяЦенность КАК AlcFoodValue,
	              |	нсиМТР.Цвет КАК AlcColor,
	              |	нсиМТР.Аромат КАК AlcSmell,
	              |	нсиМТР.Букет КАК AlcFlavor,
	              |	нсиМТР.ВнешнийВид КАК AlcForm,
	              |	нсиМТР.СоставПродукта КАК ProductComposition,
	              |	нсиМТР.ВидыАлкогольнойПродукции КАК KindsOfAlcProducts,
	              |	нсиМТР.LocalMaterialType.ВидМатериалаSAP КАК KindOfMaterials,
	              |	нсиМТР.СекторСАП КАК Sector,
	              |	нсиМТР.ПартияСАП КАК Party,
	              |	нсиМТР.КлассСАП КАК ClassSAP,
	              |	нсиМТР.НалоговаяКлассификацияСАП КАК TaxClassification,
	              |	нсиМТР.СтатистическаяГруппаМатериалаСАП КАК StatisticsGroupMaterial,
	              |	нсиМТР.ГруппаЦенМатериала КАК MaterialsPriceGroupe,
	              |	нсиМТР.ГруппаКонтировкиМатериалаСАП КАК GroupMaterialsAccount,
	              |	нсиМТР.ПроверкаДоступностиСАП КАК AvailabilityTest,
	              |	нсиМТР.ОбязательноВедениеПоПартиямСАП КАК NecessaryPartiesAccounting,
	              |	нсиМТР.ГруппаТранспортировкиСАП КАК TransportationGroup,
	              |	нсиМТР.ГруппаПогрузкиСАП КАК LoadingGroup,
	              |	нсиМТР.ТипППМСАП КАК TypePPM,
	              |	нсиМТР.ПлановикСАП КАК Planner,
	              |	нсиМТР.РазмерПартииППМСАП КАК SizePartyPPM,
	              |	нсиМТР.КодГоризонтаСАП КАК HorizonsKod,
	              |	нсиМТР.КлассОценкиСАП КАК ClassRating,
	              |	нсиМТР.СсылкиСЭД.(
	              |		СсылкаСЭД КАК RefSED,
	              |		Комментарий КАК CommentSED,
	              |		Дата КАК DateSED,
	              |		Контрагент КАК KlientSED
	              |	),
	              |	нсиМТР.КодаSAP.(
	              |		Код КАК KodSap
	              |	)
	              |ИЗ
	              |	Справочник.нсиМТР КАК нсиМТР
	              |ГДЕ
	              |	нсиМТР.Ссылка В(&Ссылка)";
	ШапкаНоменклатуры=Запрос.Выполнить().Выгрузить(); 
	
	//единицы измерения
	Запрос.Текст= "ВЫБРАТЬ
	              |	ЕдиницыИзмерения.Владелец,
	              |	ЕдиницыИзмерения.Код КАК UnitKod,
	              |	ЕдиницыИзмерения.ЕдиницаПоКлассификатору КАК UnitByClassifier,
	              |	ЕдиницыИзмерения.Наименование КАК UnitName,
	              |	ЕдиницыИзмерения.Коэффициент КАК UnitCoefficient,
	              |	ЕдиницыИзмерения.Вес КАК UnitWeight,
	              |	ЕдиницыИзмерения.Объем КАК UnitVolume,
	              |	ЕдиницыИзмерения.ОбъемМ3 КАК UnitVolumeM3,
	              |	ЕдиницыИзмерения.ПорогОкругления КАК UnitRoundingOff,
	              |	ЕдиницыИзмерения.ПредупреждатьОНецелыхМестах КАК WarningAboutNotIntPlaces,
	              |	ЕдиницыИзмерения.РаскладкаКоличествоПоДлине КАК AmountByLenght,
	              |	ЕдиницыИзмерения.РаскладкаКоличествоПоШирине КАК AmountByWeight,
	              |	ЕдиницыИзмерения.РаскладкаКоличествоСлоев КАК AmountLayers
	              |ИЗ
	              |	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	              |ГДЕ
	              |	ЕдиницыИзмерения.Владелец В(&Ссылка)";
	ЕдиницыИзмерения=Запрос.Выполнить().Выгрузить();
	
	//штрихкоды
	Запрос.Текст= "ВЫБРАТЬ
	              |	Штрихкоды.Штрихкод КАК Codebar,
	              |	Штрихкоды.Владелец КАК Owner,
	              |	Штрихкоды.ТипШтрихкода КАК TypeCodebar,
	              |	Штрихкоды.ЕдиницаИзмерения КАК UnitMeasuring,
	              |	Штрихкоды.Качество КАК Quality
	              |ИЗ
	              |	РегистрСведений.Штрихкоды КАК Штрихкоды
	              |ГДЕ
	              |	Штрихкоды.Владелец В(&Ссылка)";
	Штрихкоды=Запрос.Выполнить().Выгрузить();
	
	//спецификации
	Запрос.Текст="ВЫБРАТЬ
	             |	СпецификацииНоменклатуры.Наименование КАК Sp_Name,
	             |	СпецификацииНоменклатуры.Код КАК Sp_Kod,
	             |	СпецификацииНоменклатуры.Состояние КАК Sp_Status,
	             |	СпецификацииНоменклатуры.ДатаУтверждения КАК Sp_Date,
	             |	СпецификацииНоменклатуры.ВидСпецификации КАК Sp_Kind,
	             |	СпецификацииНоменклатуры.Активная КАК Sp_Active,
	             |	СпецификацииНоменклатуры.КодВерсии КАК Sp_KodVersion,
	             |	СпецификацииНоменклатуры.Ответственный КАК Sp_Responsible,
	             |	СпецификацииНоменклатуры.СтранаИмпортер КАК Sp_CountryImport,
	             |	СпецификацииНоменклатуры.Номенклатура КАК Sp_Product            //need for guid
	             |ИЗ
	             |	Справочник.СпецификацииНоменклатуры КАК СпецификацииНоменклатуры
	             |ГДЕ
	             |	СпецификацииНоменклатуры.Номенклатура В(&Ссылка)";
	Спецификации=Запрос.Выполнить().Выгрузить();
	
	
	СтруктураНоменклатур=Новый Структура;  
	мМассивНоменклатур=Новый Массив;
	Для каждого Стр Из ШапкаНоменклатуры Цикл                         //строка с данными номенклатуры  
		
		Данные = Новый Структура;
		Для каждого Колонка Из ШапкаНоменклатуры.Колонки Цикл         //обход строки номенклатуры
			Данные.Вставить("CurrentVersion",ТекущаяДата());
			Если Колонка.Имя="Ссылка" Тогда
				Данные.Вставить("Guid",Стр[Колонка.Имя].УникальныйИдентификатор());
				Продолжить;
			КонецЕсли;
			
			Если  Колонка.Имя="СсылкиСЭД" Тогда
				//ссылки СЭД
				ТЗ_СЭД=Стр.СсылкиСЭД;
				МассивJson_СЭД=Новый Массив;
				Для каждого стрСЭД ИЗ ТЗ_СЭД Цикл  
					Структура=Новый Структура;
					Структура.Вставить("RefSED",стрСЭД.RefSED);
					Структура.Вставить("CommentSED",стрСЭД.CommentSED);
					Структура.Вставить("DateSED",стрСЭД.DateSED);
					Структура.Вставить("KlientSED",стрСЭД.KlientSED);
					МассивJson_СЭД.Добавить(Структура);
				КонецЦикла;
				Данные.Вставить("RefsSAD",МассивJson_СЭД);
			ИначеЕсли  Колонка.Имя="КодаSAP" Тогда
				//кода САП
				ТЗ_Кода=Стр.КодаSAP;
				МассивJson_Кода=Новый Массив;
				Для каждого стрК ИЗ ТЗ_Кода Цикл  
					Структура=Новый Структура;
					Структура.Вставить("KodSap",стрК.KodSap);
					МассивJson_Кода.Добавить(Структура);
				КонецЦикла;
				Данные.Вставить("KodSAPList",МассивJson_Кода);
			ИначеЕсли Колонка.Имя<>"СсылкиСЭД"  Тогда  //ТЗ нельзя передать на клиента
				Данные.Вставить(Колонка.Имя, Стр[Колонка.Имя]);
			КонецЕсли;
		КонецЦикла;
		
		//единицы измерения
		СтрокиЕдиниц=ЕдиницыИзмерения.НайтиСтроки(Новый Структура("Владелец",Стр.Ссылка));
		Колонки=ЕдиницыИзмерения.Колонки;  
		МассивЕдиниц=Новый Массив;
		Для каждого Единицы Из СтрокиЕдиниц Цикл //строка с данными ед.изм.
			Структура=Новый Структура;
			Для каждого Колонка Из Колонки Цикл
				Если НЕ Колонка.Имя="Владелец" Тогда
					Структура.Вставить(Колонка.Имя,Единицы[Колонка.Имя]);
				КонецЕсли;
			КонецЦикла; 
			МассивЕдиниц.Добавить(Структура);
		КонецЦикла;
		Данные.Вставить("UnitMeasurement",МассивЕдиниц);
		
		//штрихкоды
		МассивШтрихкодов=Штрихкоды.НайтиСтроки(Новый Структура("Owner",Стр.Ссылка));
		Колонки=Штрихкоды.Колонки;  
		мШтрихкоды=Новый Массив;
		Для каждого Коды Из МассивШтрихкодов Цикл
			Структура=Новый Структура;
			Для каждого Колонка Из Колонки Цикл    //строка с данными штрихкода
				Структура.Вставить(Колонка.Имя,Коды[Колонка.Имя]);
			КонецЦикла;  
			мШтрихкоды.Добавить(Структура);
		КонецЦикла;
		Данные.Вставить("Codebars",мШтрихкоды);
		
		
		//спецификации
		МассивСпецификаций=Спецификации.НайтиСтроки(Новый Структура("Sp_Product",Стр.Ссылка));
		Колонки=Спецификации.Колонки;
		мСпецификации=Новый Массив;
		Для каждого стрСпец Из МассивСпецификаций Цикл
			Структура=Новый Структура;
			Для каждого Колонка Из Колонки Цикл    //строка с данными штрихкода
				Структура.Вставить(Колонка.Имя,стрСпец[Колонка.Имя]);
				Если Колонка.Имя="Sp_Product" Тогда
					Структура.Вставить("Guid_Sp_Product",стрСпец.Sp_Product.УникальныйИдентификатор());
				КонецЕсли;
			КонецЦикла; 
			мСпецификации.Добавить(Структура);
		КонецЦикла;
		Данные.Вставить("Specifications",мСпецификации);

		мМассивНоменклатур.Добавить(Данные);
		
	КонецЦикла;
	
	СтруктураНоменклатур.Вставить("Products",мМассивНоменклатур);

	Возврат СтруктураНоменклатур;
	
КонецФункции

&НаСервере
Функция ФункцияПреобразованияЗаписи(Свойство, Значение, ДополнительныеПараметры, Отказ) Экспорт
	
	Если ТипЗнч(Значение)<>Тип("Дата") И ТипЗнч(Значение)<>Тип("Булево") И ТипЗнч(Значение)<>Тип("Строка") Тогда
		Возврат Строка(Значение);
	КонецЕсли;

	Отказ=Истина;
	
КонецФункции

&НаКлиенте
Процедура Выгрузить(Команда)
	
	Запись = Новый ЗаписьJSON;
	Год=Формат(ТекущаяДата(),"ДФ=yyyy");
	Месяц=Формат(ТекущаяДата(),"ДФ=MM");;
	День=Формат(ТекущаяДата(),"ДФ=dd");
	
	Час=ДобавитьНульСлеваКолиНадобно(Строка(Час(ТекущаяДата())));
	Минута=ДобавитьНульСлеваКолиНадобно(Строка(Минута(ТекущаяДата())));
	Секунда=ДобавитьНульСлеваКолиНадобно(Строка(Секунда(ТекущаяДата())));

	ПутьКФайлу="\\saprouter.rs-online.ru\test\MDM\QAS\sku\SKU_"+Год+Месяц+День+Час+Минута+Секунда+".json";
	ПараметрыЗаписи=Новый ПараметрыЗаписиJSON(,Символы.Таб);
	//Запись.ОткрытьФайл(ПутьКФайлу,,,ПараметрыЗаписи);
	Запись.ОткрытьФайл(ПутьКФайлу,,,ПараметрыЗаписи);

	Данные=ВыгрузитьНаСервере();
	Если Данные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиСериализацииJSON=Новый НастройкиСериализацииJSON;
	НастройкиСериализацииJSON.ВариантЗаписиДаты=ВариантЗаписиДатыJSON.ЛокальнаяДата;
	НастройкиСериализацииJSON.ФорматСериализацииДаты=ФорматДатыJSON.ISO; //тут уточник у САПовцев
	
	ЗаписатьJSON(Запись, Данные, НастройкиСериализацииJSON, "ФункцияПреобразованияЗаписи", ЭтотОбъект);
	Запись.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок                 = "Здравствуйте!";
	Фильтр="Файл json, *.json|*.json";
	Диалог.Фильтр                   = Фильтр;
	ПолноеИмяФайла=Диалог.ПолноеИмяФайла;
	Если Диалог.Выбрать() Тогда
		ПутьКФайлу= Диалог.ПолноеИмяФайла;
	Иначе
		Сообщить("Файл не выбран!");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьКонтрагентов(Команда)
	
    	ВыгрузитьКонтрагентовОбщийМетод();
		
КонецПроцедуры

Функция ДобавитьНульСлеваКолиНадобно(Время)
	
	Если СтрДлина(Время)=1 Тогда
		Возврат "0"+Время;
	КонецЕсли;
	
	Возврат Время;
	
КонецФункции

&НаСервере
Функция ВыгрузитьНаСервереКонтрагентов(мПунктыРазгрузки=Неопределено)
	
	ФлагПункты=Ложь;
	Если мПунктыРазгрузки<>Неопределено И мПунктыРазгрузки.Количество()>0 Тогда
		ФлагПункты=Истина;
	КонецЕсли;
	
	МассивКонтрагентов=Новый Массив;
	Для каждого Стр Из Объект.ТабличнаяЧасть2 Цикл
		Если ЗначениеЗаполнено(Стр.Контрагент) Тогда
		   МассивКонтрагентов.Добавить(Стр.Контрагент);
	   КонецЕсли;
   КонецЦикла;
   
   //отдельно сохраняем контрагентов, извлеченных из выгружаемых в SAP пунктов разгрузки
   МассивКотровИзПунктаРазгрузки=Новый Массив;
   Если ФлагПункты Тогда
	   Для каждого Элем Из мПунктыРазгрузки Цикл
		   Если МассивКонтрагентов.Найти(Элем.Владелец)=Неопределено Тогда
			   МассивКонтрагентов.Добавить(Элем.Владелец);
			   МассивКотровИзПунктаРазгрузки.Добавить(Элем.Владелец);
		   КонецЕсли;
	   КонецЦикла;
   КонецЕсли;
   
   Если МассивКонтрагентов.Количество()=0 Тогда
	   Сообщение=Новый СообщениеПользователю;
	   Сообщение.Текст="Не выгружено! Выберите контрагентов!";
	   Сообщение.Сообщить();
	   Возврат Неопределено;
   КонецЕсли;
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",МассивКонтрагентов); //у нас это будет список, зарегистрированный для выгрузки в SAP
	//закладки: ключевые + основные + алкоголь
	Запрос.Текст= "ВЫБРАТЬ
	              |	нсиКонтрагенты.Ссылка КАК Ref,
	              |	нсиКонтрагенты.GlobalID,
	              |	нсиКонтрагенты.Код КАК LocalID,
	              |	нсиКонтрагенты.Наименование КАК Name,
	              |	ВЫБОР
	              |		КОГДА нсиКонтрагенты.Status = ЗНАЧЕНИЕ(Перечисление.GlobalPartnersStatuses.Active)
	              |			ТОГДА ""Активный""
	              |		ИНАЧЕ ""Пассивный""
	              |	КОНЕЦ КАК Status,
	              |	нсиКонтрагенты.ПолноеНаименование КАК FullName,
	              |	нсиКонтрагенты.НаименованиеEN КАК NameEN,
	              |	ВЫБОР
	              |		КОГДА нсиКонтрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.нсиЮрФизЛицо.ФизЛицо)
	              |			ТОГДА ""ФизЛицо""
	              |		ИНАЧЕ ""ЮрЛицо""
	              |	КОНЕЦ КАК LawyerIndividualFace,
	              |	нсиКонтрагенты.Нерезидент КАК NonResident,
	              |	нсиКонтрагенты.Покупатель КАК Buyer,
	              |	нсиКонтрагенты.Поставщик КАК Provider,
	              |	нсиКонтрагенты.ОрганизационноПравоваяФорма.Наименование КАК Okpof,
	              |	нсиКонтрагенты.Родитель.Наименование КАК GroupOfPartners,
	              |	нсиКонтрагенты.Регион.Наименование КАК Region,
	              |	ВЫБОР
	              |		КОГДА нсиКонтрагенты.Нерезидент
	              |			ТОГДА """"
	              |		ИНАЧЕ нсиКонтрагенты.ИНН
	              |	КОНЕЦ КАК INN,
	              |	ВЫБОР
	              |		КОГДА нсиКонтрагенты.Нерезидент
	              |			ТОГДА """"
	              |		ИНАЧЕ нсиКонтрагенты.КПП
	              |	КОНЕЦ КАК KPP,
	              |	нсиКонтрагенты.КодПоОКПО КАК OKPO,
	              |	нсиКонтрагенты.ВходитВХолдинг КАК ComeInHolding,
	              |	нсиКонтрагенты.ОГРН КАК OGRN,
	              |	нсиКонтрагенты.ОКДП КАК OKDP,
	              |	нсиКонтрагенты.ГоловнойКонтрагент КАК HeadPartner,
	              |	нсиКонтрагенты.РНН КАК RNN,
	              |	нсиКонтрагенты.КППКрупнейшегоНалогоплательщика КАК KPPLargestTaxplayer,
	              |	нсиКонтрагенты.ДокументУдостоверяющийЛичность КАК Certification,
	              |	нсиКонтрагенты.КаналСбыта.Наименование КАК SaleChannel,
	              |	ВЫБОР
	              |		КОГДА нсиКонтрагенты.СостояниеОтношенийСКонтрагентом = ЗНАЧЕНИЕ(Перечисление.ПроблемнаяЗадолженность.Иск)
	              |			ТОГДА ""Иск""
	              |		КОГДА нсиКонтрагенты.СостояниеОтношенийСКонтрагентом = ЗНАЧЕНИЕ(Перечисление.ПроблемнаяЗадолженность.Судопроизводство)
	              |			ТОГДА ""Судопроизводство""
	              |		КОГДА нсиКонтрагенты.СостояниеОтношенийСКонтрагентом = ЗНАЧЕНИЕ(Перечисление.ПроблемнаяЗадолженность.БезнадежнаяЗадолженность)
	              |			ТОГДА ""БезнадежнаяЗадолженность""
	              |		КОГДА нсиКонтрагенты.СостояниеОтношенийСКонтрагентом = ЗНАЧЕНИЕ(Перечисление.ПроблемнаяЗадолженность.МировоеСоглашение)
	              |			ТОГДА ""МировоеСоглашение""
	              |		КОГДА нсиКонтрагенты.СостояниеОтношенийСКонтрагентом = ЗНАЧЕНИЕ(Перечисление.ПроблемнаяЗадолженность.СлужбаБезопасности)
	              |			ТОГДА ""СлужбаБезопасности""
	              |	КОНЕЦ КАК StateOfRelations,
	              |	нсиКонтрагенты.СхемаКомплектацииЗаказов КАК SchemeEquepmentOrder,
	              |	ВЫБОР
	              |		КОГДА нсиКонтрагенты.СтатусМСФО = 0
	              |			ТОГДА ИСТИНА
	              |	КОНЕЦ КАК ExternalPartner,
	              |	ВЫБОР
	              |		КОГДА нсиКонтрагенты.СтатусМСФО = 1
	              |			ТОГДА ИСТИНА
	              |	КОНЕЦ КАК ConsolidatedPartner,
	              |	ВЫБОР
	              |		КОГДА нсиКонтрагенты.СтатусМСФО = 2
	              |			ТОГДА ИСТИНА
	              |	КОНЕЦ КАК NotConsolidatedPartner,
	              |	нсиКонтрагенты.КодСинхронизацииМСФО КАК CodeSynchronizationMSFO,
	              |	нсиКонтрагенты.ПереоцениватьПоКурсуCEDC КАК OverrateRateCEDC,
	              |	нсиКонтрагенты.алкКодОргЕГАИС КАК KodPartnerEGAIS,
	              |	нсиКонтрагенты.ЛогистическийОператор КАК LogisticOperator,
	              |	нсиКонтрагенты.УправляющаяКомпания КАК ManagementCompany,
	              |	нсиКонтрагенты.ПроизводственнаяПлощадка КАК ProductionSite,
	              |	нсиКонтрагенты.GLN,
	              |	ВЫБОР
	              |		КОГДА нсиКонтрагенты.ТипПозиции = ЗНАЧЕНИЕ(Перечисление.нсиТипыПозицийСправочников.ДублирующаяПозиция)
	              |			ТОГДА ""ДублирующаяПозиция""
	              |		КОГДА нсиКонтрагенты.ТипПозиции = ЗНАЧЕНИЕ(Перечисление.нсиТипыПозицийСправочников.ЭталоннаяПозиция)
	              |			ТОГДА ""ЭталоннаяПозиция""
	              |		КОГДА нсиКонтрагенты.ТипПозиции = ЗНАЧЕНИЕ(Перечисление.нсиТипыПозицийСправочников.Удалить_ОдиночнаяПозиция)
	              |			ТОГДА ""Удалить_ОдиночнаяПозиция""
	              |		КОГДА нсиКонтрагенты.ТипПозиции = ЗНАЧЕНИЕ(Перечисление.нсиТипыПозицийСправочников.Неопределено)
	              |			ТОГДА ""Неопределено""
	              |	КОНЕЦ КАК PositionType,
	              |	нсиКонтрагенты.ЭталоннаяПозиция.Наименование КАК ReferencePosition,
	              |	ВЫБОР
	              |		КОГДА нсиКонтрагенты.ПризнакИспользования = ЗНАЧЕНИЕ(Перечисление.нсиПризнакиИспользованияПозицийКонтрагентов.Используется)
	              |			ТОГДА ""Используется""
	              |		ИНАЧЕ ""Не используется""
	              |	КОНЕЦ КАК SignOfUse,
	              |	нсиКонтрагенты.ЗаписьНеНормализуема КАК NonNormalizedRecord,
	              |	нсиКонтрагенты.Комментарий КАК Comment,
	              |	нсиКонтрагенты.ПринадлежностьСети КАК BelongToNet,
	              |	ВЫБОР
	              |		КОГДА нсиКонтрагенты.Поставщик
	              |			ТОГДА нсиКонтрагенты.КредиторSAP.Группа
	              |		ИНАЧЕ """"
	              |	КОНЕЦ КАК SAPAccountGroupCred,
	              |	ВЫБОР
	              |		КОГДА нсиКонтрагенты.Покупатель
	              |			ТОГДА нсиКонтрагенты.ДебиторSAP.Группа
	              |		ИНАЧЕ """"
	              |	КОНЕЦ КАК SAPAccountGroupDeb,
	              |	нсиКонтрагенты.Страна КАК CountryDeb,
	              |	нсиКонтрагенты.Язык КАК LanguageDeb,
	              |	нсиКонтрагенты.Местоположение КАК LocationDeb,
	              |	нсиКонтрагенты.КаналСбытаSAP КАК ChannelSale,
	              |	нсиКонтрагенты.СекторSAP КАК SectorDeb,
	              |	нсиКонтрагенты.КонтрольныйСчетДебитор КАК ControlAccountDeb,
	              |	нсиКонтрагенты.КонтрольныйСчетКредитор КАК ControlAccountCred,
	              |	нсиКонтрагенты.УсловиеПлатежаДеб КАК ConditionPaymentDeb,
	              |	нсиКонтрагенты.УсловияПлатежаКред КАК ConditionPaymentCred,
	              |	нсиКонтрагенты.ВалютаЗаказаДеб КАК CurrenceDeb,
	              |	нсиКонтрагенты.ВалютаЗаказКред КАК CurrencyCred,
	              |	нсиКонтрагенты.КодыSAP.(
	              |		ДебиторКодSAP КАК KodSAPDebitor
	              |	),
	              |	нсиКонтрагенты.КодыSAPКредитор.(
	              |		НомерСтроки,
	              |		КредиторКодSAP
	              |	),
	              |	нсиКонтрагенты.ДополнительнаяКлассификация.(
	              |		НомерСтроки КАК StringNumber,
	              |		ВидКлассификатора КАК ClassifersKind,
	              |		Класс КАК Class
	              |	),
	              |	нсиКонтрагенты.МенеджерыПокупателя.(
	              |		НомерСтроки КАК StringNumber,
	              |		МенеджерПокупателя КАК BuyersManager
	              |	),
	              |	нсиКонтрагенты.СписокОрганизацийSAP.(
	              |		BE
	              |	),
	              |	нсиКонтрагенты.СписокОрганизацийSAPКред.(
	              |		НомерСтроки,
	              |		BE
	              |	),
	              |	нсиКонтрагенты.СбытовыеОрганизации.(
	              |		СбытоваяОрганизация.КодSAP КАК SALEORG,
	              |		КаналСбыта.КодSAP КАК DISTRCHANNEL,
	              |		Сектор.КодSAP КАК SECTOR,
	              |		"""" КАК SALESDISTRICT,
	              |		"""" КАК SHIPPINGCONDITIONS,
	              |		"""" КАК DELIVERINGPLANT,
	              |		"""" КАК TAXCLASSIFICATION
	              |	)
	              |ИЗ
	              |	Справочник.нсиКонтрагенты КАК нсиКонтрагенты
	              |ГДЕ
	              |	нсиКонтрагенты.Ссылка В(&Ссылка)";
	ШапкаКонтрагентов=Запрос.Выполнить().Выгрузить(); 
	
	//банковские счета	
	Запрос.Текст= "ВЫБРАТЬ
	              |	нсиБанковскиеСчета.Владелец КАК Owner,
	              |	нсиБанковскиеСчета.ВидСчета КАК KindAccount,
	              |	нсиБанковскиеСчета.Наименование КАК Name,
	              |	нсиБанковскиеСчета.НомерСчета КАК NumberAccount,
	              |	нсиБанковскиеСчета.ВалютаДенежныхСредств КАК Currency,
	              |	нсиБанковскиеСчета.Банк КАК Bank,
	              |	нсиБанковскиеСчета.БанкРасчетов КАК BankCalculation,
	              |	нсиБанковскиеСчета.НомерИДатаРазрешения КАК NumberDatePermission,
	              |	нсиБанковскиеСчета.ДатаОткрытия КАК DateOpen,
	              |	нсиБанковскиеСчета.ДатаЗакрытия КАК DateClose,
	              |	нсиБанковскиеСчета.ТекстКорреспондента КАК TextBuyerRecipient,
	              |	нсиБанковскиеСчета.ДополнительнаяКлассификация.(
	              |		НомерСтроки КАК StringNumber,
	              |		ВидКлассификатора КАК ClassifiersKind
	              |	)
	              |ИЗ
	              |	Справочник.нсиБанковскиеСчета КАК нсиБанковскиеСчета";
	БанковскиеСчета=Запрос.Выполнить().Выгрузить();
	
	//данные пунктов разгрузки
	Если ФлагПункты Тогда
		Запрос.Текст= "ВЫБРАТЬ
		              |	алкПунктыРазгрузки.Ссылка,
		              |	алкПунктыРазгрузки.Код КАК LocalID,
		              |	алкПунктыРазгрузки.Владелец КАК Owner,
		              |	алкПунктыРазгрузки.КПП КАК KPP,
		              |	алкПунктыРазгрузки.АдресДляСопроводительныхДокументов КАК AdressUnloading,
		              |	алкПунктыРазгрузки.КаналСбыта КАК ChannelOfSale,
		              |	алкПунктыРазгрузки.GLN,
		              |	алкПунктыРазгрузки.ОсновнойСклад КАК MainStorage,
		              |	алкПунктыРазгрузки.УсловияДоставки КАК ConditionsOfDelivery
		              |ИЗ
		              |	Справочник.алкПунктыРазгрузки КАК алкПунктыРазгрузки
		              |ГДЕ
		              |	алкПунктыРазгрузки.Владелец В(&МассивКонтровИзПунктовРазгрузки)";
		Запрос.УстановитьПараметр("МассивКонтровИзПунктовРазгрузки",МассивКотровИзПунктаРазгрузки);
		ТаблицаПунктовРазгрузки=Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	СтруктураКонтрагентов=Новый Структура;  
	мМассивКонтрагентов=Новый Массив;
	Для каждого Стр Из ШапкаКонтрагентов Цикл                         
		
		Данные = Новый Структура;
		
		//раздел полей для перемещения из шапки в ТЧ организаций
		КонтрольныйСчетДебитор="";
		КонтрольныйСчетКредитор="";
		КаналСбыта="";
		Сектор="";
		Местоположение="";
		УсловиеПлатежаДеб="";
		УсловиеПлатежаКред="";
		СтранаДеб="";
		ЯзыкДеб="";
		ВалютаДеб="";
		ВалютаКред=""; //--
		ГруппаСчетовДеб="";
		ГруппаСчетовКред="";  
		МассивJson_Коды=Новый Массив;
		МассивJson_КодыКредит=Новый Массив;
		СтруктураSAP=Новый Структура;
		
		Для каждого Колонка Из ШапкаКонтрагентов.Колонки Цикл         
			Если Колонка.Имя="ДополнительнаяКлассификация" Тогда					
				ТЗ_ДК=Стр.ДополнительнаяКлассификация;
				МассивJson_ДопКлассификация=Новый Массив;
				Для каждого стрДК ИЗ ТЗ_ДК Цикл  
					Структура=Новый Структура;
					Структура.Вставить("StringNumber",стрДК.StringNumber);
					Структура.Вставить("ClassifersKind",стрДК.ClassifersKind);
					Структура.Вставить("Class",стрДК.Class);
					МассивJson_ДопКлассификация.Добавить(Структура);
				КонецЦикла;
				Данные.Вставить("AdditionalClassifier",МассивJson_ДопКлассификация);
			ИначеЕсли Колонка.Имя="МенеджерыПокупателя" Тогда 
				ТЗ_МП=Стр.МенеджерыПокупателя;
				МассивJson_МП=Новый Массив;
				Для каждого стрМП ИЗ ТЗ_МП Цикл  
					Структура=Новый Структура;
					Структура.Вставить("StringNumber",стрМП.StringNumber);
					Структура.Вставить("ClassifersKind",стрМП.BuyersManager);
					МассивJson_МП.Добавить(Структура);
				КонецЦикла;
				Данные.Вставить("ManagersOfBuyers",МассивJson_МП);
			ИначеЕсли Колонка.Имя="СписокОрганизацийSAP" Тогда   
				
				ТЗ_БЕ=Стр.СписокОрганизацийSAP;
				СтруктураДебиторов=Новый Структура;
				СтруктураДебиторов.Вставить("Account_Group",ГруппаСчетовДеб);
				СтруктураДебиторов.Вставить("Location",Местоположение);
				МассивJson_БЕ=Новый Массив;
				Для каждого стрБЕ ИЗ ТЗ_БЕ Цикл  
					Структура=Новый Структура;
					Структура.Вставить("BE",стрБЕ.BE.КодSAP);
					Структура.Вставить("ControlAccount",КонтрольныйСчетДебитор);
					Структура.Вставить("PayCondition",УсловиеПлатежаДеб);
					МассивJson_БЕ.Добавить(Структура);
				КонецЦикла;
				СтруктураДебиторов.Вставить("BE",МассивJson_БЕ);
				СтруктураДебиторов.Вставить("Objects",МассивJson_Коды);
				СтруктураSAP.Вставить("Debitor",СтруктураДебиторов);
				Если СтруктураSAP.Свойство("Creditor") И СтруктураSAP.Свойство("Debitor") Тогда   //если структура заполнена -- независимо от очередности в запросе
					Данные.Вставить("SAP",СтруктураSAP);
				КонецЕсли;
		   ИначеЕсли Колонка.Имя="СписокОрганизацийSAPКред" Тогда  
				ТЗ_БЕ=Стр.СписокОрганизацийSAPКред;
				СтруктураКредиторов=Новый Структура;
				СтруктураКредиторов.Вставить("Account_Group",ГруппаСчетовКред);
				МассивJson_БЕ=Новый Массив;
				Для каждого стрБЕ ИЗ ТЗ_БЕ Цикл  
					Структура=Новый Структура;
					Структура.Вставить("BE",стрБЕ.BE.КодSAP);
					Структура.Вставить("ControlAccount",КонтрольныйСчетКредитор);
					Структура.Вставить("PayCondition",УсловиеПлатежаКред);
					МассивJson_БЕ.Добавить(Структура);
				КонецЦикла;
				СтруктураКредиторов.Вставить("BE",МассивJson_БЕ);
				СтруктураКредиторов.Вставить("Objects",МассивJson_КодыКредит);
				СтруктураSAP.Вставить("Creditor",СтруктураКредиторов);
				СтруктураSAP.Вставить("Country",СтранаДеб);
				СтруктураSAP.Вставить("Language",ЯзыкДеб);
				Если СтруктураSAP.Свойство("Creditor") И СтруктураSAP.Свойство("Debitor") Тогда   //если структура заполнена
					Данные.Вставить("SAP",СтруктураSAP);
				КонецЕсли;
 			ИначеЕсли Колонка.Имя="КодыSAP" Тогда 
				ТЗ_Коды=Стр.КодыSAP;
				Для каждого стрКоды ИЗ ТЗ_Коды Цикл  
					Структура=Новый Структура;
					Структура.Вставить("KodSAPDebitor",стрКоды.KodSAPDebitor);
					МассивJson_Коды.Добавить(Структура);
				КонецЦикла;
			ИначеЕсли Колонка.Имя="КодыSAPКредитор" Тогда 
				ТЗ_КодыКред=Стр.КодыSAPКредитор;
				Для каждого стрКоды ИЗ ТЗ_КодыКред Цикл  
					Структура=Новый Структура;
					Структура.Вставить("KodSAPCreditor",стрКоды.КредиторКодSAP);
					МассивJson_КодыКредит.Добавить(Структура);
				КонецЦикла;
		   ИначеЕсли Колонка.Имя="СбытовыеОрганизации" Тогда 
				ТЗ_СО=Стр.СбытовыеОрганизации;
				МассивJson_СО=Новый Массив;
				Для каждого стрСО ИЗ ТЗ_СО Цикл  
					Структура=Новый Структура;
					Структура.Вставить("SALEORG",стрСО.SALEORG);
					Структура.Вставить("DISTRCHANNEL",стрСО.DISTRCHANNEL);
					Структура.Вставить("SECTOR",стрСО.SECTOR);
					Структура.Вставить("SALESDISTRICT",стрСО.SALESDISTRICT);
					Структура.Вставить("SHIPPINGCONDITIONS",стрСО.SHIPPINGCONDITIONS);
					Структура.Вставить("DISTRCHANNEL",стрСО.DISTRCHANNEL);
					Структура.Вставить("TAXCLASSIFICATION",стрСО.TAXCLASSIFICATION);
					МассивJson_СО.Добавить(Структура);
				КонецЦикла;
				Данные.Вставить("SALE_AREAS",МассивJson_СО);
			Иначе 
				//шапка файла
				Данные.Вставить("CurrentVersion",ТекущаяДата());
				Данные.Вставить("IsDeliveryAddress",false);
				
				Если ФлагПункты Тогда
					Если НЕ МассивКотровИзПунктаРазгрузки.Найти(Стр.Ref)=Неопределено Тогда
						Данные.IsDeliveryAddress=true;
					КонецЕсли;
				КонецЕсли;
				
				Если Колонка.Имя="Ref" Тогда                   
					Данные.Вставить("Guid",Стр[Колонка.Имя].УникальныйИдентификатор());
				ИначеЕсли Колонка.Имя="ControlAccountDeb" Тогда 
					КонтрольныйСчетДебитор=Стр[Колонка.Имя];
				ИначеЕсли Колонка.Имя="ControlAccountCred" Тогда 
					КонтрольныйСчетКредитор=Стр[Колонка.Имя];
				ИначеЕсли Колонка.Имя="SAPAccountGroupDeb" Тогда 
					ГруппаСчетовДеб=Стр[Колонка.Имя];
	            ИначеЕсли Колонка.Имя="SAPAccountGroupCred" Тогда 
					ГруппаСчетовКред=Стр[Колонка.Имя];
                ИначеЕсли Колонка.Имя="LanguageDeb" Тогда 
					ЯзыкДеб=Стр[Колонка.Имя];
				ИначеЕсли Колонка.Имя="ChannelSale" Тогда 
					КаналСбыта=Стр[Колонка.Имя];
				ИначеЕсли Колонка.Имя="SectorDeb" Тогда 
					Сектор=Стр[Колонка.Имя];
				ИначеЕсли Колонка.Имя="LocationDeb" Тогда 
					Местоположение=Стр[Колонка.Имя];
				ИначеЕсли Колонка.Имя="ConditionPaymentDeb" Тогда 
					УсловиеПлатежаДеб=Стр[Колонка.Имя];
				ИначеЕсли Колонка.Имя="ControlAccountCred" Тогда 
					УсловиеПлатежаКред=Стр[Колонка.Имя];
				ИначеЕсли Колонка.Имя="CountryDeb" Тогда 
					СтранаДеб=Стр[Колонка.Имя];
			    ИначеЕсли Колонка.Имя="CurrenceDeb" Тогда 
					ВалютаДеб=Стр[Колонка.Имя];
				ИначеЕсли Колонка.Имя="CurrencyCred" Тогда 
					ВалютаКред=Стр[Колонка.Имя];
				Иначе
					Данные.Вставить(Колонка.Имя, Стр[Колонка.Имя]);
				КонецЕсли;

			КонецЕсли;
		КонецЦикла;    
		
		//банковские счета
		СтрокиСчетов=БанковскиеСчета.НайтиСтроки(Новый Структура("Owner",Стр.Ref));
		Колонки=БанковскиеСчета.Колонки;  
		МассивСчетов=Новый Массив;
		Для каждого Счет Из СтрокиСчетов Цикл //строка с данными ед.изм.
			СтруктураСчетов=Новый Структура;
			Для каждого Колонка Из Колонки Цикл 
				Если Колонка.Имя="ДополнительнаяКлассификация" Тогда					
					ТЗ_ДК=Стр.ДополнительнаяКлассификация;
					МассивJson_ДопКлассификация=Новый Массив;
					Для каждого стрДК ИЗ ТЗ_ДК Цикл  
						Структура=Новый Структура;
						Структура.Вставить("StringNumber",стрДК.StringNumber);
						Структура.Вставить("ClassifersKind",стрДК.ClassifersKind);
						МассивJson_ДопКлассификация.Добавить(Структура);
					КонецЦикла;
					СтруктураСчетов.Вставить("AdditionalClassifier",МассивJson_ДопКлассификация);
				Иначе
					СтруктураСчетов.Вставить(Колонка.Имя,Счет[Колонка.Имя]);
				КонецЕсли;
			КонецЦикла; 
			МассивСчетов.Добавить(СтруктураСчетов);
		КонецЦикла;
		Данные.Вставить("BankAccounts",МассивСчетов);
		
		//пункты разгрузки  
		МассивПунктов=Новый Массив;
		Если ФлагПункты Тогда
			СтрокиПунктов=ТаблицаПунктовРазгрузки.НайтиСтроки(Новый Структура("Owner",Стр.Ref));
			Колонки=ТаблицаПунктовРазгрузки.Колонки;  
			Для каждого Пункт Из СтрокиПунктов Цикл 
				СтруктураПунктов=Новый Структура;
				Для каждого Колонка Из Колонки Цикл 
					Если Колонка.Имя="Ссылка" Тогда                   
						СтруктураПунктов.Вставить("Guid",Пункт[Колонка.Имя].УникальныйИдентификатор());
					Иначе
						СтруктураПунктов.Вставить(Колонка.Имя,Пункт[Колонка.Имя]);
					КонецЕсли;
				КонецЦикла; 
				МассивПунктов.Добавить(СтруктураПунктов);
			КонецЦикла;
		КонецЕсли;
		Данные.Вставить("PointUnloading",МассивПунктов);
		
		мМассивКонтрагентов.Добавить(Данные);
	КонецЦикла;
	
	СтруктураКонтрагентов.Вставить("Partners",мМассивКонтрагентов);

	Возврат СтруктураКонтрагентов;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьКонтрагентовОбщийМетод(фПунктыРазгрузки=Неопределено)
	
	Запись = Новый ЗаписьJSON;
	Год=Формат(ТекущаяДата(),"ДФ=yyyy");
	Месяц=Формат(ТекущаяДата(),"ДФ=MM");;
	День=Формат(ТекущаяДата(),"ДФ=dd");
	
	Час=ДобавитьНульСлеваКолиНадобно(Строка(Час(ТекущаяДата())));
	Минута=ДобавитьНульСлеваКолиНадобно(Строка(Минута(ТекущаяДата())));
	Секунда=ДобавитьНульСлеваКолиНадобно(Строка(Секунда(ТекущаяДата())));

	ПутьКФайлу="\\saprouter.rs-online.ru\test\MDM\QAS\counteragents\Partners_"+Год+Месяц+День+Час+Минута+Секунда+".json";
	ПараметрыЗаписи=Новый ПараметрыЗаписиJSON(,Символы.Таб);
	Запись.ОткрытьФайл(ПутьКФайлу,,,ПараметрыЗаписи);

	Данные=ВыгрузитьНаСервереКонтрагентов(фПунктыРазгрузки);
	Если Данные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиСериализацииJSON=Новый НастройкиСериализацииJSON;
	НастройкиСериализацииJSON.ВариантЗаписиДаты=ВариантЗаписиДатыJSON.ЛокальнаяДата;
	НастройкиСериализацииJSON.ФорматСериализацииДаты=ФорматДатыJSON.ISO; //тут уточник у САПовцев
	
	ЗаписатьJSON(Запись, Данные, НастройкиСериализацииJSON, "ФункцияПреобразованияЗаписи", ЭтотОбъект);
	Запись.Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПункт(Команда)
	
	МассивПР=Новый Массив;
	Для каждого Стр Из Объект.ПунктыРазгрузки Цикл
		Если ЗначениеЗаполнено(Стр.Пункт) Тогда
			МассивПР.Добавить(Стр.Пункт);
		КонецЕсли;
	КонецЦикла;
	
	ВыгрузитьКонтрагентовОбщийМетод(МассивПР);
	
КонецПроцедуры

