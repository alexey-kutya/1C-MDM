
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Для Каждого Справочник Из Метаданные.Справочники Цикл 
		Элементы.ИмяСправочника.СписокВыбора.Добавить(Справочник.Имя, Справочник.Синоним);
	КонецЦикла;	       
	Для Каждого Справочник Из ПолучитьСправочникиУниверсальногоХранилища() Цикл
		Элементы.ИмяСправочника.СписокВыбора.Добавить(Справочник);
	КонецЦикла;
	
	Элементы.СтрокаПодключенияOLEDB.СписокВыбора.Добавить(
		"Provider=Microsoft.ACE.OLEDB.12.0; 
		|Data Source = file; 
		|Extended Properties = ""Excel 8.0; HDR=NO; IMEX=1"";");
	Элементы.СтрокаПодключенияOLEDB.СписокВыбора.Добавить(
		"Provider=Microsoft.JET.OLEDB.4.0; 
		|Data Source = file; 
		|Extended Properties = ""Excel 8.0; HDR=NO; IMEX=1"";");
	
	Объект.СтрокаПодключенияOLEDB = 
		"Provider=Microsoft.JET.OLEDB.4.0; 
		|Data Source = file; 
		|Extended Properties = ""Excel 8.0; HDR=NO; IMEX=1"";";
	Объект.ЗапросOLEDB = 
		"SELECT 
		|	* 
		|FROM 
		|	[&ИмяТаблицы]";
		
	Объект.ПереченьФайлов.Добавить();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ТекущееДействие = Элементы.Страницы.ТекущаяСтраница.Заголовок;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Объект.ИмяСправочника = Настройки.Получить("Объект.ИмяСправочника");
	Если ЗначениеЗаполнено(Объект.ИмяСправочника) Тогда 	
		ЗаполнитьАтрибутныйСостав();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИмяСправочникаПриИзменении(Элемент)
	
	Если ТипЗнч(Объект.ИмяСправочника) = Тип("Строка") Тогда
		ЗаполнитьАтрибутныйСостав();
	Иначе 
		ЗаполнитьАтрибутныйСоставУниверсальногоХранилища();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереченьФайловИмяЛистаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереченьФайловИмяФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	Диалог.Заголовок = НСтр("ru = 'Выберите файл'");
	Диалог.ПолноеИмяФайла = Элементы.ПереченьФайлов.ТекущиеДанные.ИмяФайла;
	Диалог.МножественныйВыбор          = Ложь;
	Диалог.ПредварительныйПросмотр     = Ложь;
	//Диалог.ПроверятьСуществованиеФайла = ПроверятьСуществованиеФайла;
	Диалог.Фильтр                      = 
		"Документ MS Excel(*.xls)|*.xls|"+
		"Документ MS Excel(*.xlsx)|*.xlsx|"+
		"Текстовый документ(*.txt)|*.txt|"+
		"Табличный документ(*.xml)|*.xml|"+
		"Data base file(*.dbf)|*.dbf";
	
	Если Диалог.Выбрать() Тогда
		
		Элементы.ПереченьФайлов.ТекущиеДанные.ИмяФайла = Диалог.ПолноеИмяФайла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереченьФайловИмяЛистаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//ТекущаяСтрока = Объект.ПереченьФайлов[Элемент.Родитель.ТекущаяСтрока];
	//
	//Элемент.СписокВыбора.ЗагрузитьЗначения(
	//	ЗаполнитьИменаЛистов(ТекущаяСтрока.ИмяФайла));
	
	Если Элементы.ПереченьФайлов.ТекущиеДанные <> Неопределено Тогда
		Элемент.СписокВыбора.ЗагрузитьЗначения(ЗаполнитьИменаЛистов(Элементы.ПереченьФайлов.ТекущиеДанные.ИмяФайла));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормироватьПакетнуюОбработкуПриИзменении(Элемент)
	
	Если Объект.ФормироватьПакетнуюОбработку Тогда 
		Объект.ЗаписыватьДанныеПослеРазбора = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписыватьДанныеПослеРазбораПриИзменении(Элемент)
	
	Если Объект.ФормироватьПакетнуюОбработку Тогда 
		Объект.ЗаписыватьДанныеПослеРазбора = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)

	ИндексСтраницы = Элементы.Страницы.ПодчиненныеЭлементы.Индекс(Элементы.Страницы.ТекущаяСтраница);
	Если ИндексСтраницы = 0 Тогда 
		Возврат;
	КонецЕсли;	
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.Получить(ИндексСтраницы - 1);
	
	ТекущееДействие = Элементы.Страницы.ТекущаяСтраница.Заголовок;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДалее(Команда)

	ИндексСтраницы = Элементы.Страницы.ПодчиненныеЭлементы.Индекс(Элементы.Страницы.ТекущаяСтраница);
	Если ИндексСтраницы = Элементы.Страницы.ПодчиненныеЭлементы.Количество()-1 Тогда 
		Возврат;
	КонецЕсли;	
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.Получить(ИндексСтраницы + 1);
	
	ТекущееДействие = Элементы.Страницы.ТекущаяСтраница.Заголовок;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕТАСКИВАНИЕ 

&НаКлиенте
Процедура ЗначениеДанныхПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Для Каждого СтрокаТЧ Из ПараметрыПеретаскивания.Значение Цикл 
		Если Не ЗначениеДанных.НайтиСтроки(
			Новый Структура("ИмяРеквизита", СтрокаТЧ.ИмяРеквизита) ).Количество() = 0 Тогда 
			Продолжить;
		КонецЕсли;	
		
		СтрокаЗначения = ЗначениеДанных.Добавить();
		СтрокаЗначения.ИмяРеквизита 		= СтрокаТЧ.ИмяРеквизита;
		СтрокаЗначения.ЗаполнятьЗначением 	= СтрокаТЧ.ЗаполнятьЗначением;
		Если Не Найти(СтрокаТЧ.ИмяРеквизита, ".") = 0 Тогда 
			СтрокаЗначения.ИмяРодителя 		= Лев(СтрокаТЧ.ИмяРеквизита, Найти(СтрокаТЧ.ИмяРеквизита, ".")-1 );
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеДанныхПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоляПоискаДанныхПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоляПоискаДанныхПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Для Каждого СтрокаТЧ Из ПараметрыПеретаскивания.Значение Цикл 
		Если Не ПоляПоискаДанных.НайтиСтроки(
			Новый Структура("ИмяРеквизита", СтрокаТЧ.ИмяРеквизита) ).Количество() = 0 Тогда 
			Продолжить;
		КонецЕсли;	
		
		СтрокаЗначения = ПоляПоискаДанных.Добавить();
		СтрокаЗначения.ИмяРеквизита 		= СтрокаТЧ.ИмяРеквизита;
		Если Не Найти(СтрокаТЧ.ИмяРеквизита, ".") = 0 Тогда 
			СтрокаЗначения.ИмяРодителя 		= Лев(СтрокаТЧ.ИмяРеквизита, Найти(СтрокаТЧ.ИмяРеквизита, ".")-1 );
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученныеДанныеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученныеДанныеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Для Каждого СтрокаТЧ Из ПараметрыПеретаскивания.Значение Цикл 
		
		Если Не (ТипЗнч(СтрокаТЧ.ЗаполнятьЗначением) = Тип("Булево") 
			Или ТипЗнч(СтрокаТЧ.ЗаполнятьЗначением) = Тип("Число") 
			Или ТипЗнч(СтрокаТЧ.ЗаполнятьЗначением) = Тип("Дата") 
			Или ТипЗнч(СтрокаТЧ.ЗаполнятьЗначением) = Тип("Строка") 
			Или ЭтоПеречисление(СтрокаТЧ.ЗаполнятьЗначением) ) Тогда 
			Продолжить;
		КонецЕсли;	    				
		
		Если Не ПолученныеДанные.НайтиСтроки(
			Новый Структура("ИмяРеквизита", СтрокаТЧ.ИмяРеквизита) ).Количество() = 0 Тогда 
			Продолжить;
		КонецЕсли;	
		
		СтрокаЗначения = ПолученныеДанные.Добавить();
		СтрокаЗначения.ИмяРеквизита 		= СтрокаТЧ.ИмяРеквизита;
		Если Не Найти(СтрокаТЧ.ИмяРеквизита, ".") = 0 Тогда 
			СтрокаЗначения.ИмяРодителя 		= Лев(СтрокаТЧ.ИмяРеквизита, Найти(СтрокаТЧ.ИмяРеквизита, ".")-1 );
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура Загрузить(Команда)
	
	Для Каждого СтрокаПеречняФайлов Из Объект.ПереченьФайлов Цикл 
		
		Состояние("Загружается " + СтрокаПеречняФайлов.ИмяФайла,
			СтрокаПеречняФайлов.НомерСтроки * 100 / Объект.ПереченьФайлов.Количество() );	
	
		ЗагрузитьНаСервере(СтрокаПеречняФайлов.ИмяФайла, СтрокаПеречняФайлов.ИмяЛиста);
	
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключение(Команда)
	
	ПроверитьПодключениеСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКаталог(Команда)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	Диалог.Заголовок = НСтр("ru = 'Выберите файл'");
	Диалог.МножественныйВыбор          = Истина;
	Диалог.ПредварительныйПросмотр     = Ложь;
	//Диалог.ПроверятьСуществованиеФайла = ПроверятьСуществованиеФайла;
	Диалог.Фильтр                      = 
		"Документ MS Excel(*.xls)|*.xls|"+
		"Документ MS Excel(*.xlsx)|*.xlsx|"+
		"Текстовый документ(*.txt)|*.txt|"+
		"Табличный документ(*.xml)|*.xml|"+
		"Data base file(*.dbf)|*.dbf";

	Если Диалог.Выбрать() Тогда
		
		МассивФайлов = Диалог.ВыбранныеФайлы;
		Для Каждого ИмяФайла Из МассивФайлов Цикл
			
			стрчч = Объект.ПереченьФайлов.Добавить();
			стрчч.ИмяФайла = ИмяФайла;
			стрчч.ИмяЛиста = ПолучитьИмяЛиста(ИмяФайла, 1);
			
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура - вызывает метод объекта ЗагрузитьДанные.
//
Процедура ЗагрузитьНаСервере(ИмяФайла, ИмяЛиста)
	
	// Поля поиска должны быть определены для родителей ЗначениеДанных и ПолученныеДанные.
	РеквизитФормыВЗначение("Объект").ЗагрузитьДанные(ИмяФайла, ИмяЛиста,
		ДанныеФормыВЗначение(ФормаРаботыСТаблицей, 	Тип("ТаблицаЗначений")), 
		ДанныеФормыВЗначение(ПоляПоискаДанных, 		Тип("ТаблицаЗначений")), 
		ДанныеФормыВЗначение(ЗначениеДанных, 		Тип("ТаблицаЗначений")), 
		ДанныеФормыВЗначение(ПолученныеДанные, 		Тип("ТаблицаЗначений")),
		ДанныеФормыВЗначение(ПолученныеПроизвольныеДанные, Тип("ТаблицаЗначений")) ); 	
	
КонецПроцедуры	

// Процедура - вызывает метод объекта ОткрытьConnection.
//
Процедура ПроверитьПодключениеСервер()
	
	Если Объект.ПереченьФайлов.Количество() = 0 Тогда 
		Ответ = РеквизитФормыВЗначение("Объект").ОткрытьConnection("")
	Иначе 	
		Ответ = РеквизитФормыВЗначение("Объект").ОткрытьConnection(Объект.ПереченьФайлов[0].ИмяФайла)
	КонецЕсли;
	Если Не Ответ = Неопределено Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Подключение успешно установлено");
	КонецЕсли;	
	
КонецПроцедуры

// Процедура - заполняет АтрибутныйСоставОбъекта и ФормаРаботыСТаблицей по метаданным.
//
Процедура ЗаполнитьАтрибутныйСостав()
	
	ЗначениеДанных.Очистить();
	ПолученныеДанные.Очистить();
	ПоляПоискаДанных.Очистить();
	ФормаРаботыСТаблицей.Очистить();
	
	мАтрибутныйСоставОбъекта = ДанныеФормыВЗначение(АтрибутныйСоставОбъекта, 	Тип("ДеревоЗначений"));
	мФормаРаботыСТаблицей	 = ДанныеФормыВЗначение(ФормаРаботыСТаблицей, 		Тип("ТаблицаЗначений"));
	
	мАтрибутныйСоставОбъекта.Строки.Очистить();
	
	СтрокаФормыРаботы = мФормаРаботыСТаблицей.Добавить();
	СтрокаФормыРаботы.ИмяРеквизита 			= Объект.ИмяСправочника;
	СтрокаФормыРаботы.ФормаРаботы			= "Изменение или создание";
	СтрокаФормыРаботы.ЗаполнятьЗначением 	= Справочники[Объект.ИмяСправочника].ПустаяСсылка();
	
	ЗаполнитьАтрибутныйСоставСтрокДерева(Метаданные.Справочники[Объект.ИмяСправочника], 
		мАтрибутныйСоставОбъекта, "");	
	
	Для Каждого СтрокаАтрибута Из мАтрибутныйСоставОбъекта.Строки Цикл
		
		Если СтрокаАтрибута.ТипРеквизита = "Стандартный" Тогда  			
			Если СтрокаАтрибута.ИмяРеквизита = "Родитель" Тогда 
				
				СтрокаФормыРаботы = мФормаРаботыСТаблицей.Добавить();
				СтрокаФормыРаботы.ИмяРеквизита 			= СтрокаАтрибута.ИмяРеквизита;    	
				СтрокаФормыРаботы.ФормаРаботы			= "Поиск";
				СтрокаФормыРаботы.ЗаполнятьЗначением 	= Справочники[Объект.ИмяСправочника].ПустаяСсылка();
				
				ЗаполнитьАтрибутныйСоставСтрокДерева(Метаданные.Справочники[Объект.ИмяСправочника], 
					СтрокаАтрибута, "Родитель.", Истина);	
				
			КонецЕсли;	  			
		ИначеЕсли СтрокаАтрибута.ТипРеквизита = "Основной" Тогда   			
			Если Справочники.ТипВсеСсылки().СодержитТип(
				ТипЗнч(Справочники[Объект.ИмяСправочника].ПустаяСсылка()[СтрокаАтрибута.ИмяРеквизита])) Тогда 
				
				СтрокаФормыРаботы = мФормаРаботыСТаблицей.Добавить();
				СтрокаФормыРаботы.ИмяРеквизита 			= СтрокаАтрибута.ИмяРеквизита;    	
				СтрокаФормыРаботы.ФормаРаботы			= "Поиск";
				СтрокаФормыРаботы.ЗаполнятьЗначением 	= СтрокаАтрибута.ЗаполнятьЗначением;
				
				ЗаполнитьАтрибутныйСоставСтрокДерева(СтрокаАтрибута.ЗаполнятьЗначением.Метаданные(), 
					СтрокаАтрибута, СтрокаАтрибута.ИмяРеквизита+".");						
				
			КонецЕсли;				
		ИначеЕсли СтрокаАтрибута.ТипРеквизита = "Свойство" Тогда    			
			Если Строка(СтрокаАтрибута.ИмяРеквизита.ТипЗначения) = "Булево" 
				Или Строка(СтрокаАтрибута.ИмяРеквизита.ТипЗначения) = "Число" 
				Или Строка(СтрокаАтрибута.ИмяРеквизита.ТипЗначения) = "Дата" 
				Или Строка(СтрокаАтрибута.ИмяРеквизита.ТипЗначения) = "Строка" Тогда 
			Иначе 	
				
				СтрокаФормыРаботы = мФормаРаботыСТаблицей.Добавить();
				СтрокаФормыРаботы.ИмяРеквизита 			= СтрокаАтрибута.ИмяРеквизита;
				СтрокаФормыРаботы.ФормаРаботы			= "Поиск";
				СтрокаФормыРаботы.ЗаполнятьЗначением 	= СтрокаАтрибута.ЗаполнятьЗначением;
				
				СтрокаТЧ = СтрокаАтрибута.Строки.Добавить();
				СтрокаТЧ.ТипРеквизита = "КодСвойства";
				СтрокаТЧ.ИмяРеквизита = "Код";
				СтрокаТЧ = СтрокаАтрибута.Строки.Добавить();
				СтрокаТЧ.ТипРеквизита = "НаименованиеСвойства";
				СтрокаТЧ.ИмяРеквизита = "Наименование";
				
			КонецЕсли;	  			
		КонецЕсли;	        
		
	КонецЦикла;	  	
		
	ЗначениеВДанныеФормы(мАтрибутныйСоставОбъекта, АтрибутныйСоставОбъекта);
	ЗначениеВДанныеФормы(мФормаРаботыСТаблицей,    ФормаРаботыСТаблицей);
	
КонецПроцедуры	

// Процедура - заполняет АтрибутныйСоставОбъекта и ФормаРаботыСТаблицей по метаданным универсального хранилища.
//
Процедура ЗаполнитьАтрибутныйСоставУниверсальногоХранилища()
	
	ЗначениеДанных.Очистить();
	ПолученныеДанные.Очистить();
	ПоляПоискаДанных.Очистить();
	ФормаРаботыСТаблицей.Очистить();
	
	мАтрибутныйСоставОбъекта = ДанныеФормыВЗначение(АтрибутныйСоставОбъекта, 	Тип("ДеревоЗначений"));
	мФормаРаботыСТаблицей	 = ДанныеФормыВЗначение(ФормаРаботыСТаблицей, 		Тип("ТаблицаЗначений"));
	
	мАтрибутныйСоставОбъекта.Строки.Очистить();
	
	Если Объект.ИмяСправочника.ВидСправочника = Перечисления.нсиВидыСправочников.Классификатор Тогда
		текущийСправочник = Справочники.нсиУниверсальныйКлассификатор;
		текущиеМетаданные = Метаданные.Справочники.нсиУниверсальныйКлассификатор;
	ИначеЕсли Объект.ИмяСправочника.ВидСправочника = Перечисления.нсиВидыСправочников.ФункциональныйСправочник Тогда
		текущийСправочник = Справочники.нсиУниверсальныйФункциональныйСправочник;
		текущиеМетаданные = Метаданные.Справочники.нсиУниверсальныйФункциональныйСправочник;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнено значение вида справочника универсального хранилища!");
		Возврат;
	КонецЕсли;
	
	СтрокаФормыРаботы = мФормаРаботыСТаблицей.Добавить();
	СтрокаФормыРаботы.ИмяРеквизита 			= Строка(Объект.ИмяСправочника);
	СтрокаФормыРаботы.ФормаРаботы			= "Изменение или создание";
	СтрокаФормыРаботы.ЗаполнятьЗначением 	= текущийСправочник.ПустаяСсылка();
	
	ЗаполнитьАтрибутныйСоставСтрокДереваУниверсальногоХранилища(текущиеМетаданные,
																	мАтрибутныйСоставОбъекта, 
																	"",
																	,
																	Объект.ИмяСправочника);	
	
	Для Каждого СтрокаАтрибута Из мАтрибутныйСоставОбъекта.Строки Цикл
		
		Если СтрокаАтрибута.ТипРеквизита = "Стандартный" Тогда  			
			Если СтрокаАтрибута.ИмяРеквизита = "Родитель" Тогда 
				
				СтрокаФормыРаботы = мФормаРаботыСТаблицей.Добавить();
				СтрокаФормыРаботы.ИмяРеквизита 			= СтрокаАтрибута.ИмяРеквизита;    	
				СтрокаФормыРаботы.ФормаРаботы			= "Поиск";
				СтрокаФормыРаботы.ЗаполнятьЗначением 	= текущийСправочник.ПустаяСсылка();
				
				ЗаполнитьАтрибутныйСоставСтрокДереваУниверсальногоХранилища(текущиеМетаданные, СтрокаАтрибута, "Родитель.", Истина);	
				
			КонецЕсли;	  			
			
		ИначеЕсли СтрокаАтрибута.ТипРеквизита = "Основной" Тогда   			
			Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(текущийСправочник.ПустаяСсылка()[СтрокаАтрибута.ИмяРеквизита])) Тогда 
	
				СтрокаФормыРаботы = мФормаРаботыСТаблицей.Добавить();
				СтрокаФормыРаботы.ИмяРеквизита 			= СтрокаАтрибута.ИмяРеквизита;    	
				СтрокаФормыРаботы.ФормаРаботы			= "Поиск";
				СтрокаФормыРаботы.ЗаполнятьЗначением 	= СтрокаАтрибута.ЗаполнятьЗначением;
				
				ЗаполнитьАтрибутныйСоставСтрокДерева(СтрокаАтрибута.ЗаполнятьЗначением.Метаданные(), 
					СтрокаАтрибута, СтрокаАтрибута.ИмяРеквизита+".");						

			КонецЕсли;				
			
		ИначеЕсли СтрокаАтрибута.ТипРеквизита = "Частный" Тогда   			
			Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(СтрокаАтрибута.ЗаполнятьЗначением)) Тогда 
	
				СтрокаФормыРаботы = мФормаРаботыСТаблицей.Добавить();
				СтрокаФормыРаботы.ИмяРеквизита 			= СтрокаАтрибута.ИмяРеквизита;    	
				СтрокаФормыРаботы.ФормаРаботы			= "Поиск";
				СтрокаФормыРаботы.ЗаполнятьЗначением 	= СтрокаАтрибута.ЗаполнятьЗначением;
				
				ЗаполнитьАтрибутныйСоставСтрокДерева(СтрокаАтрибута.ЗаполнятьЗначением.Метаданные(), 
					СтрокаАтрибута, СтрокаАтрибута.ИмяРеквизита+".");						

			КонецЕсли;				
			
		//ИначеЕсли СтрокаАтрибута.ТипРеквизита = "Свойство" Тогда    			
		//	Если Строка(СтрокаАтрибута.ИмяРеквизита.ТипЗначения) = "Булево" 
		//		Или Строка(СтрокаАтрибута.ИмяРеквизита.ТипЗначения) = "Число" 
		//		Или Строка(СтрокаАтрибута.ИмяРеквизита.ТипЗначения) = "Дата" 
		//		Или Строка(СтрокаАтрибута.ИмяРеквизита.ТипЗначения) = "Строка" Тогда 
		//	Иначе 	
		//		
		//		СтрокаФормыРаботы = мФормаРаботыСТаблицей.Добавить();
		//		СтрокаФормыРаботы.ИмяРеквизита 			= СтрокаАтрибута.ИмяРеквизита;
		//		СтрокаФормыРаботы.ФормаРаботы			= "Поиск";
		//		СтрокаФормыРаботы.ЗаполнятьЗначением 	= СтрокаАтрибута.ЗаполнятьЗначением;
		//		
		//		СтрокаТЧ = СтрокаАтрибута.Строки.Добавить();
		//		СтрокаТЧ.ТипРеквизита = "КодСвойства";
		//		СтрокаТЧ.ИмяРеквизита = "Код";
		//		СтрокаТЧ = СтрокаАтрибута.Строки.Добавить();
		//		СтрокаТЧ.ТипРеквизита = "НаименованиеСвойства";
		//		СтрокаТЧ.ИмяРеквизита = "Наименование";
		//		
		//	КонецЕсли;	  			
			
		КонецЕсли;	        
		
	КонецЦикла;	  	
		
	ЗначениеВДанныеФормы(мАтрибутныйСоставОбъекта, АтрибутныйСоставОбъекта);
	ЗначениеВДанныеФормы(мФормаРаботыСТаблицей,    ФормаРаботыСТаблицей);
	
КонецПроцедуры	

// Процедура - заполняет строк дерева АтрибутныйСоставОбъекта по метаданным.
//
Процедура ЗаполнитьАтрибутныйСоставСтрокДерева(МетаданныеЭлемента, 
	СтрокиАтрибутныйСоставОбъекта, ДополнениеИмени, ДляГруппы = Ложь)
	
	Для Каждого Реквизит Из МетаданныеЭлемента.СтандартныеРеквизиты Цикл
		Если Не (Реквизит.Имя = "Предопределенный" Или Реквизит.Имя = "Ссылка") Тогда 
			СтрокаТЧ = СтрокиАтрибутныйСоставОбъекта.Строки.Добавить();
			СтрокаТЧ.ТипРеквизита = "Стандартный";
			СтрокаТЧ.ИмяРеквизита = ДополнениеИмени + Реквизит.Имя;
			СтрокаТЧ.ЗаполнятьЗначением = Реквизит.Тип.ПривестиЗначение();
		КонецЕсли;
	КонецЦикла;	
	
	Для Каждого Реквизит Из МетаданныеЭлемента.Реквизиты Цикл
		Если ДляГруппы И Строка(Реквизит.Использование) = "ДляЭлемента" Тогда 
			Продолжить;
		КонецЕсли;	
		СтрокаТЧ = СтрокиАтрибутныйСоставОбъекта.Строки.Добавить();
		СтрокаТЧ.ТипРеквизита = "Основной";
		СтрокаТЧ.ИмяРеквизита = ДополнениеИмени + Реквизит.Имя;
		СтрокаТЧ.ЗаполнятьЗначением = Реквизит.Тип.ПривестиЗначение();
	КонецЦикла;	
	
	Попытка
		Набор = Справочники.НаборыДополнительныхРеквизитовИСведений["Справочник_"+МетаданныеЭлемента.Имя];
		Для Каждого Реквизит Из Набор.ДополнительныеРеквизиты Цикл 
			СтрокаТЧ = СтрокиАтрибутныйСоставОбъекта.Строки.Добавить();
			СтрокаТЧ.ТипРеквизита = "Свойство";
			СтрокаТЧ.ИмяРеквизита = Реквизит.Свойство;
			СтрокаТЧ.ЗаполнятьЗначением = Реквизит.Свойство.ТипЗначения.ПривестиЗначение();
		КонецЦикла;	
	Исключение
	КонецПопытки;
	
КонецПроцедуры	

// Процедура - заполняет строк дерева АтрибутныйСоставОбъекта по метаданным универсального хранилища.
//
Процедура ЗаполнитьАтрибутныйСоставСтрокДереваУниверсальногоХранилища(мета, СтрокиАтрибутныйСоставОбъекта, ДополнениеИмени, ДляГруппы = Ложь, Ссылка = Неопределено)
	
	//мета = Метаданные.Справочники.нсиУниверсальныйКлассификатор;
	
	Для Каждого Реквизит Из мета.СтандартныеРеквизиты Цикл
		Если Не (Реквизит.Имя = "Предопределенный" Или Реквизит.Имя = "Ссылка") Тогда 
			СтрокаТЧ = СтрокиАтрибутныйСоставОбъекта.Строки.Добавить();
			СтрокаТЧ.ТипРеквизита = "Стандартный";
			СтрокаТЧ.ИмяРеквизита = ДополнениеИмени + Реквизит.Имя;
			СтрокаТЧ.ЗаполнятьЗначением = Реквизит.Тип.ПривестиЗначение();
		КонецЕсли;
	КонецЦикла;	
	
	Для Каждого Реквизит Из мета.Реквизиты Цикл
		Если ДляГруппы И Строка(Реквизит.Использование) = "ДляЭлемента" Тогда 
			Продолжить;
		КонецЕсли;	
		СтрокаТЧ = СтрокиАтрибутныйСоставОбъекта.Строки.Добавить();
		СтрокаТЧ.ТипРеквизита = "Основной";
		СтрокаТЧ.ИмяРеквизита = ДополнениеИмени + Реквизит.Имя;
		СтрокаТЧ.ЗаполнятьЗначением = Реквизит.Тип.ПривестиЗначение();
	КонецЦикла;	
	
	Если Ссылка <> Неопределено Тогда
		Для Каждого Реквизит Из Ссылка.Реквизиты Цикл
			СтрокаТЧ = СтрокиАтрибутныйСоставОбъекта.Строки.Добавить();
			СтрокаТЧ.ТипРеквизита = "Частный";
			СтрокаТЧ.ИмяРеквизита = ДополнениеИмени + Реквизит.Наименование;
			Если 		СтрНайти(Реквизит.Тип1,"Строка") 	Тогда текущийТип = Новый ОписаниеТипов("Строка");
			ИначеЕсли 	СтрНайти(Реквизит.Тип1,"Число") 	Тогда текущийТип = Новый ОписаниеТипов("Число");
			ИначеЕсли 	СтрНайти(Реквизит.Тип1,"Булево") 	Тогда текущийТип = Новый ОписаниеТипов("Булево");	
			ИначеЕсли 	СтрНайти(Реквизит.Тип1,"Дата") 		Тогда текущийТип = Новый ОписаниеТипов("Дата");		
			ИначеЕсли 	СтрНайти(Реквизит.Тип1,"Справочник")Тогда текущийТип = Новый ОписаниеТипов("СправочникСсылка." + Реквизит.Тип2);		
			КонецЕсли;
			
			СтрокаТЧ.ЗаполнятьЗначением = текущийТип.ПривестиЗначение();
			
		КонецЦикла;	
	КонецЕсли;
	
	//Попытка
	//	Набор = Справочники.НаборыДополнительныхРеквизитовИСведений["Справочник_нсиУниверсальныйКлассификатор"];
	//	Для Каждого Реквизит Из Набор.ДополнительныеРеквизиты Цикл 
	//		СтрокаТЧ = СтрокиАтрибутныйСоставОбъекта.Строки.Добавить();
	//		СтрокаТЧ.ТипРеквизита = "Свойство";
	//		СтрокаТЧ.ИмяРеквизита = Реквизит.Свойство;
	//		СтрокаТЧ.ЗаполнятьЗначением = Реквизит.Свойство.ТипЗначения.ПривестиЗначение();
	//	КонецЦикла;	
	//Исключение
	//КонецПопытки;
	//
	//Попытка
	//	Набор = Справочники.НаборыДополнительныхРеквизитовИСведений["Справочник_нсиУниверсальныйФункциональныйСправочник"];
	//	Для Каждого Реквизит Из Набор.ДополнительныеРеквизиты Цикл 
	//		СтрокаТЧ = СтрокиАтрибутныйСоставОбъекта.Строки.Добавить();
	//		СтрокаТЧ.ТипРеквизита = "Свойство";
	//		СтрокаТЧ.ИмяРеквизита = Реквизит.Свойство;
	//		СтрокаТЧ.ЗаполнятьЗначением = Реквизит.Свойство.ТипЗначения.ПривестиЗначение();
	//	КонецЦикла;	
	//Исключение
	//КонецПопытки;
		
КонецПроцедуры	

// Функция - получает список листов файла.
//
Функция ЗаполнитьИменаЛистов(ИмяФайла)
	
	Список = Новый СписокЗначений;
	         
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	Connection = ТекОбъект.ОткрытьConnection(ИмяФайла);
	Если Не Connection = Неопределено Тогда 
		Список = ТекОбъект.ПолучитьСписокЛистов(Connection);	
		Connection.Close();
	КонецЕсли; 	
	
	Возврат Список.ВыгрузитьЗначения();
	
КонецФункции	

// Функция - получает имя листа файла по номеру.
//
Функция ПолучитьИмяЛиста(ИмяФайла, НомерЛиста)
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	Connection = ТекОбъект.ОткрытьConnection(ИмяФайла);
	Если Не Connection = Неопределено Тогда 
		ИмяЛиста = ТекОбъект.ПолучитьИмяЛиста(Connection, НомерЛиста);
		Connection.Close();
	КонецЕсли; 	
	
	Возврат ИмяЛиста;
	
КонецФункции	

// Функция - проверяет ссылку на принадлежность к типам перечислений.
//
Функция ЭтоПеречисление(мПеречисление)
	
	Возврат Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(мПеречисление));
	
КонецФункции	

// Функция - возвращает массив видов справочников универсального хранилища
Функция ПолучитьСправочникиУниверсальногоХранилища()
	
	Массив = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	нсиВидыСправочников.Ссылка,
	               |	нсиВидыСправочников.Наименование КАК Наименование
	               |ИЗ
	               |	Справочник.нсиВидыСправочников КАК нсиВидыСправочников
	               |ГДЕ
	               |	нсиВидыСправочников.ВидСправочника <> &ТабличнаяЧасть
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Наименование";
	Запрос.УстановитьПараметр("ТабличнаяЧасть", Перечисления.нсиВидыСправочников.ТабличнаяЧасть);
	рез = Запрос.Выполнить();
	Если Не рез.Пустой() Тогда
		выборка = рез.Выбрать();
		Пока выборка.Следующий() Цикл
			Массив.Добавить(выборка.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Массив;
	
КонецФункции
	     
#КонецОбласти

                                                  
