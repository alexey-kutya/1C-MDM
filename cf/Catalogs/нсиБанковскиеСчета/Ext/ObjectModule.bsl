#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.нсиБанковскиеСчета") Тогда
		
		// заполнение реквизитов
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения, , "Владелец,Родитель,Код,ЭтоМакет");
		
		Если ЭтоГруппа Тогда 
			Возврат;
		КонецЕсли;	
		
		// заполнение табличных частей
		ДополнительныеРеквизиты.Загрузить(ДанныеЗаполнения.ДополнительныеРеквизиты.Выгрузить());
		
		// заполнение регистров сведений
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Объект", ДанныеЗаполнения.Ссылка);
		Запрос.УстановитьПараметр("ОбъектЗагрузки", Ссылка);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ &ОбъектЗагрузки КАК Объект, Свойство, Значение
		|ИЗ РегистрСведений.ДополнительныеСведения ГДЕ Объект = &Объект"; 
		Результат = Запрос.Выполнить().Выгрузить();
		Если Не Результат.Количество() = 0 Тогда 
			НаборЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
			НаборЗаписи.Отбор.Объект.Установить(Ссылка);
			НаборЗаписи.Загрузить(Результат);
			НаборЗаписи.Записать(Истина); 			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	Если ОбменДанными.Загрузка Тогда 
		Возврат;
	КонецЕсли;
	#Если Сервер ИЛИ ВнешнееСоединение тогда
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюВидаОбъекта(ЭтотОбъект, "Справочник_нсиБанковскиеСчета");
	// Конец СтандартныеПодсистемы.Свойства
	#КонецЕсли
	нсиСравнениеДанныхСобытия.ПроверитьТипПозицииПередЗаписьюФункциональногоСправочника(ЭтотОбъект,Отказ);
	
	Если ЭтоМакет тогда
		ДополнительныеСвойства.Вставить("СШПНеобрабатывать", Истина); 
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если нсиСравнениеДанныхСобытия.ПризнакИсточникаЭтоВременный(Владелец) Тогда 
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"В качестве владельца выбран временный элемент справочника.",ЭтотОбъект, "Владелец");
	КонецЕсли;	
	
	//КутьяАА ITRR
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	нсиБанковскиеСчета.Код
		|ИЗ
		|	Справочник.нсиБанковскиеСчета КАК нсиБанковскиеСчета
		|ГДЕ
		|	нсиБанковскиеСчета.Ссылка <> &Ссылка
		|	И нсиБанковскиеСчета.Владелец = &Владелец
		|	И нсиБанковскиеСчета.НомерСчета = &НомерСчета
		|	И нсиБанковскиеСчета.Банк = &Банк";
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("НомерСчета", НомерСчета);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Банк", Банк);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Банковский счет с таким номером уже существует.",ЭтотОбъект, "НомерСчета");
	КонецЦикла;
	
	// проверяются только эталоны
	Если НЕ ПометкаУдаления И
		ТипПозиции = Перечисления.нсиТипыПозицийСправочников.ЭталоннаяПозиция
		Тогда 
		// все проверки
	ИначеЕсли ТипПозиции = Перечисления.нсиТипыПозицийСправочников.ДублирующаяПозиция Тогда 	
		Если Не ЗначениеЗаполнено(ЭталоннаяПозиция) Тогда 
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Для дублирующей позиции не указан эталон.",ЭтотОбъект, "ЭталоннаяПозиция");
		КонецЕсли;	
		ПроверяемыеРеквизиты.Очистить();
		ПроверяемыеРеквизиты.Добавить("Наименование");
		ПроверяемыеРеквизиты.Добавить("ТипПозиции");
		ПроверяемыеРеквизиты.Добавить("Владелец");
		Возврат; // проверки не работают	
	Иначе 
		ПроверяемыеРеквизиты.Очистить();
		ПроверяемыеРеквизиты.Добавить("Наименование");
		ПроверяемыеРеквизиты.Добавить("ТипПозиции");
		ПроверяемыеРеквизиты.Добавить("Владелец");
		Возврат; // проверки не работают	
	КонецЕсли;	
	
	// предупреждения
	Если ПризнакИспользования = Перечисления.нсиПризнакиИспользованияПозицийБанковскиеСчета.Открыт
		И Не ЗначениеЗаполнено(ДатаОткрытия) Тогда 
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Для открытого счета не заполнена дата открытия.",ЭтотОбъект, "ДатаОткрытия");
	КонецЕсли;	
	Если ПризнакИспользования = Перечисления.нсиПризнакиИспользованияПозицийБанковскиеСчета.Закрыт
		И Не ЗначениеЗаполнено(ДатаЗакрытия) Тогда 
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Для закрытого счета не заполнена дата закрытия.",ЭтотОбъект, "ДатаЗакрытия");
	КонецЕсли;
	
КонецПроцедуры
 
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура - устанавливает для дублей новый эталон.
// храним 2х-уровневую таблицу мэппинга.
//
Процедура ПеренестиДублиКНовомуЭталону() Экспорт
	
	Если Не ТипПозиции = Перечисления.нсиТипыПозицийСправочников.ДублирующаяПозиция Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ Ссылка ИЗ Справочник.нсиБанковскиеСчета ГДЕ ЭталоннаяПозиция = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.нсиБанковскиеСчета");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаДетальныеЗаписи.Ссылка);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();         		
		
		ИзменяемыйДубль = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ИзменяемыйДубль.ЭталоннаяПозиция = ЭталоннаяПозиция;
		ИзменяемыйДубль.Записать();
				
	КонецЦикла;  	
	
КонецПроцедуры	

#КонецОбласти
