
&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеСвойства");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства

	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
		МодульУправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, "ГруппаКонтактнаяИнформация");
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Печать") Тогда
		МодульУправлениеПечатью = ОбщегоНазначения.ОбщийМодуль("УправлениеПечатью");
		МодульУправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	
	НастройкиПолученияДанныхПоИННЗаданы = нсиПолучениеДанныхПоИНН.НастройкиПолученияДанныхПоИННЗаданы();
	
	Отбор = Лицензии.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Лицензии.Отбор.ДоступныеПоляОтбора.Элементы.Найти("Владелец").Поле;
	Отбор.ПравоеЗначение = Объект.Ссылка;
	
	Отбор = ПунктыРазгрузки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = ПунктыРазгрузки.Отбор.ДоступныеПоляОтбора.Элементы.Найти("Владелец").Поле;
	Отбор.ПравоеЗначение = Объект.Ссылка;
	
	// КутьяАА ITRR <<
	НаборЗаписей = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Объект.Ссылка);
	НаборЗаписей.Прочитать();
	
	КонтактнаяИнформацияУПП.Загрузить(НаборЗаписей.Выгрузить());
	
	Для каждого ЭлементКИ Из ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
		Если ЭлементКИ.Представление = "" Тогда
			Отбор = Новый Структура("Вид", ЭлементКИ.Вид);
			Строки = КонтактнаяИнформацияУПП.НайтиСтроки(Отбор);
			
			Если Строки.Количество() > 0 Тогда
				ДанныеСтрокиУПП = Строки[0];
				Если ЗначениеЗаполнено(ДанныеСтрокиУПП.Представление) Тогда
					ЭтотОбъект[ЭлементКИ.ИмяРеквизита] = ДанныеСтрокиУПП.Представление;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
	MDMСервер.ЗаполнитьУчастниковОбмена(ЭтаФорма);
	MDMСервер.УстановитьУсловноеОформление(ЭтаФорма);
	MDMСервер.ДоступностьУчастниковОбмена(ЭтаФорма);
	
	GUID_MDM = Объект.Ссылка.УникальныйИдентификатор();
	//>>
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
		МодульУправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// СтандартныеПодсистемы.Свойства
    УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	УстановитьТекстПроверкиДляИННКПП();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
	//	МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
	//	МодульУправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
	//КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
		МодульУправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	ОбновитьИнтерфейс = ТекущийОбъект.ЭтоНовый() И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	
	//КутьяАА ITRR
	Если НЕ Отказ И Модифицированность Тогда
		MDMСервер.ЗаписатьУчастниковОбмена(ЭтаФорма);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ОбновитьИнтерфейс Тогда
		ОбновитьИнтерфейс();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПрефиксПриИзменении(Элемент)
	//Если СтрНайти(Объект.Префикс, "-") > 0 Тогда
	//	ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Нельзя в префиксе организации использовать символ ""-"".'"));
	//	Объект.Префикс = СтрЗаменить(Объект.Префикс, "-", "");
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИННПриИзменении(Элемент)
	ПриИзмененииИНН();		
КонецПроцедуры

&НаКлиенте
Процедура КПППриИзменении(Элемент)
	
	ТекКПП = Объект.КПП;
	Пока Найти(ТекКПП, " ") > 0 цикл
		ТекКПП = СтрЗаменить(ТекКПП, " ", ""); 
	КонецЦикла;
	Объект.КПП = ТекКПП;
	
	УстановитьТекстПроверкиДляИННКПП();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьСписокНаименованийСервер()
	Элементы.ПолноеНаименование.СписокВыбора.Очистить();
	Элементы.ПолноеНаименование.СписокВыбора.Добавить(""+Объект.Наименование);
	Элементы.ПолноеНаименование.СписокВыбора.Добавить(""+Объект.ПолноеНаименование);
КонецПроцедуры

// СтандартныеПодсистемы.КонтактнаяИнформация

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
		МодульУправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
		МодульУправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
		МодульУправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент,, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
		МодульУправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
		МодульУправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат)
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
		МодульУправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
		
		//КутьяАА ITRR <<
		ЮрАдресВидКИ = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
		ФактАдресВидКИ = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
		
		МассивСтрок = Этаформа.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита, Вид",Результат.ИмяРеквизита, ЮрАдресВидКИ));
		Если МассивСтрок.Количество() Тогда
			СтрокаЮрАдреса = МассивСтрок[0];
			СтрокиФактАдреса = Этаформа.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("Вид", ФактАдресВидКИ));
			Если СтрокиФактАдреса.Количество() Тогда 
				СтрокаФактАдреса = СтрокиФактАдреса[0];
				ЗаполнитьЗначенияСвойств(СтрокаФактАдреса, СтрокаЮрАдреса,,"Вид, Тип, ИмяРеквизита");
				ЭтаФорма[СтрокаФактАдреса.ИмяРеквизита] = СтрокаФактАдреса.Представление;
			КонецЕсли;
			
			СтрокиЮрАдресаУПП = КонтактнаяИнформацияУПП.НайтиСтроки(Новый Структура("Вид", ЮрАдресВидКИ));
			Если СтрокиЮрАдресаУПП.Количество() Тогда
				
				СтрокаЮрАдресаУПП = СтрокиЮрАдресаУПП[0];
				СтрокиФактАдресаУПП = КонтактнаяИнформацияУПП.НайтиСтроки(Новый Структура("Вид", ФактАдресВидКИ));
				Если СтрокиФактАдресаУПП.Количество() Тогда
					СтрокаФактАдресаУПП = СтрокиФактАдресаУПП[0];
					Сообщить("Внимание! Фактический адрес был изменен.", СтатусСообщения.ОченьВажное);
				Иначе 	
					СтрокаФактАдресаУПП = КонтактнаяИнформацияУПП.Добавить();
					СтрокаФактАдресаУПП.Вид = ФактАдресВидКИ;
				КонецЕсли; 
				ЗаполнитьЗначенияСвойств(СтрокаФактАдресаУПП, СтрокаЮрАдресаУПП,,"Вид,ЗначениеПоУмолчанию");
			КонецЕсли; 
			
		КонецЕсли; 
		//>>
	КонецЕсли;
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтактнаяИнформация

// СтандартныеПодсистемы.Свойства 

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
    УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Печать") Тогда
		МодульУправлениеПечатьюКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеПечатьюКлиент");
		МодульУправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекстПроверкиДляИННКПП(ИННПравильный = Ложь)
	
	ЦветТекстаСиний = Новый Цвет(0, 102, 255);
 	ЦветТекстаКрасный = Новый Цвет(255, 40, 0);
    
    ЭтоЮрЛицо = нсиОбщегоНазначенияВызовСервера.ЭтоЮрЛицо(Объект.ЮрФизЛицо);
    ИННПравильный = нсиРегламентированныеДанныеКлиентСервер.ИННСоответствуетКонтрЧислу(Объект.ИНН, ЭтоЮрЛицо);
    КПППравильный = нсиРегламентированныеДанныеКлиентСервер.КППСоответствуетКонтрЧислу(Объект.КПП);

 
    Если ИННПравильный Тогда
    	Элементы.НадписьПроверкаИНН.Заголовок = "«Проверка на контрольное число: Совпадает»";
    	Элементы.НадписьПроверкаИНН.ЦветТекста = ЦветТекстаСиний;
    Иначе
    	Элементы.НадписьПроверкаИНН.Заголовок = "«Проверка на контрольное число: Не совпадает»";
    	Элементы.НадписьПроверкаИНН.ЦветТекста = ЦветТекстаКрасный;
    КонецЕсли;
    
    Если КПППравильный Тогда
    	Элементы.НадписьПроверкаКПП.Заголовок = "«Проверка КПП: пройдена»";
    	Элементы.НадписьПроверкаКПП.ЦветТекста = ЦветТекстаСиний;
    Иначе
    	Элементы.НадписьПроверкаКПП.Заголовок = "«Проверка КПП: не пройдена»";
    	Элементы.НадписьПроверкаКПП.ЦветТекста = ЦветТекстаКрасный;
    КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
    УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства&НаКлиенте

&НаКлиенте
Процедура ОбновитьДанныеЕГРН(Команда)
	ПриИзмененииИНН(Истина);
КонецПроцедуры

&НаКлиенте
Процедура нсиУстановитьКПП(Команда)
	
	Если (СтрДлина(Объект.ИНН) < 4) или Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.нсиЮрФизЛицо.ФизЛицо") Тогда
		Возврат;
	КонецЕсли;
	ПравыеСимволыИНН = Лев(Объект.ИНН, 4);
	Объект.КПП = ПравыеСимволыИНН + "01001";
	
	УстановитьТекстПроверкиДляИННКПП();

КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеРеквизитовКонтрагентаПоИНН

&НаКлиенте
Процедура ПриИзмененииИНН(ОповещатьОбОшибке = Ложь)
	
	ТекИНН = Объект.ИНН;
	Пока Найти(ТекИНН, " ") > 0 цикл
		ТекИНН = СтрЗаменить(ТекИНН, " ", ""); 
	КонецЦикла;
	Объект.ИНН = ТекИНН;
	
	ИННПравильный = Истина;
	
	УстановитьТекстПроверкиДляИННКПП(ИННПравильный);

	Если ИННПравильный И НастройкиПолученияДанныхПоИННЗаданы тогда
		
		РезультатЗапуска = ЗапуститьФоновоеЗаданиеПолученияДанныхПоИНННаСервере();
		
		Если РезультатЗапуска.ЗаданиеЗапущено Тогда
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПараметрыОбработчикаОжидания.ТекущийИнтервал = 2;
			ПараметрыОбработчикаОжидания.Вставить("ОповещатьОбОшибке", ОповещатьОбОшибке);
			ПодключитьОбработчикОжидания("ПроверитьВыполнениеЗаданияПолученияДанныхПоИНННаКлиенте", 2, Истина);
		Иначе
			ЗаполнитьРеквизитыДаннымиПоИНН(РезультатЗапуска.РеквизитыКонтрагента, ОповещатьОбОшибке);
		КонецЕсли;
	ИначеЕсли Не НастройкиПолученияДанныхПоИННЗаданы 
		И ОповещатьОбОшибке тогда
		ПоказатьОповещениеПользователя("Получении данных ЕГРЮЛ\ЕГРИП",, "Не заданы настройки получения данных ЕГРЮЛ\ЕГРИП.", БиблиотекаКартинок.Предупреждение32);
	ИначеЕсли Не ИННПравильный 
		И ОповещатьОбОшибке тогда
		ПоказатьОповещениеПользователя("Получении данных ЕГРЮЛ\ЕГРИП",, "ИНН указан неверно.", БиблиотекаКартинок.Предупреждение32);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьФоновоеЗаданиеПолученияДанныхПоИНННаСервере()
	
	РезультатЗапуска = Новый Структура;
	РезультатЗапуска.Вставить("ЗаданиеЗапущено"     , Ложь);
	РезультатЗапуска.Вставить("РеквизитыКонтрагента", Неопределено);
	
	Если ТипЗнч(ИдентификаторЗадания) = Тип("УникальныйИдентификатор") Тогда
		Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
		
		Если НЕ Задание = Неопределено
			И Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
			Задание.Отменить();
		КонецЕсли;
	КонецЕсли;
	
	ИнформацияОбОшибке = Неопределено;
	
	ПараметрыФормирования = Новый Структура;
	ПараметрыФормирования.Вставить("ИНН", Объект.ИНН);
	ПараметрыФормирования.Вставить("ЭтоЮридическоеЛицо", (Объект.ЮрФизЛицо = Перечисления.нсиЮрФизЛицо.ЮрЛицо));
	
	Попытка
		РезультатФоновогоЗадания = ДлительныеОперации.ЗапуститьВыполнениеВФоне(УникальныйИдентификатор,	"нсиПолучениеДанныхПоИНН.ДанныеКонтрагентаПоИНН", ПараметрыФормирования, НСтр("ru = 'Работа с контрагентами: получение реквизитов по ИНН.'"));
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Возврат РезультатЗапуска;
	КонецПопытки;
	
	ИдентификаторЗадания  = РезультатФоновогоЗадания.ИдентификаторЗадания;
	АдресХранилища        = РезультатФоновогоЗадания.АдресХранилища;
	
	Если РезультатФоновогоЗадания.ЗаданиеВыполнено Тогда
		РезультатЗапуска.РеквизитыКонтрагента = ПолучитьИзВременногоХранилища(РезультатФоновогоЗадания.АдресХранилища);
	Иначе
		РезультатЗапуска.ЗаданиеЗапущено      = Истина;
	КонецЕсли;
	
	Возврат РезультатЗапуска;
	
КонецФункции

&НаСервере
Функция ФоновоеЗаданиеПолученияДанныхПоИННВыполнено(ЗаданиеИдентификатор, АдресХранилища)
	
	РезультатВыполнения = Новый Структура("ЗаданиеВыполнено, РеквизитыКонтрагента", Ложь, Неопределено);
	
	Попытка
		РезультатВыполнения.ЗаданиеВыполнено = ДлительныеОперации.ЗаданиеВыполнено(ЗаданиеИдентификатор);
	Исключение
	КонецПопытки;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		РезультатВыполнения.РеквизитыКонтрагента = ПолучитьИзВременногоХранилища(АдресХранилища);
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьВыполнениеЗаданияПолученияДанныхПоИНННаКлиенте()
	
	РезультатВыполнения = ФоновоеЗаданиеПолученияДанныхПоИННВыполнено(ИдентификаторЗадания, АдресХранилища);
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗаполнитьРеквизитыДаннымиПоИНН(РезультатВыполнения.РеквизитыКонтрагента, ПараметрыОбработчикаОжидания.ОповещатьОбОшибке);
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("ПроверитьВыполнениеЗаданияПолученияДанныхПоИНННаКлиенте", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеОбъектаДляСравнения()

	ДанныеДляСравнения = Новый Структура;
	ДанныеДляСравнения.Вставить("КПП"                    , "");
	ДанныеДляСравнения.Вставить("Наименование"           , "");
	ДанныеДляСравнения.Вставить("НаименованиеПолное", "");
	ДанныеДляСравнения.Вставить("ЮридическийАдрес"       , "");
	ДанныеДляСравнения.Вставить("Телефон"                , "");
	
	ЗаполнитьЗначенияСвойств(ДанныеДляСравнения, Объект, "КПП, Наименование");
	
	ДанныеДляСравнения.НаименованиеПолное = Объект.ПолноеНаименование;
	
	// Данные телефона.
	Отбор = Новый Структура("Вид", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента"));
	ДанныеКонтактнойИнформации = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);

	Если ДанныеКонтактнойИнформации.ВГраница() > -1 Тогда
		ДанныеДляСравнения.Телефон = ДанныеКонтактнойИнформации[0].Представление;
	КонецЕсли;
	
	// Данные юридического адреса.
	Отбор = Новый Структура("Вид", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента"));
	ДанныеКонтактнойИнформации = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);

	Если ДанныеКонтактнойИнформации.ВГраница() > -1 Тогда
		ДанныеДляСравнения.ЮридическийАдрес = ДанныеКонтактнойИнформации[0].Представление;
	КонецЕсли;
	
	Возврат ДанныеДляСравнения;

КонецФункции 

&НаКлиенте
Функция СравнитьДанные(РеквизитыКонтрагента, ДанныеОбъекта)
	
	Результат = Новый Структура("ЕстьИзменения, ЕстьИзмененияВЗаполненныхРеквизитах", Ложь, Ложь);
	
	Если РеквизитыКонтрагента.Свойство("КПП") И НЕ РеквизитыКонтрагента.КПП = ДанныеОбъекта.КПП Тогда
		Результат.ЕстьИзменения = Истина;
		Если ЗначениеЗаполнено(ДанныеОбъекта.КПП) Тогда
			Результат.ЕстьИзмененияВЗаполненныхРеквизитах = Истина;
		КонецЕсли;
		
		Возврат Результат;
	КонецЕсли;
	
	Если РеквизитыКонтрагента.Свойство("Наименование") 
		И НЕ РеквизитыКонтрагента.Наименование = ДанныеОбъекта.Наименование Тогда
		Результат.ЕстьИзменения = Истина;
		Если ЗначениеЗаполнено(ДанныеОбъекта.Наименование) Тогда
			Результат.ЕстьИзмененияВЗаполненныхРеквизитах = Истина;
		КонецЕсли;
		
		Возврат Результат;
	КонецЕсли;
	
	Если РеквизитыКонтрагента.Свойство("НаименованиеПолное") 
		И НЕ РеквизитыКонтрагента.НаименованиеПолное = ДанныеОбъекта.НаименованиеПолное Тогда
		Результат.ЕстьИзменения = Истина;
		Если ЗначениеЗаполнено(ДанныеОбъекта.НаименованиеПолное) Тогда
			Результат.ЕстьИзмененияВЗаполненныхРеквизитах = Истина;
		КонецЕсли;
		
		Возврат Результат;
	КонецЕсли;
	
	Если РеквизитыКонтрагента.Свойство("Телефон") 
		И НЕ РеквизитыКонтрагента.Телефон = Неопределено Тогда
		Если РеквизитыКонтрагента.Телефон.Представление <> ДанныеОбъекта.Телефон Тогда
			
			Результат.ЕстьИзменения = Истина;
			Если ЗначениеЗаполнено(ДанныеОбъекта.Телефон) Тогда
				Результат.ЕстьИзмененияВЗаполненныхРеквизитах = Истина;
			КонецЕсли;
			
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Если РеквизитыКонтрагента.Свойство("ЮридическийАдрес")
		И НЕ РеквизитыКонтрагента.ЮридическийАдрес = Неопределено Тогда
		Если РеквизитыКонтрагента.ЮридическийАдрес.Представление <> ДанныеОбъекта.ЮридическийАдрес Тогда
			
			Результат.ЕстьИзменения = Истина;
			Если ЗначениеЗаполнено(ДанныеОбъекта.ЮридическийАдрес) Тогда
				Результат.ЕстьИзмененияВЗаполненныхРеквизитах = Истина;
			КонецЕсли;
			
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьРеквизитыДаннымиПоИНН(РеквизитыКонтрагента, ОповещатьОбОшибке = Ложь)
	
	Если РеквизитыКонтрагента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыКонтрагента.ОписаниеОшибки) Тогда
		
		Если ПустаяСтрока(РеквизитыКонтрагента.ОписаниеОшибки) Тогда
			ТекстПредупреждения = НСтр("ru='При получении данных ЕГРЮЛ\ЕГРИП произошла неизвестная ошибка.'");
		ИначеЕсли РеквизитыКонтрагента.ОписаниеОшибки = "НеУказаныПараметрыАутентификации" Тогда
			ТекстПредупреждения = НСтр("ru='Не указаны параметры аутентификации сервиса получения данных по ИНН.'");
		ИначеЕсли РеквизитыКонтрагента.ОписаниеОшибки = "НеУказанПароль" Тогда
			ТекстПредупреждения = НСтр("ru='Не указан пароль для доступа к сервису получения данных по ИНН'");
		ИначеЕсли СтрЧислоВхождений(ВРЕГ(РеквизитыКонтрагента.ОписаниеОшибки),"НЕ УДАЛОСЬ НАЙТИ ДАННЫЕ ДЛЯ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ") > 0 Тогда
			ТекстПредупреждения = НСтр("ru = 'Выполнен запрос к базе ЕГРЮЛ\ЕГРИП.'") + " " + РеквизитыКонтрагента.ОписаниеОшибки;
		Иначе
			ТекстПредупреждения = РеквизитыКонтрагента.ОписаниеОшибки;
		КонецЕсли;
		
		Если ОповещатьОбОшибке тогда
			ПоказатьОповещениеПользователя("Получении данных ЕГРЮЛ\ЕГРИП",, ТекстПредупреждения, БиблиотекаКартинок.Предупреждение32);
		КонецЕсли;	
		
	Иначе
		
		РезультатСравнения = СравнитьДанные(РеквизитыКонтрагента, ДанныеОбъектаДляСравнения());
		
		Если РезультатСравнения.ЕстьИзменения Тогда
			
			Если РезультатСравнения.ЕстьИзмененияВЗаполненныхРеквизитах Тогда 
				
				ОписаниеОповещенияПерезаполнить = Новый ОписаниеОповещения("ЗаполнениеРеквизитовКонтрагентаПоИННЗавершение",
				                                                           ЭтотОбъект,
				                                                           Новый Структура("РеквизитыКонтрагента", РеквизитыКонтрагента));
				ТекстВопроса = НСтр("ru = 'Перезаполнить реквизиты контрагента на основании данных ЕГРЮЛ\ЕГРИП?'");
				ПоказатьВопрос(ОписаниеОповещенияПерезаполнить, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
			Иначе
				
				ЗаполнитьРевизитыКонтрагентаПоПолученнымДанным(РеквизитыКонтрагента);
				
			КонецЕсли;
			
		Иначе 
			ПоказатьОповещениеПользователя("Получении данных ЕГРЮЛ\ЕГРИП",, 
				"Данные соответсвуют ЕГРЮЛ\ЕГРИП. Изменения не требуется.", БиблиотекаКартинок.Информация32);	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеРеквизитовКонтрагентаПоИННЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьРевизитыКонтрагентаПоПолученнымДанным(ДополнительныеПараметры.РеквизитыКонтрагента);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРевизитыКонтрагентаПоПолученнымДанным(РеквизитыКонтрагента)

	ЗаполнитьЗначенияСвойств(Объект, РеквизитыКонтрагента, "ИНН, Наименование");
	Если РеквизитыКонтрагента.Свойство("КПП") Тогда
		Объект.КПП = РеквизитыКонтрагента.КПП;
	КонецЕсли;
	Объект.ПолноеНаименование = РеквизитыКонтрагента.НаименованиеПолное;
	
	УстановитьТекстПроверкиДляИННКПП();
	
	ЗаполнитьСписокНаименованийСервер();
	
	Модифицированность = Истина;
	
	Если РеквизитыКонтрагента.Свойство("Телефон")
		И НЕ РеквизитыКонтрагента.Телефон = Неопределено Тогда
		
		Отбор = Новый Структура("Вид", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента"));
		ДанныеСтроки = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
		Если ДанныеСтроки.ВГраница() = -1 Тогда
			Возврат;
		КонецЕсли;
		ДанныеСтроки[0].Представление = РеквизитыКонтрагента.Телефон.Представление;
		ДанныеСтроки[0].ЗначенияПолей = РеквизитыКонтрагента.Телефон.КонтактнаяИнформация;
		
		ЭтотОбъект[ДанныеСтроки[0].ИмяРеквизита] = РеквизитыКонтрагента.Телефон.Представление;
		
	КонецЕсли;
	
	Если РеквизитыКонтрагента.Свойство("ЮридическийАдрес")
		И НЕ РеквизитыКонтрагента.ЮридическийАдрес = Неопределено Тогда
		
		Отбор = Новый Структура("Вид", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента"));
		ДанныеСтроки = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
		Если ДанныеСтроки.ВГраница() = -1 Тогда
			Возврат;
		КонецЕсли;
		ДанныеСтроки[0].Представление = РеквизитыКонтрагента.ЮридическийАдрес.Представление;
		ДанныеСтроки[0].ЗначенияПолей = РеквизитыКонтрагента.ЮридическийАдрес.КонтактнаяИнформация;
		
		ЭтотОбъект[ДанныеСтроки[0].ИмяРеквизита] = РеквизитыКонтрагента.ЮридическийАдрес.Представление;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиОбменаПриИзменении(Элемент)
	//КутьяАА ITRR
	Если Элемент.ТекущийЭлемент.Имя = "УчастникиОбменаОбмен" Тогда
		Модифицированность = Истина;
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	//КутьяАА ITRR <<
	Для каждого СтрокаКИУПП Из КонтактнаяИнформацияУПП Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаКИУПП.Объект) Тогда
			СтрокаКИУПП.Объект = Объект.Ссылка;
		КонецЕсли; 
	КонецЦикла; 
	
	НаборЗаписейКИ = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
	НаборЗаписейКИ.Отбор.Объект.Установить(Объект.Ссылка);
	НаборЗаписейКИ.Загрузить(КонтактнаяИнформацияУПП.Выгрузить());
	НаборЗаписейКИ.Записать(Истина);
	
	MDMСервер.ДоступностьУчастниковОбмена(ЭтаФорма);
	
	УИ = Объект.Ссылка.УникальныйИдентификатор();
	Если НЕ GUID_MDM = УИ Тогда
		GUID_MDM = УИ;
	КонецЕсли; 
	//>>
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДоступностьКнопкиУстановкиОсновнойЛицензии()

	Если Элементы.Лицензии.ТекущиеДанные = Неопределено Тогда
		Элементы.ЛицензииЛицензияСделатьОсновной.Доступность = Ложь;
		Элементы.ЛицензииЛицензияСделатьОсновной.Пометка = Ложь;
	Иначе
		Элементы.ЛицензииЛицензияСделатьОсновной.Доступность = Истина;
		Элементы.ЛицензииЛицензияСделатьОсновной.Пометка = Элементы.Лицензии.ТекущаяСтрока = Объект.алкОсновнаяЛицензия;
	КонецЕсли; 

	Лицензии.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[2].Элементы[0].Отбор.Элементы[0].ПравоеЗначение = Объект.алкОсновнаяЛицензия;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДоступностьКнопкиУстановкиОсновногоПунктаРазгрузки()

	Если Элементы.ПунктыРазгрузки.ТекущиеДанные = Неопределено Тогда
		Элементы.ПунктыРазгрузкиПунктРазгрузкиСделатьОсновным.Доступность = Ложь;
		Элементы.ПунктыРазгрузкиПунктРазгрузкиСделатьОсновным.Пометка = Ложь;
	Иначе
		Элементы.ПунктыРазгрузкиПунктРазгрузкиСделатьОсновным.Доступность = Истина;
		Элементы.ПунктыРазгрузкиПунктРазгрузкиСделатьОсновным.Пометка = Элементы.ПунктыРазгрузки.ТекущаяСтрока = Объект.алкОсновнойПунктРазгрузки;
	КонецЕсли; 

	ПунктыРазгрузки.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[2].Элементы[0].Отбор.Элементы[0].ПравоеЗначение = Объект.алкОсновнойПунктРазгрузки;
	
КонецПроцедуры

&НаКлиенте
Процедура ЛицензияСделатьОсновной(Команда)
	
	Если Элементы.Лицензии.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Элементы.Лицензии.ТекущаяСтрока) Тогда
		Возврат;
	КонецЕсли;
	 
	Если Объект.алкОсновнаяЛицензия = Элементы.Лицензии.ТекущаяСтрока Тогда
		Объект.алкОсновнаяЛицензия = ПредопределенноеЗначение("Справочник.алкЛицензии.ПустаяСсылка");
	Иначе
		Объект.алкОсновнаяЛицензия = Элементы.Лицензии.ТекущаяСтрока;
	КонецЕсли;
	
	ПроверитьДоступностьКнопкиУстановкиОсновнойЛицензии();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПунктРазгрузкиСделатьОсновным(Команда)

	Если Элементы.ПунктыРазгрузки.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Элементы.ПунктыРазгрузки.ТекущаяСтрока) Тогда
		Возврат;
	КонецЕсли;

	Если Объект.алкОсновнойПунктРазгрузки = Элементы.ПунктыРазгрузки.ТекущаяСтрока Тогда
		Объект.алкОсновнойПунктРазгрузки = ПредопределенноеЗначение("Справочник.алкПунктыРазгрузки.ПустаяСсылка");
	Иначе
		Объект.алкОсновнойПунктРазгрузки = Элементы.ПунктыРазгрузки.ТекущаяСтрока;
	КонецЕсли;
	
	ПроверитьДоступностьКнопкиУстановкиОсновногоПунктаРазгрузки();
	
	Модифицированность = Истина;
	
КонецПроцедуры


&НаКлиенте
Процедура ЛицензииПриАктивизацииСтроки(Элемент)
	ПроверитьДоступностьКнопкиУстановкиОсновнойЛицензии();
КонецПроцедуры


&НаКлиенте
Процедура ЛицензииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ПроверкаСсылкиНаЗапись(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСсылкиНаЗапись(Отказ)

	Если Параметры.Ключ.Пустая() Тогда
	
		Сообщить("Сначала запишите элемент.");
		
		Отказ = Истина;
	
	КонецЕсли;

КонецПроцедуры // ПроверкаСсылкиНаЗапись()

#КонецОбласти
