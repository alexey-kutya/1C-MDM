#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Имя = нсиУниверсальноеХранилище.ПолучитьИмяПоНаименованию(Наименование);
	
	СравнениеЗначений = Новый СравнениеЗначений();
	Сообщение = Новый СообщениеПользователю();
	Сообщение.УстановитьДанные(ЭтотОбъект);
	ТипПредставления = Неопределено;
	Для каждого Реквизит Из Реквизиты Цикл
		Реквизит.Имя = нсиУниверсальноеХранилище.ПолучитьИмяПоНаименованию(Реквизит.Наименование);
	КонецЦикла;
	
	ПроверитьИменаРеквизитов(Отказ);
	
	Если РеквизитПредставления = Справочники.нсиПредопределенныеРеквизиты.Код Тогда
		ДлинаПредставления = нсиУниверсальноеХранилище.РазобратьТип1(ТипКода).Длина;
	Иначе
		ДлинаПредставления = нсиУниверсальноеХранилище.РазобратьТип1(ТипНаименования).Длина;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос.Текст = "ВЫБРАТЬ
	               |	РеквизитыСправочника.Идентификатор,
	               |	РеквизитыСправочника.ДляГруппы,
	               |	РеквизитыСправочника.Тип1,
	               |	РеквизитыСправочника.Тип2,
	               |	РеквизитыСправочника.Наименование
	               |ПОМЕСТИТЬ ВТСтараяСтруктура
	               |ИЗ
	               |	Справочник.нсиВидыСправочников.Реквизиты КАК РеквизитыСправочника
	               |ГДЕ
	               |	РеквизитыСправочника.Ссылка = &ТекущийЭлемент";
	Запрос.УстановитьПараметр("ТекущийЭлемент", Ссылка);
	Запрос.Выполнить();
	ДополнительныеСвойства.Вставить("Запрос", Запрос);
	ДополнительныеСвойства.Вставить("СтарыйВид", Ссылка.ВидСправочника);
	ДополнительныеСвойства.Вставить("СтарыйВладелец", Ссылка.ВладелецСправочника);
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьИменаСправочника(Отказ, Ссылка);
	ПроверитьНаличиеПравДоступа();
	
	Если ВидСправочника=Перечисления.нсиВидыСправочников.ТабличнаяЧасть Тогда
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.нсиВидыСправочников");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ВладелецСправочника);
		Блокировка.Заблокировать(); 
		ПроверитьИменаСправочника(Отказ, ВладелецСправочника);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидСправочника<>ДополнительныеСвойства.СтарыйВид
		И ДополнительныеСвойства.СтарыйВид = Перечисления.нсиВидыСправочников.Классификатор Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	нсиВидыСправочников.Ссылка
			|ИЗ
			|	Справочник.нсиВидыСправочников КАК нсиВидыСправочников
			|ГДЕ
			|	нсиВидыСправочников.Классификатор = &Классификатор"
		);
		Запрос.УстановитьПараметр("Классификатор",Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Изменение вида справочника недопустимо, так как справочник используется в качестве классификатора
				|для справочника """+Строка(Выборка.Ссылка)+"""!",
				Выборка.Ссылка,,"Классификатор",Отказ
			);
		КонецЦикла;
	КонецЕсли;
	
	Если нсиУниверсальноеХранилище.ЕстьДанные(Ссылка) Тогда
		Если ВидСправочника<>ДополнительныеСвойства.СтарыйВид Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Изменение вида справочника недопустимо, когда в справочнике есть данные.",
				ЭтотОбъект,"ВидСправочника",,Отказ
			);
		КонецЕсли;
		Если ВладелецСправочника<>ДополнительныеСвойства.СтарыйВладелец Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Изменение владельца справочника недопустимо, когда в справочнике есть данные.",
				ЭтотОбъект,"ВладелецСправочника",,Отказ
			);
		КонецЕсли;
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ВыполнитьРеструктуризацию(ДополнительныеСвойства.Запрос);
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Если ВидСправочника = Перечисления.нсиВидыСправочников.ФункциональныйСправочник 
		ИЛИ ВидСправочника = Перечисления.нсиВидыСправочников.Классификатор	Тогда
		
		ИндексЭлемента = ПроверяемыеРеквизиты.Найти("ВладелецСправочника");
		Если не ИндексЭлемента = Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(ИндексЭлемента);
		КонецЕсли;
		
		Если ВидСправочника = Перечисления.нсиВидыСправочников.Классификатор Тогда 
			ИндексЭлемента = ПроверяемыеРеквизиты.Найти("ТипПолногоНаименования");
			Если не ИндексЭлемента = Неопределено Тогда
				ПроверяемыеРеквизиты.Удалить(ИндексЭлемента);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ВидСправочника = Перечисления.нсиВидыСправочников.ТабличнаяЧасть Тогда 
		ИндексЭлемента = ПроверяемыеРеквизиты.Найти("РеквизитПредставления");
		Если не ИндексЭлемента = Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(ИндексЭлемента);
		КонецЕсли;
		ИндексЭлемента = ПроверяемыеРеквизиты.Найти("ТипНаименования");
		Если не ИндексЭлемента = Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(ИндексЭлемента);
		КонецЕсли;
		ИндексЭлемента = ПроверяемыеРеквизиты.Найти("ТипПолногоНаименования");
		Если не ИндексЭлемента = Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(ИндексЭлемента);
		КонецЕсли;
	КонецЕсли;
	
	Если ИспользоватьПолноеНаименование И НЕ ЗначениеЗаполнено(ТипПолногоНаименования) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Не указан тип полного наименования!",ЭтотОбъект,"ТипПолногоНаименования",,Отказ
		);
	КонецЕсли;
	
	Если ИспользоватьКлассификацию И НЕ ЗначениеЗаполнено(Классификатор) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Не выбран тип классификатора!",,"Классификатор",,Отказ
		);
	КонецЕсли;
	
	
	Если ЗначениеЗаполнено(Классификатор) Тогда 
		Если Классификатор.ВидСправочника <> Перечисления.нсиВидыСправочников.Классификатор Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Выбран неправильный тип классификатора!",,"Классификатор",,Отказ
			);
		КонецЕсли;
	КонецЕсли;
	
	Если Иерархический И НЕ ЗначениеЗаполнено(ВидИерархии) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Не указан вид иерархии!",ЭтотОбъект,"ВидИерархии",,Отказ
		);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьИменаРеквизитов(Отказ);
	
	МассивЗапрещенныхРеквизитов = Новый Массив;
	ПолучитьИменаЗапрещенныхРеквизитов(МассивЗапрещенныхРеквизитов);	
	Если МассивЗапрещенныхРеквизитов.Количество()>0 Тогда
		Для Каждого реквизит Из Реквизиты Цикл
			Для Каждого запрещенныйРеквизит Из МассивЗапрещенныхРеквизитов Цикл
				
				Если реквизит.Имя = запрещенныйРеквизит Тогда
					
					Если реквизит.Имя = "Код" ИЛИ реквизит.Имя = "Наименование" ИЛИ реквизит.Имя = "Класс" ИЛИ реквизит.Имя = "ПолноеНаименование" Тогда 
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
											"Недопустимое имя реквизита ("+реквизит.Имя+"). Необходимо использовать стандартный реквизит",
											ЭтотОбъект,
											"Реквизиты["+Формат(реквизит.НомерСтроки-1,"ЧН=0; ЧГ=0")+"].Наименование",,Отказ
											);
					Иначе
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
											"Недопустимое имя реквизита ("+реквизит.Имя+"). Имя зарезервировано для служебных реквизитов",
											ЭтотОбъект,
											"Реквизиты["+Формат(реквизит.НомерСтроки-1,"ЧН=0; ЧГ=0")+"].Наименование",,Отказ
											);
					КонецЕсли;
					Прервать;
				
				КонецЕсли;	
				
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	Для каждого Реквизит Из Реквизиты Цикл
		Реквизит.Идентификатор = Новый УникальныйИдентификатор();
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьИменаСправочника(Отказ, ЭлементПроверки)
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекущийЭлемент", ЭлементПроверки);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТЧРеквизиты.НомерСтроки КАК СтрокаНомер,
	               |	ТЧРеквизиты.Наименование КАК Реквизит,
	               |	ТабличныеЧасти.Наименование КАК ТабличнаяЧасть
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		Данные.Имя КАК Имя
	               |	ИЗ
	               |		(ВЫБРАТЬ
	               |			Реквизиты.Имя КАК Имя
	               |		ИЗ
	               |			Справочник.нсиВидыСправочников.Реквизиты КАК Реквизиты
	               |		ГДЕ
	               |			Реквизиты.Ссылка = &ТекущийЭлемент
	               |		
	               |		ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |		ВЫБРАТЬ
	               |			ТабличныеЧасти.Имя
	               |		ИЗ
	               |			Справочник.нсиВидыСправочников КАК ТабличныеЧасти
	               |		ГДЕ
	               |			ТабличныеЧасти.ВидСправочника = ЗНАЧЕНИЕ(Перечисление.нсиВидыСправочников.ТабличнаяЧасть)
	               |			И ТабличныеЧасти.ВладелецСправочника = &ТекущийЭлемент) КАК Данные
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		Данные.Имя
	               |	
	               |	ИМЕЮЩИЕ
	               |		КОЛИЧЕСТВО(*) > 1) КАК Данные
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.нсиВидыСправочников.Реквизиты КАК ТЧРеквизиты
	               |		ПО (ТЧРеквизиты.Ссылка = &ТекущийЭлемент)
	               |			И (ТЧРеквизиты.Имя = Данные.Имя)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.нсиВидыСправочников КАК ТабличныеЧасти
	               |		ПО (ТабличныеЧасти.ВидСправочника = ЗНАЧЕНИЕ(Перечисление.нсиВидыСправочников.ТабличнаяЧасть))
	               |			И (ТабличныеЧасти.ВладелецСправочника = &ТекущийЭлемент)
	               |			И (ТабличныеЧасти.Имя = Данные.Имя)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Данные.Имя,
	               |	СтрокаНомер,
	               |	ТабличнаяЧасть";
	Результат = Запрос.Выполнить();
	Если не Результат.Пустой() Тогда
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю();
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Выб = Результат.Выбрать();
		Пока Выб.Следующий() Цикл
			Если Выб.СтрокаНомер<>Null Тогда
				Если ЭлементПроверки=Ссылка Тогда
					СообщитьОшибкуВНаименовании(Сообщение, Выб.СтрокаНомер, "Не уникальное наименование поля: "+Выб.Реквизит);
				Иначе
					Сообщение.Поле = "";
					Сообщение.Текст = "Не уникальное наименование реквизита: "+Выб.Реквизит+" ("+ЭлементПроверки+")";
					Сообщение.Сообщить();
				КонецЕсли;
			КонецЕсли;
			Если Выб.ТабличнаяЧасть<>Null Тогда
				Если ЭлементПроверки=ВладелецСправочника Тогда
					Сообщение.Поле = "Наименование";
					Сообщение.Текст = "Не уникальное наименование табличной части: "+Выб.ТабличнаяЧасть;
					Сообщение.Сообщить();
				Иначе
					Сообщение.Поле = "";
					Сообщение.Текст = "Не уникальное наименование табличной части: "+Выб.ТабличнаяЧасть;
					Сообщение.Сообщить();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура СообщитьОшибкуВНаименовании(Сообщение, НомерСтроки, Текст)
	Сообщение.Поле = "Реквизиты["+Формат(НомерСтроки-1, "ЧН=; ЧГ=")+"].Наименование";
	Сообщение.Текст = Текст;
	Сообщение.Сообщить();
КонецПроцедуры

Процедура ВыполнитьРеструктуризацию(Запрос)
	Запрос.Текст = "ВЫБРАТЬ
	               |	НоваяСтруктура.Идентификатор,
	               |	НоваяСтруктура.ДляГруппы,
	               |	НоваяСтруктура.Тип1,
	               |	НоваяСтруктура.Тип2,
	               |	НоваяСтруктура.Наименование,
	               |	ВТСтараяСтруктура.Идентификатор КАК ИдентификаторСтарый,
	               |	ВТСтараяСтруктура.ДляГруппы КАК ДляГруппыСтарый,
	               |	ВТСтараяСтруктура.Тип1 КАК Тип1Старый,
	               |	ВТСтараяСтруктура.Тип2 КАК Тип2Старый,
	               |	ВТСтараяСтруктура.Наименование КАК НаименованиеСтарый
	               |ИЗ
	               |	ВТСтараяСтруктура КАК ВТСтараяСтруктура
	               |		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			РеквизитыСправочника.Идентификатор КАК Идентификатор,
	               |			РеквизитыСправочника.ДляГруппы КАК ДляГруппы,
	               |			РеквизитыСправочника.Тип1 КАК Тип1,
	               |			РеквизитыСправочника.Тип2 КАК Тип2,
	               |			РеквизитыСправочника.Наименование КАК Наименование
	               |		ИЗ
	               |			Справочник.нсиВидыСправочников.Реквизиты КАК РеквизитыСправочника
	               |		ГДЕ
	               |			РеквизитыСправочника.Ссылка = &ТекущийЭлемент) КАК НоваяСтруктура
	               |		ПО (НоваяСтруктура.Идентификатор = ВТСтараяСтруктура.Идентификатор)
	               |ГДЕ
	               |	(НЕ(ВТСтараяСтруктура.ДляГруппы = НоваяСтруктура.ДляГруппы
	               |					И ВТСтараяСтруктура.Тип1 = НоваяСтруктура.Тип1
	               |					И ВТСтараяСтруктура.Тип2 = НоваяСтруктура.Тип2)
	               |			ИЛИ НоваяСтруктура.Идентификатор ЕСТЬ NULL 
	               |			ИЛИ ВТСтараяСтруктура.Идентификатор ЕСТЬ NULL )";
	ВыбРеквизит = Запрос.Выполнить().Выбрать();
	
	ЕстьИзменения = Ложь;
	ВыборкаЭлементов = Неопределено;
	
	Пока ВыбРеквизит.Следующий() Цикл
		Если ВыбРеквизит.Идентификатор=Null Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Удаление реквизита: "+ВыбРеквизит.НаименованиеСтарый;
			Сообщение.Сообщить();
			Тип = ПостроитьКраткийТип(ВыбРеквизит.Тип1Старый, ВыбРеквизит.Тип2Старый);
			УдалитьЗначенияРеквизита(ВыбРеквизит.ИдентификаторСтарый, Тип, ВыбРеквизит.ДляГруппыСтарый, ВыборкаЭлементов);
		ИначеЕсли ВыбРеквизит.ИдентификаторСтарый=Null Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Добавление реквизита: "+ВыбРеквизит.Наименование;
			Сообщение.Сообщить();
			Тип = ПостроитьКраткийТип(ВыбРеквизит.Тип1, ВыбРеквизит.Тип2);
			ДобавитьЗначенияРеквизита(ВыбРеквизит.Идентификатор, Тип, ВыбРеквизит.ДляГруппы, ВыборкаЭлементов);
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Изменение реквизита: "+ВыбРеквизит.Наименование;
			Сообщение.Сообщить();

			ТипСтарый = ПостроитьКраткийТип(ВыбРеквизит.Тип1Старый, ВыбРеквизит.Тип2Старый);
			Тип = ПостроитьКраткийТип(ВыбРеквизит.Тип1, ВыбРеквизит.Тип2);
			
			Если ТипСтарый.Тип1="Булево" и Тип.Тип1="Булево" Тогда
				ИзменитьПризнакДляГруппы(ВыбРеквизит.Идентификатор, Тип, ВыбРеквизит.ДляГруппыСтарый, ВыбРеквизит.ДляГруппы, ВыборкаЭлементов);
			ИначеЕсли ТипСтарый.Тип1="Число" и Тип.Тип1="Число" Тогда
				ИзменитьПризнакДляГруппы(ВыбРеквизит.Идентификатор, Тип, ВыбРеквизит.ДляГруппыСтарый, ВыбРеквизит.ДляГруппы, ВыборкаЭлементов);
				Если ТипСтарый.Точность>Тип.Точность Тогда
					ИзменитьЗначенияРеквизита(ВыбРеквизит.Идентификатор, Тип, ВыбРеквизит.ДляГруппы, ВыборкаЭлементов, 10);
				КонецЕсли;
			ИначеЕсли ТипСтарый.Тип1="Строка" и Тип.Тип1="Строка" Тогда
				ИзменитьПризнакДляГруппы(ВыбРеквизит.Идентификатор, Тип, ВыбРеквизит.ДляГруппыСтарый, ВыбРеквизит.ДляГруппы, ВыборкаЭлементов);
				Если ТипСтарый.Длина>Тип.Длина Тогда
					ИзменитьЗначенияРеквизита(ВыбРеквизит.Идентификатор, Тип, ВыбРеквизит.ДляГруппы, ВыборкаЭлементов, 20);
				КонецЕсли;
			ИначеЕсли (ТипСтарый.Тип1="Дата" и Тип.Тип1="Дата") или (ТипСтарый.Тип1="ДатаИВремя" и Тип.Тип1="ДатаИВремя")
				или (ТипСтарый.Тип1="Дата" и Тип.Тип1="ДатаИВремя") Тогда
				ИзменитьПризнакДляГруппы(ВыбРеквизит.Идентификатор, Тип, ВыбРеквизит.ДляГруппыСтарый, ВыбРеквизит.ДляГруппы, ВыборкаЭлементов);
			ИначеЕсли ТипСтарый.Тип1="ДатаИВремя" и Тип.Тип1="Дата" Тогда
				ИзменитьПризнакДляГруппы(ВыбРеквизит.Идентификатор, Тип, ВыбРеквизит.ДляГруппыСтарый, ВыбРеквизит.ДляГруппы, ВыборкаЭлементов);
				ИзменитьЗначенияРеквизита(ВыбРеквизит.Идентификатор, Тип, ВыбРеквизит.ДляГруппы, ВыборкаЭлементов, 30);
			ИначеЕсли ТипСтарый.Тип1=Тип.Тип1 и ТипСтарый.Тип2=Тип.Тип2 Тогда
				ИзменитьПризнакДляГруппы(ВыбРеквизит.Идентификатор, Тип, ВыбРеквизит.ДляГруппыСтарый, ВыбРеквизит.ДляГруппы, ВыборкаЭлементов);
			Иначе
				УдалитьЗначенияРеквизита(ВыбРеквизит.ИдентификаторСтарый, ТипСтарый, ВыбРеквизит.ДляГруппыСтарый, ВыборкаЭлементов);
				ДобавитьЗначенияРеквизита(ВыбРеквизит.Идентификатор, Тип, ВыбРеквизит.ДляГруппы, ВыборкаЭлементов);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ПостроитьКраткийТип(Тип1, Тип2)
	СтТип = нсиУниверсальноеХранилище.РазобратьТип1(Тип1);
	СтТип.Вставить("Тип2", Тип2);
	Возврат СтТип;
КонецФункции

Процедура ПолучитьЭлементы(Выборка)
	Если Выборка=Неопределено Тогда
		Если ВидСправочника <> Перечисления.нсиВидыСправочников.ТабличнаяЧасть Тогда 
			ОсновнаяТаблица = "Справочник."+нсиУниверсальноеХранилищеПовтИсп.ПолучитьИмяСправочникаХранилища(Ссылка);
			Запрос = Новый Запрос();
			Запрос.Текст = "ВЫБРАТЬ
			               |	ОсновнаяТаблица.Идентификатор КАК Элемент,
			               |	"+?(ВидСправочника = Перечисления.нсиВидыСправочников.Классификатор,"ЛОЖЬ","ОсновнаяТаблица.пЭтоГруппа")+" КАК ЭтоГруппа
			               |ИЗ
			               |	"+ОсновнаяТаблица+" КАК ОсновнаяТаблица
			               |ГДЕ
			               |	ОсновнаяТаблица.Владелец = &ВидСправочника
			               |
			               |УПОРЯДОЧИТЬ ПО
			               |	ОсновнаяТаблица.Идентификатор";
			Запрос.УстановитьПараметр("ВидСправочника", Ссылка);
			Выборка = Запрос.Выполнить().Выбрать();
		Иначе
			Запрос = Новый Запрос();
			Запрос.Текст = "ВЫБРАТЬ
			               |	ОсновнаяТаблица.Элемент,
			               |	ЛОЖЬ КАК ЭтоГруппа
			               |ИЗ
			               |	РегистрСведений.нсиХранилищеСтрока КАК ОсновнаяТаблица
			               |ГДЕ
			               |	ОсновнаяТаблица.ВидСправочника = &ВидСправочника
						   |	И ОсновнаяТаблица.Реквизит = &РеквизитКод
			               |
			               |УПОРЯДОЧИТЬ ПО
			               |	ОсновнаяТаблица.Элемент";
			Запрос.УстановитьПараметр("ВидСправочника", Ссылка);
			Запрос.УстановитьПараметр("РеквизитКод", Справочники.нсиПредопределенныеРеквизиты.Код.УникальныйИдентификатор());
			Выборка = Запрос.Выполнить().Выбрать();
		КонецЕсли;
	Иначе
		Выборка.Сбросить();
	КонецЕсли;
КонецПроцедуры

Процедура УдалитьЗначенияРеквизита(Реквизит, Тип, ДляГруппы, ВыборкаЭлементов)
	ИмяМенеджера = "";
	ИмяРесурса = "";
	нсиУниверсальноеХранилище.ПолучитьИменаХранения(Тип, ИмяМенеджера, ИмяРесурса);
	МенеджерРегистра = РегистрыСведений[ИмяМенеджера];
	ПолучитьЭлементы(ВыборкаЭлементов);
	Если Иерархический и не ДляГруппы Тогда
		Пока ВыборкаЭлементов.Следующий() Цикл
			Если не ВыборкаЭлементов.ЭтоГруппа Тогда
				МенеджерЗаписи = МенеджерРегистра.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.ВидСправочника = Ссылка;
				МенеджерЗаписи.Элемент = ВыборкаЭлементов.Элемент;
				МенеджерЗаписи.Реквизит = Реквизит;
				МенеджерЗаписи.Удалить();
			КонецЕсли;
		КонецЦикла;
	Иначе
		Пока ВыборкаЭлементов.Следующий() Цикл
			МенеджерЗаписи = МенеджерРегистра.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ВидСправочника = Ссылка;
			МенеджерЗаписи.Элемент = ВыборкаЭлементов.Элемент;
			МенеджерЗаписи.Реквизит = Реквизит;
			МенеджерЗаписи.Удалить();
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьЗначенияРеквизита(Реквизит, Тип, ДляГруппы, ВыборкаЭлементов)
	ИмяМенеджера = "";
	ИмяРесурса = "";
	нсиУниверсальноеХранилище.ПолучитьИменаХранения(Тип, ИмяМенеджера, ИмяРесурса);
	МенеджерРегистра = РегистрыСведений[ИмяМенеджера];
	ПолучитьЭлементы(ВыборкаЭлементов);
	Если Иерархический и не ДляГруппы Тогда
		Пока ВыборкаЭлементов.Следующий() Цикл
			Если не ВыборкаЭлементов.ЭтоГруппа Тогда
				МенеджерЗаписи = МенеджерРегистра.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.ВидСправочника = Ссылка;
				МенеджерЗаписи.Элемент = ВыборкаЭлементов.Элемент;
				МенеджерЗаписи.Реквизит = Реквизит;
				МенеджерЗаписи.Записать(Ложь);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Пока ВыборкаЭлементов.Следующий() Цикл
			МенеджерЗаписи = МенеджерРегистра.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ВидСправочника = Ссылка;
			МенеджерЗаписи.Элемент = ВыборкаЭлементов.Элемент;
			МенеджерЗаписи.Реквизит = Реквизит;
			МенеджерЗаписи.Записать(Ложь);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ИзменитьЗначенияРеквизита(Реквизит, Тип, ДляГруппы, ВыборкаЭлементов, ФункторПреобразования)
	ИмяМенеджера = "";
	ИмяРесурса = "";
	нсиУниверсальноеХранилище.ПолучитьИменаХранения(Тип, ИмяМенеджера, ИмяРесурса);
	МенеджерРегистра = РегистрыСведений[ИмяМенеджера];
	ПолучитьЭлементы(ВыборкаЭлементов);
	Если Иерархический и не ДляГруппы Тогда
		Пока ВыборкаЭлементов.Следующий() Цикл
			Если не ВыборкаЭлементов.ЭтоГруппа Тогда
				МенеджерЗаписи = МенеджерРегистра.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.ВидСправочника = Ссылка;
				МенеджерЗаписи.Элемент = ВыборкаЭлементов.Элемент;
				МенеджерЗаписи.Реквизит = Реквизит;
				МенеджерЗаписи.Прочитать();
				ПреобразоватьЗначение(ФункторПреобразования, Тип, МенеджерЗаписи[ИмяРесурса]);
				МенеджерЗаписи.Записать();
			КонецЕсли;
		КонецЦикла;
	Иначе
		Пока ВыборкаЭлементов.Следующий() Цикл
			МенеджерЗаписи = МенеджерРегистра.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ВидСправочника = Ссылка;
			МенеджерЗаписи.Элемент = ВыборкаЭлементов.Элемент;
			МенеджерЗаписи.Реквизит = Реквизит;
			МенеджерЗаписи.Прочитать();
			ПреобразоватьЗначение(ФункторПреобразования, Тип, МенеджерЗаписи[ИмяРесурса]);
			МенеджерЗаписи.Записать();
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ПреобразоватьЗначение(Функтор, Тип, ЗначениеРеквизита)
	Если Функтор=10 Тогда
		ЗначениеРеквизита = Окр(ЗначениеРеквизита, Тип.Точность);
	ИначеЕсли Функтор=20 Тогда
		ЗначениеРеквизита = Лев(ЗначениеРеквизита, Тип.Длина);
	ИначеЕсли Функтор=30 Тогда
		ЗначениеРеквизита = НачалоДня(ЗначениеРеквизита);
	КонецЕсли;
КонецПроцедуры

Процедура ИзменитьПризнакДляГруппы(Реквизит, Тип, ДляГруппыСтарый, ДляГруппы, ВыборкаЭлементов)
	Если ДляГруппыСтарый=ДляГруппы Тогда
		Возврат;
	КонецЕсли;
	
	ИмяМенеджера = "";
	ИмяРесурса = "";
	нсиУниверсальноеХранилище.ПолучитьИменаХранения(Тип, ИмяМенеджера, ИмяРесурса);
	МенеджерРегистра = РегистрыСведений[ИмяМенеджера];
	ПолучитьЭлементы(ВыборкаЭлементов);
	Пока ВыборкаЭлементов.Следующий() Цикл
		Если ВыборкаЭлементов.ЭтоГруппа Тогда
			МенеджерЗаписи = МенеджерРегистра.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ВидСправочника = Ссылка;
			МенеджерЗаписи.Элемент = ВыборкаЭлементов.Элемент;
			МенеджерЗаписи.Реквизит = Реквизит;
			Если ДляГруппыСтарый Тогда
				МенеджерЗаписи.Удалить();
			Иначе
				МенеджерЗаписи.Записать(Ложь);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ПроверитьНаличиеПравДоступа()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ИСТИНА КАК Результат
	               |ИЗ
	               |	РегистрСведений.нсиПраваДоступаНаВидыСправочников КАК нсиПраваДоступаНаВидыСправочников
	               |ГДЕ
	               |	нсиПраваДоступаНаВидыСправочников.ВидСправочника = &ВидСправочника";
	Запрос.УстановитьПараметр("ВидСправочника", Ссылка);
	рез = Запрос.Выполнить();
	Если рез.Пустой() И ПолучитьФункциональнуюОпцию("ИспользоватьГруппыПользователей")= Истина Тогда
		
		Запись = РегистрыСведений.нсиПраваДоступаНаВидыСправочников.СоздатьМенеджерЗаписи();
		Запись.ВидСправочника 			= Ссылка;
		Запись.Пользователь 			= Справочники.ГруппыПользователей.ВсеПользователи;
		Запись.Просмотр 				= Истина;
		Запись.Добавление 				= Ложь; 
		Запись.Редактирование 			= Ложь;
		Запись.ПометкаНаУдаление 		= Ложь;
		Запись.СнятиеПометкиНаУдаление 	= Ложь;
		Запись.Удаление 				= Ложь;
		Запись.УдалениеПомеченных 		= Ложь;
		Запись.Записать();
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ПолучитьИменаЗапрещенныхРеквизитов(МассивЗапрещенныхРеквизитов)
	
	Для Каждого Реквизит ИЗ Метаданные.Справочники.нсиУниверсальныйКлассификатор.Реквизиты Цикл
		МассивЗапрещенныхРеквизитов.Добавить(Реквизит.Имя);
	КонецЦикла;		
	
	Для Каждого Реквизит ИЗ Метаданные.Справочники.нсиУниверсальныйКлассификатор.СтандартныеРеквизиты Цикл
		МассивЗапрещенныхРеквизитов.Добавить(Реквизит.Имя);
	КонецЦикла;		
	
	Для Каждого Реквизит ИЗ Метаданные.Справочники.нсиУниверсальныйФункциональныйСправочник.Реквизиты Цикл
		МассивЗапрещенныхРеквизитов.Добавить(Реквизит.Имя);
	КонецЦикла;		
	
	Для Каждого Реквизит ИЗ Метаданные.Справочники.нсиУниверсальныйФункциональныйСправочник.СтандартныеРеквизиты Цикл
		МассивЗапрещенныхРеквизитов.Добавить(Реквизит.Имя);
	КонецЦикла;		
	
КонецПроцедуры

#КонецОбласти