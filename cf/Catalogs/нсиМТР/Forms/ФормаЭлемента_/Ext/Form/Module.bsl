#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьТехническиеХарактеристики();
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеСвойства");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства

		
	РегистрыСведений.нсиСтатусыОбработкиСправочников.ОпределитьДоступКФорме(
		Объект.Ссылка, ЭтотОбъект.ТолькоПросмотр, Объект.ЭтоМакет);
		
	УправлениеВидимостьюИДоступом();
	
	// @Комментарий: Вызовем процедуру установки функциональных опций.
	нсиРаботаСФормамиСервер.УправлениеВидимостьюОбработкиЗаявок(ЭтотОбъект);
	
	Если не ЗначениеЗаполнено(Объект.Ссылка) или Параметры.ВременныйЭлемент Тогда
		Если Объект.ТипПозиции = Перечисления.нсиТипыПозицийСправочников.ПустаяСсылка() или Объект.ТипПозиции = Перечисления.нсиТипыПозицийСправочников.Неопределено Тогда
			Объект.ТипПозиции = Перечисления.нсиТипыПозицийСправочников.ЭталоннаяПозиция;
		КонецЕсли;
	КонецЕсли;
	
	нсиВыделениеИзменений.ОформитьВыделениеИзменений(ЭтотОбъект);
	
	нсиРаботаСФормамиСервер.УстановитьВидимостьКодов(ЭтаФорма);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) и Объект.ЭтоМакет Тогда
		нсиРаботаСФормамиСервер.УстановитьДоступностьПолей(ЭтаФорма, Объект.Ссылка);
	КонецЕсли;	
	
	Элементы.ТехническиеХарактеристикиФорма.ТолькоПросмотр = ЭтаФорма.ТолькоПросмотр;
	
	// КутьяАА ITRR <<
	Если Параметры.Ключ.Пустая() Тогда
		Объект.ПолнаяСинхронизацияMDM = Истина;
	КонецЕсли; 
	
	ПолнаяСинхронизацияMDMДоИзменения = Объект.ПолнаяСинхронизацияMDM;
	
	УстановитьОтборыСвязанныхДанных();
	
	MDMСервер.ЗаполнитьУчастниковОбмена(ЭтаФорма);
	MDMСервер.УстановитьУсловноеОформление(ЭтаФорма);
	MDMСервер.ДоступностьУчастниковОбмена(ЭтаФорма);
	GUID_MDM = Объект.Ссылка.УникальныйИдентификатор();
	
	ЗаполнитьБазовуюЕдиницуИзмерения();
	//>>
	
	//фыв++
	СсылкаНаКартинку=ПолучитьНавигационнуюСсылку(Объект.Ссылка,"ДанныеКартинки");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьБазовуюЕдиницуИзмерения()

	Если НЕ ЗначениеЗаполнено(Объект.БазоваяЕдиницаИзмерения) 
		И НЕ Объект.LocalMaterialType.Пустая() Тогда
	
		НастройкиЕдиницИзмерения = Справочники.LocalMaterialType.ПолучитьНастройку(Объект.LocalMaterialType);
		Если НЕ НастройкиЕдиницИзмерения = Неопределено Тогда
			СтрокаБазЕд = НастройкиЕдиницИзмерения.Настройка.НазначениеЕдиниц.Найти("БазоваяЕдиницаИзмерения", "Назначение");
			Если НЕ СтрокаБазЕд = Неопределено
				И ЗначениеЗаполнено(СтрокаБазЕд.ЕдиницаПоКлассификатору) Тогда
				
				Объект.БазоваяЕдиницаИзмерения = СтрокаБазЕд.ЕдиницаПоКлассификатору;
				
			КонецЕсли; 
		КонецЕсли; 
	
	КонецЕсли; 

КонецПроцедуры // ЗаполнитьБазовуюЕдиницуИзмерения()
 
&НаСервере
Процедура УстановитьОтборыСвязанныхДанных()

	ЕдиницыИзмерения.Отбор.Элементы.Очистить();
	Отбор = ЕдиницыИзмерения.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = ЕдиницыИзмерения.Отбор.ДоступныеПоляОтбора.Элементы.Найти("Владелец").Поле;
	Отбор.ПравоеЗначение = Объект.Ссылка;
	
	Штрихкоды.Отбор.Элементы.Очистить();
	Отбор = Штрихкоды.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Штрихкоды.Отбор.ДоступныеПоляОтбора.Элементы.Найти("Владелец").Поле;
	Отбор.ПравоеЗначение = Объект.Ссылка;
	
	Спецификации.Отбор.Элементы.Очистить();
	Отбор = Спецификации.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Спецификации.Отбор.ДоступныеПоляОтбора.Элементы.Найти("Номенклатура").Поле;
	Отбор.ПравоеЗначение = Объект.Ссылка;
	
	Поставщики.Отбор.Элементы.Очистить();
	Отбор = Поставщики.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Поставщики.Отбор.ДоступныеПоляОтбора.Элементы.Найти("Владелец").Поле;
	Отбор.ПравоеЗначение = Объект.Ссылка;
	
КонецПроцедуры // УстановитьОтборыСвязанныхДанных()
    
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	ЗаполнитьСписокНаименованийСервер();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//Объект.Ссылка 
	//Метаданные
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ВладелецФормы = Неопределено Тогда 
		ВедетсяОбработка = Ложь; 
	Иначе 	
		ВедетсяОбработка = 
			(ВладелецФормы.Имя = "СписокБуфера" ИЛИ 
			ВладелецФормы.Имя = "СписокЗагруженных" ИЛИ 
			ВладелецФормы.Имя = "СписокОбработанных");
	КонецЕсли;	
		
	Если ВедетсяОбработка И Не ЗначениеЗаполнено(Объект.ТипПозиции) Тогда 
		Объект.ТипПозиции = ПредопределенноеЗначение("Перечисление.нсиТипыПозицийСправочников.ЭталоннаяПозиция");	
	КонецЕсли;	
	
	Если НЕ Элементы.Найти("ФормаЗаписатьИЗакрыть1") = Неопределено тогда
		Элементы.ФормаЗаписатьИЗакрыть1.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
	//КутьяАА ITRR
	ИнициализироватьПодчиненныеРеквизиты();
	УстановитьОтборыПоРеквизитам();
	
	ДистрибьюторВидимость();
	ФактическийПроизводительВидимость();
	
//	ПроверитьПометкуКнопкиУстановкиОсновногоПроизводителя();

	УстановитьВидимостьКнопокПроверкиОрфографии();
	
КонецПроцедуры

//КутьяАА ITRR
&НаКлиенте
Процедура ИнициализироватьПодчиненныеРеквизиты()

	ПодчиненныеРеквизиты = Новый Структура;
	ПодчиненныеРеквизиты.Вставить("LocalMaterialType", "LocalBrand");
	ПодчиненныеРеквизиты.Вставить("LocalBrand", "РазновидностьВкус");
	ПодчиненныеРеквизиты.Вставить("РазновидностьВкус", "LocalAlcoholContent");
	
	РодительскиеРеквизиты = Новый Структура;
	РодительскиеРеквизиты.Вставить("LocalAlcoholContent", "РазновидностьВкус");
	РодительскиеРеквизиты.Вставить("РазновидностьВкус", "LocalBrand");
	РодительскиеРеквизиты.Вставить("LocalBrand", "LocalMaterialType");
	
	ПустыеСсылки = Новый Структура;
	ПустыеСсылки.Вставить("LocalMaterialType", ПредопределенноеЗначение("Справочник.LocalMaterialType.ПустаяСсылка"));
	ПустыеСсылки.Вставить("LocalBrand", ПредопределенноеЗначение("Справочник.LocalBrand.ПустаяСсылка"));
	ПустыеСсылки.Вставить("РазновидностьВкус", ПредопределенноеЗначение("Справочник.РазновидностиВкусы.ПустаяСсылка"));
	ПустыеСсылки.Вставить("LocalAlcoholContent", ПредопределенноеЗначение("Справочник.LocalAlcoholContent.ПустаяСсылка"));

КонецПроцедуры // ИнициализироватьПодчиненныеРеквизиты()

&НаКлиенте
Процедура УстановитьОтборыПоРеквизитам()

	Для каждого КлючИЗначение Из ПодчиненныеРеквизиты Цикл
		УстановитьОтборПодчиненного_Рекурсия(КлючИЗначение.Ключ);
	КонецЦикла; 

КонецПроцедуры // УстановитьОтборы()

&НаКлиенте
Процедура ПрименитьОтборПодчиненного(СписокДляОтбора, ИмяРеквизита)

	НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", СписокДляОтбора);
    НовыйМассив = Новый Массив();
    НовыйМассив.Добавить(НовыйПараметр);
    НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
    Элементы[ИмяРеквизита].ПараметрыВыбора = НовыеПараметры;

КонецПроцедуры // УстановитьОтбор()

&НаСервереБезКонтекста
Функция СписокПодчиненныхОбъектов(ИзмеренияОтбораСтруктура, ИмяИзмеренияВыбора)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СоответствиеКлючевыхАтрибутов.ИмяИзмеренияВыбора
		|ИЗ
		|	РегистрСведений.СоответствиеКлючевыхАтрибутов КАК СоответствиеКлючевыхАтрибутов
		|ГДЕ
		|	УСЛОВИЕ1
		|
		|СГРУППИРОВАТЬ ПО
		|	СоответствиеКлючевыхАтрибутов.ИмяИзмеренияВыбора";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяИзмеренияВыбора", ИмяИзмеренияВыбора);	
	
	н = 1;
	Для каждого Измерение Из ИзмеренияОтбораСтруктура Цикл
		
		УСЛОВИЕ = "УСЛОВИЕ" + н;
		
		Последний = ИзмеренияОтбораСтруктура.Количество() = н;
		
		н = н + 1;
		
		СледующееУсловие = ?(Последний, "", ""+Символы.ПС+"	И УСЛОВИЕ" + н);
		
		СтрокаУсловия = "СоответствиеКлючевыхАтрибутов."+Измерение.Ключ+" = &"+Измерение.Ключ+СледующееУсловие;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, УСЛОВИЕ, СтрокаУсловия);	
		
		Запрос.УстановитьПараметр(Измерение.Ключ, Измерение.Значение);
		
	КонецЦикла;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку(ИмяИзмеренияВыбора);

КонецФункции // СписокРазновидностей()

&НаКлиенте
Процедура УстановитьОтборПодчиненного_Рекурсия(ИмяРеквизита, ОчищатьПодчиненныйРеквизит = Ложь)
	
	ИмяПодчиненногоРеквизита = ПодчиненныеРеквизиты[ИмяРеквизита];
	
	Если ОчищатьПодчиненныйРеквизит Тогда
		Объект[ИмяПодчиненногоРеквизита] = ПустыеСсылки[ИмяПодчиненногоРеквизита];
	КонецЕсли; 
	
	ИзмеренияОтбораСтруктура = ПолучитьСтруктуруИзмеренийОтбора_Рекурсия(ИмяРеквизита, Новый Структура);
	
	СписокПодчиненныхОбъектов = СписокПодчиненныхОбъектов(ИзмеренияОтбораСтруктура, ИмяПодчиненногоРеквизита);
	
	Если СписокПодчиненныхОбъектов.Количество() Тогда
		
		ПрименитьОтборПодчиненного(, ИмяПодчиненногоРеквизита);
		
		Если ПодчиненныеРеквизиты.Свойство(ИмяПодчиненногоРеквизита) Тогда
			УстановитьОтборПодчиненного_Рекурсия(ИмяПодчиненногоРеквизита, ОчищатьПодчиненныйРеквизит);		
		КонецЕсли; 
		
	КонецЕсли; 

КонецПроцедуры // ПрименитьУниверсальныйОтбор()

&НаКлиенте
Функция ПолучитьСтруктуруИзмеренийОтбора_Рекурсия(ИмяРеквизита, ИзмеренияОтбораСтруктура)

	ИзмеренияОтбораСтруктура.Вставить(ИмяРеквизита, Объект[ИмяРеквизита]);
	
	ИмяРодительскогоРеквизита = "";
	Если РодительскиеРеквизиты.Свойство(ИмяРеквизита, ИмяРодительскогоРеквизита) Тогда
		ПолучитьСтруктуруИзмеренийОтбора_Рекурсия(ИмяРодительскогоРеквизита, ИзмеренияОтбораСтруктура);		
	КонецЕсли;
	
	Возврат ИзмеренияОтбораСтруктура;

КонецФункции // ПолучитьСтруктуруИзмеренийОтбора()
 
&НаСервере
Процедура АвтозаполнениеРеквизитовПоТипуМатериала()

	Для каждого СтрокаТЧРеквизита Из Объект.LocalMaterialType.РеквизитыНоменклатуры Цикл
		
		Попытка
			Объект[СтрокаТЧРеквизита.Реквизит] = СтрокаТЧРеквизита.Значение;
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла; 

КонецПроцедуры // АвтозаполнениеРеквизитовПоТипуМатериала()
 
&НаКлиенте
Процедура LocalMaterialTypeПриИзменении(Элемент)
	
	ЗаполнитьБазовуюЕдиницуИзмерения();
	
	УстановитьОтборПодчиненного_Рекурсия(Элемент.Имя, Истина);
	
	Если ЗначениеЗаполнено(Объект.LocalMaterialType) Тогда
		АвтозаполнениеРеквизитовПоТипуМатериала();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура LocalBrandПриИзменении(Элемент)
	
	УстановитьОтборПодчиненного_Рекурсия(Элемент.Имя, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РазновидностьВкусПриИзменении(Элемент)
	
	УстановитьОтборПодчиненного_Рекурсия(Элемент.Имя, Истина);
	
КонецПроцедуры

//КутьяАА ITRR


&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
		
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	нсиРаботаСФормами.СократитьПробелыТекстовыхПолей(ТекущийОбъект);
	
	ТекущийОбъект.ТехническиеХарактеристики.Загрузить(ТехническиеХарактеристикиФорма.Выгрузить());
	Объект.ТехническиеХарактеристики.Загрузить(ТехническиеХарактеристикиФорма.Выгрузить());

	ЗаполнитьТехническиеХарактеристики();
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// + проверки характеристик
	нсиОбщегоНазначенияВызовСервера.ПроверитьТехническиеХарактеристики(Объект.ТехническиеХарактеристики, Отказ);
	
	//фыв++ в условие заходим до записи картинки в постоянное хранилище
	Если ЭтоАдресВременногоХранилища(СсылкаНаКартинку) Тогда
		Картинка=ПолучитьИзВременногоХранилища(СсылкаНаКартинку);
		ИмяВременногоФайла=ПолучитьИмяВременногоФайла(РасширениеФайла);
		Картинка.Записать(ИмяВременногоФайла);
		ТекущийОбъект.ДанныеКартинки=Новый ХранилищеЗначения(Новый Картинка(ИмяВременногоФайла));
		УдалитьКартинку = Ложь;
	КонецЕсли;
	
	Если УдалитьКартинку Тогда
	
		ТекущийОбъект.ДанныеКартинки=Новый ХранилищеЗначения(Неопределено);
	
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ПеренестиДублиКНовомуЭталону();
	
	Если ВедетсяОбработка Тогда 
		РегистрыСведений.нсиСтатусыОбработкиСправочников.УстановитьСтатусСправочника(ТекущийОбъект.Ссылка,
			Новый Структура("Пользователь,ОбработкаНачата", ПараметрыСеанса.ТекущийПользователь, Истина) );	
	КонецЕсли;	
	
КонецПроцедуры

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаСервереБезКонтекста
Функция ПолучитьСписокАвтоматическиСоздаваемыхЕдиниц()
	
	УстановитьПривилегированныйРежим(Истина);

	Возврат ХранилищеОбщихНастроек.Загрузить("СписокАвтоматическиСоздаваемыхЕдиниц",,,"ЭкспертНСИ");

КонецФункции // ПолучитьСписокАвтоматическиСоздаваемыхЕдиниц()

&НаСервереБезКонтекста
Функция ПолучитьГруппуМатериаловАвтоматическиСоздаваемыхЕдиниц()
	
	УстановитьПривилегированныйРежим(Истина);

	Возврат ХранилищеОбщихНастроек.Загрузить("ГруппаМатериалов",,,"ЭкспертНСИ");

КонецФункции // ПолучитьСписокАвтоматическиСоздаваемыхЕдиниц()

//КутьяАА ITRR
&НаСервереБезКонтекста
Функция СоздатьЕдиницуИзмерения(Владелец, ЕдиницаИзмерения, ТаблицаПроизводителей = Неопределено)
	
	ЕдиницаОбъект = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
	ЕдиницаОбъект.Наименование            = ЕдиницаИзмерения.Наименование;
	ЕдиницаОбъект.ЕдиницаПоКлассификатору = ЕдиницаИзмерения;
	ЕдиницаОбъект.Коэффициент = 1;
	ЕдиницаОбъект.Владелец                = Владелец;
	
	Если НЕ ТаблицаПроизводителей = Неопределено Тогда
	
		Для каждого СтрокаПроизводителя Из ТаблицаПроизводителей Цикл
		
			СтрокаТЧ = ЕдиницаОбъект.ЕдиницыПроизводителей.Добавить();
		    ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаПроизводителя);
			
		КонецЦикла; 
	
	КонецЕсли; 
	
	Попытка
		ЕдиницаОбъект.Записать();
	Исключение
		Сообщить("Не удалось записать единицу измерения: " + ЕдиницаИзмерения, СтатусСообщения.Важное);
		Сообщить(ОписаниеОшибки(), СтатусСообщения.Важное);
	КонецПопытки;

	Возврат ЕдиницаОбъект;
	
КонецФункции // СоздатьЕдиницу()

&НаСервере
Процедура СоздатьБазовуюЕдиницуИзмерения(Владелец, ЕдиницаИзмерения)

	Единица = Справочники.ЕдиницыИзмерения.НайтиПоРеквизиту("ЕдиницаПоКлассификатору", ЕдиницаИзмерения, ,Владелец);
	Если Единица.Пустая() Тогда
		
		ТаблицаПроизводителей = Единица.ЕдиницыПроизводителей.Выгрузить();
		Если Владелец.LocalMaterialType.ГотоваяПродукция Тогда
				
			Для каждого СтрокаGlobalID Из Объект.GlobalID Цикл
				СтрокаЕдПроизв = ТаблицаПроизводителей.Добавить();
				СтрокаЕдПроизв.Производитель = СтрокаGlobalID.Производитель;
				СтрокаЕдПроизв.Коэффициент = 1;
				СтрокаЕдПроизв.Объем = Справочники.нсиМТР.ОбъемДКЛ(Объект.LocalVolume, 1);
			КонецЦикла;
			
		КонецЕсли;
			
		СоздатьЕдиницуИзмерения(Владелец, ЕдиницаИзмерения, ТаблицаПроизводителей);
		
	КонецЕсли;
	

КонецПроцедуры // СоздатьБазовуюЕдиницуИзмерения()
 
// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервереБезКонтекста
Процедура ЗаполнитьЕдиницыПроизводителей(НайденнаяЕдиницаОбъект)
	
	Если НайденнаяЕдиницаОбъект.Владелец.LocalMaterialType.ГотоваяПродукция 
		И НайденнаяЕдиницаОбъект.Владелец.GlobalID.Количество() Тогда
		
		Для каждого СтрокаGlobalID Из НайденнаяЕдиницаОбъект.Владелец.GlobalID Цикл
			СтрокаПроизводителя = НайденнаяЕдиницаОбъект.ЕдиницыПроизводителей.Добавить();
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры // ЗаполнитьЕдиницыПроизводителей()
 
&НаСервере
Процедура СоздатьЕдиницыИзмеренияНаСервере()
	
	НастройкиЕдиницИзмерения = Справочники.LocalMaterialType.ПолучитьНастройку(Объект.LocalMaterialType);
	Если НЕ НастройкиЕдиницИзмерения = Неопределено Тогда
		Для каждого СтрокаЕдИзм Из НастройкиЕдиницИзмерения.Настройка.СписокЕдиниц Цикл
			
			Если ЗначениеЗаполнено(СтрокаЕдИзм.Единица) Тогда
				
				Единица = Справочники.ЕдиницыИзмерения.НайтиПоРеквизиту("ЕдиницаПоКлассификатору", СтрокаЕдИзм.Единица, ,Объект.Ссылка);
				Если Единица.Пустая() Тогда
					
					ТаблицаПроизводителей = Неопределено;
					Если Объект.LocalMaterialType.ГотоваяПродукция Тогда
						
						БазоваяЕдиница = Справочники.ЕдиницыИзмерения.НайтиПоРеквизиту("ЕдиницаПоКлассификатору", Объект.БазоваяЕдиницаИзмерения, ,Объект.Ссылка);
						БазоваяТаблицаПроизводителей = БазоваяЕдиница.ЕдиницыПроизводителей.Выгрузить();
						
						ТаблицаПроизводителей = БазоваяТаблицаПроизводителей.Скопировать();
						ТаблицаПроизводителей.Очистить();
						
						Для каждого СтрокаИсточник Из БазоваяТаблицаПроизводителей Цикл
							
							СтрокаПриемник = ТаблицаПроизводителей.Добавить();
							СтрокаПриемник.Производитель = СтрокаИсточник.Производитель;
							Если ЗначениеЗаполнено(СтрокаЕдИзм.ОбъемЛ) Тогда
								СтрокаПриемник.Коэффициент = СтрокаЕдИзм.ОбъемЛ/Объект.LocalVolume.SizeNumber;
								СтрокаПриемник.Вес = СтрокаПриемник.Коэффициент*СтрокаИсточник.Вес;
								СтрокаПриемник.Объем = СтрокаЕдИзм.ОбъемЛ/10;
							КонецЕсли; 
							
						КонецЦикла;
						
					КонецЕсли; 
					
					СоздатьЕдиницуИзмерения(Объект.Ссылка, СтрокаЕдИзм.Единица, ТаблицаПроизводителей);
					
				КонецЕсли;
				
			КонецЕсли; 
		КонецЦикла;
		
	КонецЕсли;
	
	Элементы.ЕдиницыИзмерения.Обновить();
	
КонецПроцедуры

//КутьяАА ITRR
&НаСервере
Процедура ПроверитьЕдиницуХраненияОстатков(ТекущийОбъект)

	Если ЗначениеЗаполнено(ТекущийОбъект.ЕдиницаХраненияОстатков) Тогда
		Возврат;
	КонецЕсли;

	ВыборкаЕдиниц = Справочники.ЕдиницыИзмерения.Выбрать(, ТекущийОбъект.Ссылка);
	Если ВыборкаЕдиниц.Следующий() Тогда
		НайденнаяЕдиница = ВыборкаЕдиниц.Ссылка;
	Иначе
		НайденнаяЕдиницаОбъект = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
		НайденнаяЕдиницаОбъект.Наименование            = ТекущийОбъект.БазоваяЕдиницаИзмерения.Наименование;
		НайденнаяЕдиницаОбъект.ЕдиницаПоКлассификатору = ТекущийОбъект.БазоваяЕдиницаИзмерения;
		НайденнаяЕдиницаОбъект.Коэффициент             = 1;
		НайденнаяЕдиницаОбъект.Владелец                = ТекущийОбъект.Ссылка;

		Попытка
			НайденнаяЕдиницаОбъект.Записать();
		Исключение
			Сообщить("Не удалось записать единицу хранения остатков: " + ОписаниеОшибки(), СтатусСообщения.Важное);
			//Отказ = Истина;
			Возврат;
		КонецПопытки;

		НайденнаяЕдиница = НайденнаяЕдиницаОбъект.Ссылка;
	КонецЕсли;
	
	ТекущийОбъект.ЕдиницаХраненияОстатков = НайденнаяЕдиница;
	Если НЕ ЗначениеЗаполнено(ТекущийОбъект.ЕдиницаДляОтчетов) Тогда
		ТекущийОбъект.ЕдиницаДляОтчетов = НайденнаяЕдиница;
	КонецЕсли; 
	
	ТекущийОбъект.Записать();
	
КонецПроцедуры // ПроверитьЕдиницуХраненияОстатков()

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	нсиВыделениеИзменений.ОформитьВыделениеИзменений(ЭтотОбъект);
	
//	КутьяАА ITRR <<
	УстановитьОтборыСвязанныхДанных();
	
	MDMСервер.ЗаписатьУчастниковОбмена(ЭтаФорма);
	MDMСервер.ДоступностьУчастниковОбмена(ЭтаФорма);
	
	УИ = Объект.Ссылка.УникальныйИдентификатор();
	Если НЕ GUID_MDM = УИ Тогда
		GUID_MDM = УИ;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ТекущийОбъект.БазоваяЕдиницаИзмерения) Тогда
		
		СоздатьБазовуюЕдиницуИзмерения(ТекущийОбъект.Ссылка,ТекущийОбъект.БазоваяЕдиницаИзмерения);
		
		Если ЗаполнитьЕдиницуПоНазначению("ЕдиницаХраненияОстатков", ТекущийОбъект.Ссылка) Тогда
			
			ЭтаФорма.Записать();
		
		КонецЕсли; 
				
		Элементы.ЕдиницыИзмерения.Обновить();
		
	КонецЕсли; 
//	>>
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьЕдиницуПоНазначению(НазначениеЕдИзм, Владелец)

	Заполнено = Ложь;
	Если НЕ ЗначениеЗаполнено(Владелец[НазначениеЕдИзм]) Тогда
		
		ЕдПоНазнКлсф = ПолучитьЕдиницуПоНазначению(НазначениеЕдИзм, Владелец.LocalMaterialType);
		
		Если НЕ ЕдПоНазнКлсф = Неопределено Тогда
			
			ЕдПоНазн = Справочники.ЕдиницыИзмерения.НайтиПоРеквизиту("ЕдиницаПоКлассификатору", ЕдПоНазнКлсф, ,Владелец);
			Если НЕ ЕдПоНазн.Пустая() Тогда
				
				Объект[НазначениеЕдИзм] = ЕдПоНазн;
				Заполнено = Истина;
				
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Заполнено;
	
КонецФункции // ЗаполнитьЕдиницуХраненияОстатков()

&НаСервере
Функция ПолучитьЕдиницуПоНазначению(НазначениеЕдИзм, ТипМатериалов)

	ЗначениеВозврата = Неопределено;
	
	НастройкиЕдиницИзмерения = Справочники.LocalMaterialType.ПолучитьНастройку(ТипМатериалов);
	Если НЕ НастройкиЕдиницИзмерения = Неопределено Тогда
		СтрокаНазначенияЕд = НастройкиЕдиницИзмерения.Настройка.НазначениеЕдиниц.Найти(НазначениеЕдИзм, "Назначение");
		Если НЕ СтрокаНазначенияЕд = Неопределено
			И ЗначениеЗаполнено(СтрокаНазначенияЕд.ЕдиницаПоКлассификатору) Тогда
			
			ЗначениеВозврата = СтрокаНазначенияЕд.ЕдиницаПоКлассификатору;
			
		КонецЕсли; 
	КонецЕсли;
	
	Возврат ЗначениеВозврата;

КонецФункции // ПолучитьЕдиницуПоНазначению()
 

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
	    ОбновитьЭлементыДополнительныхРеквизитов();
	    УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Модифицированность тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект),
			"Данные были изменены. Сохранить изменения?", 
			РежимДиалогаВопрос.ДаНетОтмена);		
			
		Отказ = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да тогда
		ЗаполнениеНаименованийПоШаблонуКласса(Истина);
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если Объект.ЭтоМакет Тогда 
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("Запись макета элемента справочника ""МТР""");
	Иначе
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("Запись элемента справочника ""МТР""");
	КонецЕсли;
	
	//MOD Кутья АА
	Если НЕ ЗначениеЗаполнено(Объект.ОсновнойПроизводитель) Тогда
		
		Если Объект.GlobalID.Количество() = 1 
			И ЗначениеЗаполнено(Объект.GlobalID[0].Производитель) Тогда
			
			Объект.ОсновнойПроизводитель = Объект.GlobalID[0].Производитель;
			
		ИначеЕсли Объект.GlobalID.Количество() > 1 Тогда
			
			Отказ = Истина;
			Сообщить("Необходимо задать основного производителя!");
			
		КонецЕсли; 
		
	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДистрибьюторВидимость()

	Элементы.Дистрибьютор.Видимость = Объект.алкЭкспорт;

КонецПроцедуры // ДистрибьюторВидимость()

&НаКлиенте
Процедура ФактическийПроизводительВидимость()

	Элементы.ФактическийПроизводитель.Видимость = Объект.алкИмпорт;

КонецПроцедуры // ФактическийПроизводительВидимость()
 
&НаКлиенте
Процедура алкЭкспортПриИзменении(Элемент)
	ДистрибьюторВидимость();
КонецПроцедуры

&НаКлиенте
Процедура алкИмпортПриИзменении(Элемент)
	ФактическийПроизводительВидимость();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТипПозицииПриИзменении(Элемент)
	
	УправлениеВидимостьюИДоступом();
	
КонецПроцедуры

&НаКлиенте
Процедура КлассПриИзменении(Элемент)
	
	ЗаполнитьТехническиеХарактеристики();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.ПолноеНаименование) Тогда 
		Объект.ПолноеНаименование = ""+Объект.Наименование;
	КонецЕсли;
	
	ЗаполнитьСписокНаименованийКлиент();
	
	ВидимостьКнопкиПроверкиОрфографии(Элемент.Имя);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подключаемый_ПоказатьОтличия(Команда)
	
	ПараметрыСравненияТаблиц = ВыделениеИзменений_ПараметрыСравненияТаблиц(Команда.Имя);
	
	Если ПараметрыСравненияТаблиц = Неопределено тогда
		Возврат
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.нсиФормаСравненияТабличныхЧастей", ПараметрыСравненияТаблиц, ЭтаФорма);
	
КонецПроцедуры	

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
    УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ЗаписатьНаКлиенте(Команда)
	
	ЗаполнениеНаименованийПоШаблонуКласса();		
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрытьНаКлиенте(Команда)
	
	ЗаполнениеНаименованийПоШаблонуКласса(Истина);	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ВыделениеИзменений_ПараметрыСравненияТаблиц(ИмяКоманды)
	Возврат нсиВыделениеИзменений.ПараметрыСравненияТаблиц(ЭтотОбъект, ИмяКоманды);
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСписокНаименованийКлиент()
	Элементы.ПолноеНаименование.СписокВыбора.Очистить();
	Элементы.ПолноеНаименование.СписокВыбора.Добавить(""+Объект.Наименование);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокНаименованийСервер()
	Элементы.ПолноеНаименование.СписокВыбора.Очистить();
	Элементы.ПолноеНаименование.СписокВыбора.Добавить(""+Объект.Наименование);
КонецПроцедуры

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
    УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Процедура УправлениеВидимостьюИДоступом()
	
	Элементы.ЭталоннаяПозиция.Доступность = 
		(Объект.ТипПозиции = Перечисления.нсиТипыПозицийСправочников.ДублирующаяПозиция);
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьТехническиеХарактеристики()
	
	пЭтотОбъект = РеквизитФормыВЗначение("Объект");
	ХарактеристикиОбновлены = пЭтотОбъект.ПроверитьЗаполнитьТехническиеХарактеристики();
	ЗначениеВРеквизитФормы(пЭтотОбъект, "Объект"); 
	//Если ХарактеристикиОбновлены Тогда 
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Обновлены технические характеристики.");
	//КонецЕсли;	
	
	ОбновитьТехническиеХарактеристикиНаФорме();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНаименованиеПоШаблонуНаСервере()
	Возврат нсиФормированиеНаименований.ПолучитьНаименованиеПоШаблону(ЭтотОбъект)
КонецФункции	
	
&НаКлиенте
Процедура ЗаполнениеНаименованийПоШаблонуКласса(Закрыть = Ложь)
	
	стрНаименования = ПолучитьНаименованиеПоШаблонуНаСервере(); 	
	
	Если Не ЗначениеЗаполнено(Объект.Наименование) тогда
		Объект.Наименование = стрНаименования.Наименование;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.ПолноеНаименование) тогда
		Объект.ПолноеНаименование = стрНаименования.ПолноеНаименование;	
	КонецЕсли;	
	
	ПараметрыВопроса = Новый Структура;
	ПараметрыВопроса.Вставить("Закрыть",  Закрыть);
	
	ЧастиТекстаВопроса = Новый Массив;
	Если ЗначениеЗаполнено(Объект.Наименование)
		И ЗначениеЗаполнено(стрНаименования.Наименование)
		И Не Объект.Наименование = стрНаименования.Наименование тогда
		ЧастиТекстаВопроса.Добавить("наименование """+стрНаименования.Наименование+"""");
		
		ПараметрыВопроса.Вставить("Наименование", стрНаименования.Наименование);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.ПолноеНаименование)
		И ЗначениеЗаполнено(стрНаименования.ПолноеНаименование)
		И Не Объект.ПолноеНаименование = стрНаименования.ПолноеНаименование тогда
		ЧастиТекстаВопроса.Добавить("полное наименование """+стрНаименования.ПолноеНаименование+"""");
		
		ПараметрыВопроса.Вставить("ПолноеНаименование", стрНаименования.ПолноеНаименование);
	КонецЕсли;	
	
	Если ЧастиТекстаВопроса.ВГраница() > -1 тогда
		ТекстВопроса = "Установить " + ЧастиТекстаВопроса[0];
		Для Инд = 1 по ЧастиТекстаВопроса.ВГраница()  цикл
			ТекстВопроса = ТекстВопроса + " и " + ЧастиТекстаВопроса[Инд];
		КонецЦикла;	
		ТекстВопроса = ТекстВопроса + " согласно шаблону?";
		
        ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнениеНаименованийПоШаблонуКлассаЗавершение", ЭтотОбъект, ПараметрыВопроса);
        ПоказатьВопрос(ОписаниеОповещения, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1'"), ТекстВопроса), РежимДиалогаВопрос.ДаНет);
	Иначе 
		ЗаполнениеНаименованийПоШаблонуКлассаЗавершение(КодВозвратаДиалога.Нет, ПараметрыВопроса);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеНаименованийПоШаблонуКлассаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ДополнительныеПараметры.Свойство("Наименование") тогда
			НаименованиеДоИзменения = Объект.Наименование;
			ЗаполнитьЗначенияСвойств(Объект, ДополнительныеПараметры);
			Если НЕ Объект.Наименование = ДополнительныеПараметры.Наименование тогда
				Объект.Наименование = НаименованиеДоИзменения;
				Если ДополнительныеПараметры.Закрыть тогда
					ПоказатьОповещениеПользователя("Информация:",,"Установка наименования по шаблону не выполнена: превышена максимальная длина строки.");	
				Иначе 
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Установка наименования по шаблону не выполнена: превышена максимальная длина строки.");
				КонецЕсли;	
			КонецЕсли;	
		Иначе 
			ЗаполнитьЗначенияСвойств(Объект, ДополнительныеПараметры);
		КонецЕсли;	
	КонецЕсли;
	
	ЗаполнитьСписокНаименованийКлиент();
	
	Записать();
	
	Если ДополнительныеПараметры.Закрыть тогда
		Закрыть();
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьТехническиеХарактеристикиНаФорме()
	
	// Читаем данные не с записанного объекта а с текущего объекта,
	// т.к. при открытии технические характеристики могли быть восстановлены.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
					|	Тех.Характеристика,	
					|	Тех.Значение	
					|ПОМЕСТИТЬ ТекущиеХарактеристики
					|ИЗ
					|	&ТехническиеХарактеристики КАК Тех
					|;
					|ВЫБРАТЬ
					|	ТекущиеХарактеристики.Характеристика КАК Характеристика,
					|	ТекущиеХарактеристики.Значение КАК Значение,
					|	ТекущиеХарактеристики.Характеристика.ПометкаУдаления КАК ХарактеристикаПометкаУдаления
					|ИЗ
					|	ТекущиеХарактеристики КАК ТекущиеХарактеристики
					|УПОРЯДОЧИТЬ ПО
					|	ТекущиеХарактеристики.Характеристика.ПорядокСортировки ВОЗР,
					|	ТекущиеХарактеристики.Характеристика.Наименование ВОЗР";
	Запрос.УстановитьПараметр("ТехническиеХарактеристики", Объект.ТехническиеХарактеристики.Выгрузить());
	рез = Запрос.Выполнить();
	Если не рез.Пустой() Тогда
		ТехническиеХарактеристикиФорма.Загрузить(рез.Выгрузить());
	Иначе 	
		ТехническиеХарактеристикиФорма.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТехническиеХарактеристикиФормаПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТехническиеХарактеристикиФормаХарактеристикаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Ключ", Элементы.ТехническиеХарактеристикиФорма.ТекущиеДанные.Характеристика);
	ПараметрыОткрытия.Вставить("БезРедактирования", Истина);
	
	ОткрытьФорму("ПланВидовХарактеристик.нсиХарактеристикиМТР.Форма.ФормаЭлемента",ПараметрыОткрытия,ЭтаФорма);	
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАвтоматическиСоздаваемыхЕдиниц(Команда)
	ОткрытьФорму("Справочник.нсиМТР.Форма.ФормаСписокАвтоматическиСоздаваемыхЕдиниц",,ЭтаФорма,ЭтаФорма.УникальныйИдентификатор,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ЭтаФорма.Прочитать();
	
	Оповестить("ОбновитьСписокПослеЗаписи");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводительСделатьОсновным(Команда)
	
	Если Элементы.GlobalID.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Элементы.GlobalID.ТекущиеДанные.Производитель) Тогда
		Возврат;
	КонецЕсли;

	Если Объект.ОсновнойПроизводитель = Элементы.GlobalID.ТекущиеДанные.Производитель Тогда
		Объект.ОсновнойПроизводитель = Неопределено;
	Иначе
		Объект.ОсновнойПроизводитель = Элементы.GlobalID.ТекущиеДанные.Производитель;
	КонецЕсли;
	
	ПроверитьПометкуКнопкиУстановкиОсновногоПроизводителя();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПометкуКнопкиУстановкиОсновногоПроизводителя()

	Если Элементы.GlobalID.ТекущиеДанные = Неопределено Тогда
		Элементы.GlobalIDПроизводительСделатьОсновным.Доступность = Ложь;
		Элементы.GlobalIDПроизводительСделатьОсновным.Пометка     = Ложь;
	Иначе
		Элементы.GlobalIDПроизводительСделатьОсновным.Доступность = Истина;
		Элементы.GlobalIDПроизводительСделатьОсновным.Пометка     = Элементы.GlobalID.ТекущиеДанные.Производитель = Объект.ОсновнойПроизводитель;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура GlobalIDПриАктивизацииСтроки(Элемент)
	ПроверитьПометкуКнопкиУстановкиОсновногоПроизводителя();
КонецПроцедуры

//фыв++ работаем с картинкой
&НаКлиенте
Процедура ВыбратьКартинку(Команда)
	
	//пользуем такой вызов диалога и помещения картинки во временное хранилище
	Оповещение=Новый ОписаниеОповещения("ОбработатьВыборФайла",ЭтотОбъект);
	НачатьПомещениеФайла(Оповещение,,,Истина,УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборФайла(Результат,Адрес,ВыбранноеИмяФайла,ДополнительныеПараметры) Экспорт
	
	//проверим, выбрал ли пользователь файл
	Если НЕ Результат Тогда
		Возврат;
	КонецЕсли;
	
	//указываем реквизиту на адрес врем.хранилища с картинкой
	СсылкаНаКартинку=Адрес;
	РасширениеФайла=Прав(ВыбранноеИмяФайла,СтрДлина(ВыбранноеИмяФайла)-Найти(ВыбранноеИмяФайла,"."));
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиОбменаПриИзменении(Элемент)
	//КутьяАА ITRR
	Если Элемент.ТекущийЭлемент.Имя = "УчастникиОбменаОбмен" Тогда
		Модифицированность = Истина;
	КонецЕсли; 
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗапросGlobalIDНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ЗапросGlobalID(Команда)
	
	Если Параметры.Ключ.Пустая()
		ИЛИ Модифицированность Тогда
		Сообщить("Перед запросом Global SKU необходимо записать объект.", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеGlobalID = Элементы.GlobalID.ТекущиеДанные;
	
	Если ТекущиеДанныеGlobalID = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	GlobalSKU = ТекущиеДанныеGlobalID.GlobalSKU;
	LocalFactory = ТекущиеДанныеGlobalID.ПроизводительИмпортерАтрибут;
	
	Если НЕ ЗначениеЗаполнено(LocalFactory) Тогда
		Сообщить("Запрос не может быть выполнен. Не заполнен производитель-импортер (атрибут).", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(GlobalSKU) Тогда
		Если GlobalSKU.State = ПредопределенноеЗначение("Перечисление.States.InProgress") Тогда
			Сообщить("По данному элементу уже выполняется запрос. Статус In Progress.", СтатусСообщения.Важное);
			Возврат;
		ИначеЕсли GlobalSKU.State = ПредопределенноеЗначение("Перечисление.States.Rejected") Тогда
			Сообщить("По данному элементу запрос был отклонен. Статус Rejected.", СтатусСообщения.Важное);
			Возврат;
		ИначеЕсли GlobalSKU.State = ПредопределенноеЗначение("Перечисление.States.Approved") Тогда
			ОткрытьФорму("Справочник.GlobalSKU.ФормаОбъекта",,ЭтаФорма,,,,Новый ОписаниеОповещения("ПриЗакрытииФормыGlobalSKU",ЭтаФорма));
		ИначеЕсли GlobalSKU.State = ПредопределенноеЗначение("Перечисление.States.ToCorrection") Тогда
			ЗаполнитьАтрибутыИОткрытьФорму(Объект.Ссылка, LocalFactory);
		КонецЕсли; 
	Иначе
		ЗаполнитьАтрибутыИОткрытьФорму(Объект.Ссылка, LocalFactory);
	КонецЕсли;
		
	//ЗапросGlobalIDНаСервере();
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ЗаполнитьАтрибутыИОткрытьФорму(LocalSKU, LocalFactory)

	СтруктураGlobalSKU = СтруктураСоответствияАтрибутовGlobal(LocalSKU, LocalFactory);
	
	ПараметрыДляФормы = Новый Структура;
	ПараметрыДляФормы.Вставить("СтруктураGlobalSKU", СтруктураGlobalSKU);
	ОткрытьФорму("Справочник.GlobalSKU.ФормаОбъекта",ПараметрыДляФормы,ЭтаФорма,,,,Новый ОписаниеОповещения("ПриЗакрытииФормыGlobalSKU",ЭтаФорма));

КонецПроцедуры // ЗаполнитьАтрибутыИОткрытьФорму()
 
&НаКлиенте
Процедура ПриЗакрытииФормыGlobalSKU(Ответ, ДополнительныеПараметры) Экспорт 

	Если Ответ = Неопределено Тогда
	
		
	
	Иначе
	
		
	
	КонецЕсли; 

КонецПроцедуры // ПриЗакрытииФормыGlobalSKU()
 

&НаСервереБезКонтекста
Функция СтруктураСоответствияАтрибутовGlobal(НоменклатураСсылка, LocalFactory)
	
	СтруктураGlobalSKU = Новый Структура;
	
	СтруктураGlobalSKU.Вставить("LocalName", НоменклатураСсылка.НаименованиеEN);
	СтруктураGlobalSKU.Вставить("LocalID", НоменклатураСсылка.Код);
	
	СтруктураGlobalSKU.Вставить("Brand", Справочники.GlobalBrand.ПустаяСсылка());
	СтруктураGlobalSKU.Вставить("MaterialType", Справочники.GlobalMaterialType.ПустаяСсылка());
	СтруктураGlobalSKU.Вставить("Factory", Справочники.GlobalFactory.ПустаяСсылка());
	СтруктураGlobalSKU.Вставить("Packing", Справочники.GlobalPacking.ПустаяСсылка());
	СтруктураGlobalSKU.Вставить("AlcoholContent", Справочники.GlobalAlcoholContent.ПустаяСсылка());
	СтруктураGlobalSKU.Вставить("Amount", Справочники.GlobalAmount.ПустаяСсылка());
	СтруктураGlobalSKU.Вставить("Volume", Справочники.GlobalVolume.ПустаяСсылка());
	СтруктураGlobalSKU.Вставить("Label", Справочники.GlobalLabel.ПустаяСсылка());
	СтруктураGlobalSKU.Вставить("Version", 0);

	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаСоответствияGlobal();
	
	Запрос.УстановитьПараметр("Бренд", НоменклатураСсылка.LocalBrand);
	Запрос.УстановитьПараметр("РазновидностьВкус", НоменклатураСсылка.РазновидностьВкус);
	Запрос.УстановитьПараметр("LocalMaterialType", НоменклатураСсылка.LocalMaterialType);
	Запрос.УстановитьПараметр("LocalAlcoholContent", НоменклатураСсылка.LocalAlcoholContent);
	Запрос.УстановитьПараметр("LocalAmount", НоменклатураСсылка.LocalAmount);
	Запрос.УстановитьПараметр("LocalFactory", LocalFactory);
	Запрос.УстановитьПараметр("LocalLabel", НоменклатураСсылка.LocalLabel);
	Запрос.УстановитьПараметр("LocalPacking", НоменклатураСсылка.LocalPacking);
	Запрос.УстановитьПараметр("LocalVersion", НоменклатураСсылка.LocalVersion);
	Запрос.УстановитьПараметр("LocalVolume", НоменклатураСсылка.LocalVolume);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	Для каждого РезультатЗапроса Из РезультатыЗапроса Цикл
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(СтруктураGlobalSKU, ВыборкаДетальныеЗаписи);
		КонецЦикла;
	КонецЦикла;
	
	Возврат СтруктураGlobalSKU;
	
КонецФункции // СтруктураСоответствияКлючевыхАтрибутов()
 
&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаСоответствияGlobal()

	Возврат 
		"ВЫБРАТЬ
		|	СоответствиеБрэндовИРазновидностейВкусов.GlobalBrand КАК Brand
		|ИЗ
		|	РегистрСведений.СоответствиеБрэндовИРазновидностейВкусов КАК СоответствиеБрэндовИРазновидностейВкусов
		|ГДЕ
		|	СоответствиеБрэндовИРазновидностейВкусов.Бренд = &Бренд
		|	И СоответствиеБрэндовИРазновидностейВкусов.РазновидностьВкус = &РазновидностьВкус
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СоответствиеТипыМатериалов.Global КАК MaterialType
		|ИЗ
		|	РегистрСведений.СоответствиеТипыМатериалов КАК СоответствиеТипыМатериалов
		|ГДЕ
		|	СоответствиеТипыМатериалов.Local = &LocalMaterialType
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СоответствиеПроизводителиИмпортеры.Global КАК Factory
		|ИЗ
		|	РегистрСведений.СоответствиеПроизводителиИмпортеры КАК СоответствиеПроизводителиИмпортеры
		|ГДЕ
		|	СоответствиеПроизводителиИмпортеры.Local = &LocalFactory
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СоответствиеМатериалыИФормыТары.Global КАК Packing
		|ИЗ
		|	РегистрСведений.СоответствиеМатериалыИФормыТары КАК СоответствиеМатериалыИФормыТары
		|ГДЕ
		|	СоответствиеМатериалыИФормыТары.Local = &LocalPacking
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СоответствиеКрепости.Global КАК AlcoholContent
		|ИЗ
		|	РегистрСведений.СоответствиеКрепости КАК СоответствиеКрепости
		|ГДЕ
		|	СоответствиеКрепости.Local = &LocalAlcoholContent
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СоответствиеТипУпаковки.Global КАК Amount
		|ИЗ
		|	РегистрСведений.СоответствиеТипУпаковки КАК СоответствиеТипУпаковки
		|ГДЕ
		|	СоответствиеТипУпаковки.Local = &LocalAmount
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СоответствиеОбъемы.Global КАК Volume
		|ИЗ
		|	РегистрСведений.СоответствиеОбъемы КАК СоответствиеОбъемы
		|ГДЕ
		|	СоответствиеОбъемы.Local = &LocalVolume
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СоответствиеРегионыСбыта.Global КАК Label
		|ИЗ
		|	РегистрСведений.СоответствиеРегионыСбыта КАК СоответствиеРегионыСбыта
		|ГДЕ
		|	СоответствиеРегионыСбыта.Local = &LocalLabel
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СоответствиеМодификацииВерсии.Global КАК Version
		|ИЗ
		|	РегистрСведений.СоответствиеМодификацииВерсии КАК СоответствиеМодификацииВерсии
		|ГДЕ
		|	СоответствиеМодификацииВерсии.Local = &LocalVersion";

КонецФункции // ПолучитьТекстЗапросаСоответствияGlobal()

&НаКлиенте
Процедура ПроверкаОрфографии(Команда)
	
	ИмяРеквизита = СтрЗаменить(Команда.Имя, "ПроверкаОрфографии","");
	ОткрытьФорму("Обработка.ПроверкаПравописанияЯндексСпеллера.Форма", Новый Структура("ТекстДляПроверки", Объект[ИмяРеквизита]),,,,,Новый ОписаниеОповещения("ОкончаниеПроверкиОрфографии",ЭтаФорма,ИмяРеквизита));
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура УстановитьВидимостьКнопокПроверкиОрфографии()

	МассивИменРеквизитов = Новый Массив;
	МассивИменРеквизитов.Добавить("Наименование");
	МассивИменРеквизитов.Добавить("НаименованиеПолное");
	МассивИменРеквизитов.Добавить("алкСоставПродукта");
	МассивИменРеквизитов.Добавить("алкУсловияТранспортирования");
	МассивИменРеквизитов.Добавить("ПищеваяЦенность");
	МассивИменРеквизитов.Добавить("Цвет");
	МассивИменРеквизитов.Добавить("Аромат");
	МассивИменРеквизитов.Добавить("Букет");
	МассивИменРеквизитов.Добавить("ВнешнийВид");
	
	Для каждого ИмяРеквизита Из МассивИменРеквизитов Цикл
	
		ВидимостьКнопкиПроверкиОрфографии(ИмяРеквизита);
	
	КонецЦикла; 

КонецПроцедуры // УстановитьВидимостьКнопокПроверкиОрфографии()
 
&НаКлиенте
Процедура ВидимостьКнопкиПроверкиОрфографии(ИмяЭлемента)

	//Элементы["ПроверкаОрфографии"+ИмяЭлемента].Видимость = ЗначениеЗаполнено(СокрЛП(Объект[ИмяЭлемента]));
	
КонецПроцедуры // ВидимостьКнопкиПроверкиОрфографии()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ОкончаниеПроверкиОрфографии(Ответ, ДополнительныеПараметры) Экспорт 

	Если НЕ Ответ = Неопределено Тогда
		ОтветТекст = СокрЛП(Ответ.ТекстHTML);
		Если НЕ Объект[ДополнительныеПараметры] = ОтветТекст Тогда
			Объект[ДополнительныеПараметры] = ОтветТекст;
			Модифицированность = Истина;
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры // ОкончаниеПроверкиОрфографии()
 
&НаКлиенте
Процедура НаименованиеПолноеПриИзменении(Элемент)
	ВидимостьКнопкиПроверкиОрфографии(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура алкСоставПродуктаПриИзменении(Элемент)
	ВидимостьКнопкиПроверкиОрфографии(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура алкУсловияТранспортированияПриИзменении(Элемент)
	ВидимостьКнопкиПроверкиОрфографии(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ПищеваяЦенностьПриИзменении(Элемент)
	ВидимостьКнопкиПроверкиОрфографии(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ЦветПриИзменении(Элемент)
	ВидимостьКнопкиПроверкиОрфографии(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура АроматПриИзменении(Элемент)
	ВидимостьКнопкиПроверкиОрфографии(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура БукетПриИзменении(Элемент)
	ВидимостьКнопкиПроверкиОрфографии(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ВнешнийВидПриИзменении(Элемент)
	ВидимостьКнопкиПроверкиОрфографии(Элемент.Имя);
КонецПроцедуры

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаКлиенте
Процедура ПроверкаУникальностиСтроки(Организация,Поставщик,СтандартнаяОбработка)
	
	Ключ = Новый Структура("Организация,Поставщик",Организация,Поставщик);
	МассивСтрок = Объект.Поставщики.НайтиСтроки(Ключ);
	Если МассивСтрок.Количество()>0 Тогда
		СтандартнаяОбработка = Ложь;
		Сообщить("Выбор значения нарушает уникальность записей.",СтатусСообщения.Важное);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьСтрокуНаУникальность()

&НаКлиенте
Процедура ПоставщикиОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПроверкаУникальностиСтроки(ВыбранноеЗначение,Элементы.Поставщики.ТекущиеДанные.Поставщик, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ПоставщикиПоставщикОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПроверкаУникальностиСтроки(Элементы.Поставщики.ТекущиеДанные.Организация, ВыбранноеЗначение, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ПоставщикиОсновнойПоставщикПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Поставщики.ТекущиеДанные;
	
	Ключ = Новый Структура("Организация,ОсновнойПоставщик",ТекущиеДанные.Организация,Истина);
	МассивСтрок = Объект.Поставщики.НайтиСтроки(Ключ);
	Для каждого СтрокаМассива Из МассивСтрок Цикл
		
		Если НЕ СтрокаМассива.НомерСтроки = ТекущиеДанные.НомерСтроки
			И СтрокаМассива.ОсновнойПоставщик Тогда
			
			СтрокаМассива.ОсновнойПоставщик = Ложь;
			
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Копирование;
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкиСЭДСсылкаСЭДОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	
	ПерейтиПоСсылкеСЭД(Команды["ПерейтиПоСсылкеСЭД"]);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиПоСсылкеСЭД(Команда)
	
	MDMКлиент.ПерейтиПоСсылкеСЭД(Элементы.СсылкиСЭД.ТекущиеДанные.СсылкаСЭД);
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура СобытиеПриИзменениеПроизводителя(ВыбранноеЗначение = Неопределено)

	Если Элементы.GlobalID.ТекущиеДанные.Производитель = Объект.ОсновнойПроизводитель
		И НЕ Элементы.GlobalID.ТекущиеДанные.Производитель = ВыбранноеЗначение
		И НЕ Объект.ОсновнойПроизводитель = Неопределено Тогда
		Объект.ОсновнойПроизводитель = Неопределено;
		Сообщить("Основной производитель был сброшен.",СтатусСообщения.Внимание);
	КонецЕсли;
	
	ПроверитьПометкуКнопкиУстановкиОсновногоПроизводителя();

КонецПроцедуры // СобытиеПриИзменениеПроизводителя()
 
&НаКлиенте
Процедура GlobalIDПроизводительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СобытиеПриИзменениеПроизводителя(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура GlobalIDПроизводительОчистка(Элемент, СтандартнаяОбработка)
	
	СобытиеПриИзменениеПроизводителя();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЕдиницыИзмерения(Команда)
	
	Если Модифицированность	
		ИЛИ Параметры.Ключ.Пустая() Тогда
		
		Сообщить("Действие не выполнено! Перед созданием единиц измерения необходимо записать элемент.", СтатусСообщения.Важное);
	Иначе
		СоздатьЕдиницыИзмеренияНаСервере();
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЕдиницыПоНазначениюНаСервере()
	
	НастройкиЕдиницИзмерения = Справочники.LocalMaterialType.ПолучитьНастройку(Объект.LocalMaterialType);
	Если НЕ НастройкиЕдиницИзмерения = Неопределено Тогда
		Для каждого СтрокаЕдиницыНазначения Из НастройкиЕдиницИзмерения.Настройка.НазначениеЕдиниц Цикл
			
			Если ЗначениеЗаполнено(СтрокаЕдиницыНазначения.Назначение) 
				И ЗначениеЗаполнено(СтрокаЕдиницыНазначения.ЕдиницаПоКлассификатору) 
				И НЕ ЗначениеЗаполнено(Объект[СтрокаЕдиницыНазначения.Назначение]) Тогда
				
				Единица = Справочники.ЕдиницыИзмерения.НайтиПоРеквизиту("ЕдиницаПоКлассификатору", СтрокаЕдиницыНазначения.ЕдиницаПоКлассификатору, ,Объект.Ссылка);
				Если НЕ Единица.Пустая() Тогда
				
					Объект[СтрокаЕдиницыНазначения.Назначение] = Единица;
					Модифицированность = Истина;
					
				КонецЕсли;
				
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;
	
	Если Модифицированность Тогда
		ЭтаФорма.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЕдиницыПоНазначению(Команда)
	ЗаполнитьЕдиницыПоНазначениюНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура УдалитьКартинку(Команда)
	УдалитьКартинку = Истина;
	СсылкаНаКартинку = "";
	Модифицированность = Истина;
КонецПроцедуры
 
#КонецОбласти



