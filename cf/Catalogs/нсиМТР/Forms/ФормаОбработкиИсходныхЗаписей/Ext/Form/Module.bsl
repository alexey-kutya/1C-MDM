#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Обработчик подсистемы "Сравнение данных"
	ИмяСправочника 										= "нсиМТР"; 
	ПроцентСовпадения 									= 100;
	Элементы.ГруппаПоискаОбработанные.Видимость 		= Ложь;
	Элементы.ГруппаПоискаЗагруженные.Видимость 			= Ложь;
	Элементы.ГруппаКлассификаторПродукции.Видимость 	= Ложь;
	Элементы.ГруппаДополнительныеКлассификаторы.Видимость = Ложь;
	Элементы.ГруппаПолнотекстовогоПоискаОбработанные.Видимость 	= Ложь;
	Элементы.ГруппаПолнотекстовогоПоискаЗагруженные.Видимость 	= Ложь;
	
	СписокОбработанных.Параметры.УстановитьЗначениеПараметра("СсылкаНеОпределена", 	Истина);
	СписокОбработанных.Параметры.УстановитьЗначениеПараметра("Ссылка", Null);
	нсиСравнениеДанныхСервер.ЗаполнениеКомпоновщикаНастроек(ИмяСправочника, 
		АдресКомпоновкиОбработанные, КомпоновщикНастроекОбработанные, ЭтаФорма.УникальныйИдентификатор);
	нсиСравнениеДанныхСервер.УстановитьПользователяВПараметрыИОформление(СписокОбработанных);  	
	СписокЗагруженных.Параметры.УстановитьЗначениеПараметра("СсылкаНеОпределена", 	Истина);
	СписокЗагруженных.Параметры.УстановитьЗначениеПараметра("Ссылка", Null);
	нсиСравнениеДанныхСервер.ЗаполнениеКомпоновщикаНастроек(ИмяСправочника, 
		АдресКомпоновкиЗагруженные, КомпоновщикНастроекЗагруженные, ЭтаФорма.УникальныйИдентификатор);
	нсиСравнениеДанныхСервер.УстановитьПользователяВПараметрыИОформление(СписокЗагруженных);  	
	нсиСравнениеДанныхСервер.УстановитьПользователяВПараметрыИОформление(СписокБуфера);
	
	нсиРаботаСФормами.ОтборВСпискеПоЗначению(ЭтаФорма.ДополнительныеКлассификаторы.Отбор.Элементы, 
		"Владелец", ВидДопКлассификатора);
		
	Если ЗначениеЗаполнено(Параметры.РежимРаботы) Тогда 
		РежимРаботы 	= Параметры.РежимРаботы;
	Иначе 
		РежимРаботы 	= "Комплексная работа с записями";
	КонецЕсли;
	
	// @Комментарий: Вызовем процедуру установки функциональных опций.
	нсиРаботаСФормамиСервер.УправлениеВидимостьюОбработкиЗаявок(ЭтаФорма);
	
	ЦветаВизуализации = нсиРаботаСФормамиСервер.ПолучитьЦветаВизуализации();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РежимРаботыПриИзменении(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
// Процедура - устанавливает выбранную строку эталонной записью.
//
Процедура ВыбратьЭталонной(Команда)

	Если ЭтаФорма.ТекущийЭлемент = Элементы.СписокОбработанных Тогда 
		Если Не Элементы.СписокОбработанных.ВыделенныеСтроки.Количество() = 0 Тогда 
			ЭталоннаяЗапись = Элементы.СписокОбработанных.ВыделенныеСтроки[0];
		КонецЕсли;  		
	ИначеЕсли ЭтаФорма.ТекущийЭлемент = Элементы.СписокБуфера Тогда  		
		Если Не Элементы.СписокБуфера.ВыделенныеСтроки.Количество() = 0 Тогда 
			ЭталоннаяЗапись = Элементы.СписокБуфера.ВыделенныеСтроки[0];
		КонецЕсли;          		
	ИначеЕсли ЭтаФорма.ТекущийЭлемент = Элементы.СписокЗагруженных Тогда  		
		Если Не Элементы.СписокЗагруженных.ВыделенныеСтроки.Количество() = 0 Тогда 
			ЭталоннаяЗапись = Элементы.СписокЗагруженных.ВыделенныеСтроки[0];
		КонецЕсли;          		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
// Процедура - создается копия эталонной записи, устанавливается как эталон для выделенных.
//
Процедура СоздатьЭталон(Команда)
	
	ВыделенныеСтроки = Новый СписокЗначений;
	ВыделенныеСтроки.ЗагрузитьЗначения(Элементы.СписокБуфера.ВыделенныеСтроки);
	ЭталоннаяЗапись = нсиОбработкаИсходныхЗаписей.СоздатьЭталонНаСервере(
		Элементы.СписокБуфера.ТекущаяСтрока, ВыделенныеСтроки, ИмяСправочника);	
	
	ЭтаФорма.Элементы.СписокБуфера.Обновить();
	
КонецПроцедуры

&НаКлиенте
// Процедура - признает эталонную запись как эталон.
//
Процедура ПодтвердитьЭталон(Команда)
	
	ВыделенныеСтроки = Новый СписокЗначений;
	ВыделенныеСтроки.ЗагрузитьЗначения(Элементы.СписокБуфера.ВыделенныеСтроки);
	нсиОбработкаИсходныхЗаписей.ПодтвердитьЭталонНаСервере(ЭталоннаяЗапись, ВыделенныеСтроки, ИмяСправочника);
	
	ЭтаФорма.Элементы.СписокБуфера.Обновить();
	
КонецПроцедуры

&НаКлиенте
// Команда - отбирает записи по пользователю (захваченные в буфер).
//
Процедура ПоказатьИзБуфера(Команда)
	
	Если Команда.Имя = "ПоказатьИзБуфераЗагруженные" Тогда
		
		ЭлементОтбора = нсиРаботаСФормами.НайтиЭлементОтбораПоПредставлению(
		"Пользователь", СписокЗагруженных.Отбор.Элементы);
		
		Если Не ЭлементОтбора = Неопределено Тогда
			Если ЭлементОтбора.Использование Тогда
				ЭлементОтбора.Использование = Ложь;
				Возврат;
			КонецЕсли;	
		КонецЕсли;	
		
		ЭлементОтбора = нсиРаботаСФормами.ОтборВСпискеПоЗначению(СписокЗагруженных.Отбор.Элементы, 
			"Пользователь", ПользователиКлиентСервер.ТекущийПользователь(), ВидСравненияКомпоновкиДанных.Равно);
		ЭлементОтбора.Представление = "Захваченные в буфере";	
		
	ИначеЕсли Команда.Имя = "ПоказатьИзБуфераОбработанные" Тогда
		
		ЭлементОтбора = нсиРаботаСФормами.НайтиЭлементОтбораПоПредставлению(
		"Пользователь", СписокОбработанных.Отбор.Элементы);
		
		Если Не ЭлементОтбора = Неопределено Тогда
			Если ЭлементОтбора.Использование Тогда
				ЭлементОтбора.Использование = Ложь;
				Возврат;
			КонецЕсли;	
		КонецЕсли;	
		
		ЭлементОтбора = нсиРаботаСФормами.ОтборВСпискеПоЗначению(СписокОбработанных.Отбор.Элементы, 
			"Пользователь", ПользователиКлиентСервер.ТекущийПользователь(), ВидСравненияКомпоновкиДанных.Равно);
		ЭлементОтбора.Представление = "Захваченные в буфере";	
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПОДСИСТЕМА "Поиск по классу"

&НаКлиенте
// Процедура - событие, скрывающее/показывающее группу классов.
//
Процедура ПоказатьГруппуПоискаПоКлассу(Команда)
	
	Элементы.ГруппаКлассификаторПродукции.Видимость = Не Элементы.ГруппаКлассификаторПродукции.Видимость;
	Если Элементы.ГруппаКлассификаторПродукции.Видимость Тогда 
		Элементы.ГруппаДополнительныеКлассификаторы.Видимость = Ложь;
	КонецЕсли;	
	
	Если Не Элементы.ГруппаДополнительныеКлассификаторы.Видимость Тогда 
		ЭлементОтбора = нсиРаботаСФормами.НайтиГруппуОтбораПоПредставлению("По доп. классификатору", СписокЗагруженных.Отбор.Элементы);
		Если Не ЭлементОтбора = Неопределено Тогда
			ЭлементОтбора.Использование = Ложь;
		КонецЕсли;	
		ЭлементОтбора = нсиРаботаСФормами.НайтиГруппуОтбораПоПредставлению("По доп. классификатору", СписокОбработанных.Отбор.Элементы);
		Если Не ЭлементОтбора = Неопределено Тогда
			ЭлементОтбора.Использование = Ложь;
		КонецЕсли;	
	КонецЕсли;	
	Если Не Элементы.ГруппаКлассификаторПродукции.Видимость Тогда
		ЭлементОтбора = нсиРаботаСФормами.НайтиЭлементОтбораПоПредставлению("Класс", СписокЗагруженных.Отбор.Элементы);
		Если Не ЭлементОтбора = Неопределено Тогда
			ЭлементОтбора.Использование = Ложь;
		КонецЕсли;	
		ЭлементОтбора = нсиРаботаСФормами.НайтиЭлементОтбораПоПредставлению("Класс", СписокОбработанных.Отбор.Элементы);
		Если Не ЭлементОтбора = Неопределено Тогда
			ЭлементОтбора.Использование = Ложь;
		КонецЕсли;	
	КонецЕсли;	
	
	Элементы.НазначитьКласс.Видимость 		=  РежимРаботы = "Предварительная классификация" И
		(Элементы.ГруппаКлассификаторПродукции.Видимость ИЛИ Элементы.ГруппаДополнительныеКлассификаторы.Видимость);
	Элементы.УбратьКлассификацию.Видимость 	=  РежимРаботы = "Предварительная классификация" И
		(Элементы.ГруппаКлассификаторПродукции.Видимость ИЛИ Элементы.ГруппаДополнительныеКлассификаторы.Видимость);
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПОДСИСТЕМА "Дополнительные классификаторы"

&НаКлиенте
// Процедура - событие, скрывающее/показывающее группу доп. классов.
//
Процедура ПоказатьГруппуПоискаПоДопКлассу(Команда)
	
	Элементы.ГруппаДополнительныеКлассификаторы.Видимость = Не Элементы.ГруппаДополнительныеКлассификаторы.Видимость;
	Если Элементы.ГруппаДополнительныеКлассификаторы.Видимость Тогда 
		Элементы.ГруппаКлассификаторПродукции.Видимость = Ложь;
	КонецЕсли;	
	
	Если Не Элементы.ГруппаДополнительныеКлассификаторы.Видимость Тогда 
		ЭлементОтбора = нсиРаботаСФормами.НайтиГруппуОтбораПоПредставлению("По доп. классификатору", СписокЗагруженных.Отбор.Элементы);
		Если Не ЭлементОтбора = Неопределено Тогда
			ЭлементОтбора.Использование = Ложь;
		КонецЕсли;	
		ЭлементОтбора = нсиРаботаСФормами.НайтиГруппуОтбораПоПредставлению("По доп. классификатору", СписокОбработанных.Отбор.Элементы);
		Если Не ЭлементОтбора = Неопределено Тогда
			ЭлементОтбора.Использование = Ложь;
		КонецЕсли;	
	КонецЕсли;	
	Если Не Элементы.ГруппаКлассификаторПродукции.Видимость Тогда
		ЭлементОтбора = нсиРаботаСФормами.НайтиЭлементОтбораПоПредставлению("Класс", СписокЗагруженных.Отбор.Элементы);
		Если Не ЭлементОтбора = Неопределено Тогда
			ЭлементОтбора.Использование = Ложь;
		КонецЕсли;	
		ЭлементОтбора = нсиРаботаСФормами.НайтиЭлементОтбораПоПредставлению("Класс", СписокОбработанных.Отбор.Элементы);
		Если Не ЭлементОтбора = Неопределено Тогда
			ЭлементОтбора.Использование = Ложь;
		КонецЕсли;	
	КонецЕсли;	
	
	Элементы.НазначитьКласс.Видимость 		=  РежимРаботы = "Предварительная классификация" И
		(Элементы.ГруппаКлассификаторПродукции.Видимость ИЛИ Элементы.ГруппаДополнительныеКлассификаторы.Видимость);
	Элементы.УбратьКлассификацию.Видимость 	=  РежимРаботы = "Предварительная классификация" И
		(Элементы.ГруппаКлассификаторПродукции.Видимость ИЛИ Элементы.ГруппаДополнительныеКлассификаторы.Видимость);
		
КонецПроцедуры

&НаКлиенте
// Процедура - устанавливает записи выбранный классификатор.
//
Процедура НазначитьКласс(Команда)

	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.ЗагрузитьЗначения(Элементы.СписокЗагруженных.ВыделенныеСтроки);

	Если Элементы.ГруппаДополнительныеКлассификаторы.Видимость И  ЗначениеЗаполнено(ВидДопКлассификатора) Тогда 
		нсиСравнениеДанныхСервер.УстановкаДопКлассаПриПеретаскивании(СписокЗначений, 
			Элементы.ДополнительныеКлассификаторы.ТекущаяСтрока, ИмяСправочника,
			НЕ РежимРаботы = "Предварительная классификация", ВидДопКлассификатора);
	КонецЕсли;	
		
	Если Элементы.ГруппаКлассификаторПродукции.Видимость Тогда 
		нсиСравнениеДанныхСервер.УстановкаКлассаПриПеретаскивании(СписокЗначений, 
			Элементы.КлассификаторПродукции.ТекущаяСтрока, ИмяСправочника,
			НЕ РежимРаботы = "Предварительная классификация");
	КонецЕсли;	
	Элементы.СписокЗагруженных.Обновить();
КонецПроцедуры

&НаКлиенте
// Процедура - устанавливает записи пустой классификатор.
//
Процедура УбратьКлассификацию(Команда)
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.ЗагрузитьЗначения(Элементы.СписокЗагруженных.ВыделенныеСтроки);

	Если Элементы.ГруппаДополнительныеКлассификаторы.Видимость И  ЗначениеЗаполнено(ВидДопКлассификатора) Тогда 
		нсиСравнениеДанныхСервер.УстановкаДопКлассаПриПеретаскивании(СписокЗначений, 
			ПредопределенноеЗначение("Справочник.нсиДополнительныеКлассификаторы.ПустаяСсылка"), ИмяСправочника,
			НЕ РежимРаботы = "Предварительная классификация", ВидДопКлассификатора);
	КонецЕсли;	
		
	Если Элементы.ГруппаКлассификаторПродукции.Видимость Тогда 
		нсиСравнениеДанныхСервер.УстановкаКлассаПриПеретаскивании(СписокЗначений, 
			ПредопределенноеЗначение("Справочник.нсиДополнительныеКлассификаторы.ПустаяСсылка"), ИмяСправочника,
			НЕ РежимРаботы = "Предварительная классификация");
	КонецЕсли;	
	Элементы.СписокЗагруженных.Обновить();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПОДСИСТЕМА "Полнотекстовый поиск"

&НаКлиенте
// Процедура - событие, скрывающее/показывающее группу полнотекстного поиска.
//
Процедура ПоказатьГруппуПоискаПолнотекстно(Команда)
	
	Если Команда.Имя = "ПоказатьГруппуПоискаПолнотекстноЗагруженные" Тогда
		
		Элементы.ГруппаПолнотекстовогоПоискаЗагруженные.Видимость = 
			Не Элементы.ГруппаПолнотекстовогоПоискаЗагруженные.Видимость;
		Если Элементы.ГруппаПолнотекстовогоПоискаЗагруженные.Видимость Тогда 
			Элементы.ГруппаПоискаЗагруженные.Видимость = Ложь;
			Элементы.ГруппаПоискаОбработанные.Видимость = Ложь;
			Элементы.ГруппаПолнотекстовогоПоискаОбработанные.Видимость = Ложь;
		КонецЕсли;	
	
	ИначеЕсли Команда.Имя = "ПоказатьГруппуПоискаПолнотекстноОбработанные" Тогда
		
		Элементы.ГруппаПолнотекстовогоПоискаОбработанные.Видимость = 
			Не Элементы.ГруппаПолнотекстовогоПоискаОбработанные.Видимость;
		Если Элементы.ГруппаПолнотекстовогоПоискаОбработанные.Видимость Тогда 
			Элементы.ГруппаПоискаЗагруженные.Видимость = Ложь;
			Элементы.ГруппаПоискаОбработанные.Видимость = Ложь;
			Элементы.ГруппаПолнотекстовогоПоискаЗагруженные.Видимость = Ложь;
		КонецЕсли;	
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - событие, выполняющее поиск данных и отбор списка.
//
Процедура НайтиДанныеПолнотекстно(Команда)
	
	Если Команда.Имя = "НайтиДанныеПолнотекстноЗагруженные" Тогда
		
		НайтиДанныеПолнотекстноНаСервере(Истина);
		
	ИначеЕсли Команда.Имя = "НайтиДанныеПолнотекстноОбработанные" Тогда
		
		НайтиДанныеПолнотекстноНаСервере(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПОДСИСТЕМА "Сравнение данных"

&НаКлиенте
// Процедура - событие, скрывающее/показывающее группу поиска.
//
Процедура ПоказатьГруппуРасширенногоПоиска(Команда)
	
	Если Команда.Имя = "ПоказатьГруппуРасширенногоПоискаОбработанные" Тогда
		
		Элементы.ГруппаПоискаОбработанные.Видимость = Не Элементы.ГруппаПоискаОбработанные.Видимость;
		Если Элементы.ГруппаПоискаОбработанные.Видимость Тогда 
			Элементы.ГруппаПоискаЗагруженные.Видимость = Ложь;
			Элементы.ГруппаПолнотекстовогоПоискаЗагруженные.Видимость = Ложь;
			Элементы.ГруппаПолнотекстовогоПоискаОбработанные.Видимость = Ложь;
		КонецЕсли;	
		
	ИначеЕсли Команда.Имя = "ПоказатьГруппуРасширенногоПоискаЗагруженные" Тогда
		
		Элементы.ГруппаПоискаЗагруженные.Видимость = Не Элементы.ГруппаПоискаЗагруженные.Видимость;
		Если Элементы.ГруппаПоискаЗагруженные.Видимость Тогда 
			Элементы.ГруппаПоискаОбработанные.Видимость = Ложь;
			Элементы.ГруппаПолнотекстовогоПоискаЗагруженные.Видимость = Ложь;
			Элементы.ГруппаПолнотекстовогоПоискаОбработанные.Видимость = Ложь;
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - событие, выполняющее поиск данных и отбор списка.
//
Процедура НайтиДанные(Команда)
	
	Если Команда.Имя = "НайтиДанныеОбработанные" Тогда
		
		УстановитьОтборВСпискеПоНайденнымДанным(Ложь);
		Элементы.СписокОбработанных.Обновить();
		
	ИначеЕсли Команда.Имя = "НайтиДанныеЗагруженные" Тогда
		
		УстановитьОтборВСпискеПоНайденнымДанным(Истина);
		Элементы.СписокЗагруженных.Обновить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - событие, отменяющее отбор списка по параметрам поиска.
//
Процедура ОтменитьПоиск(Команда)
	
	Если Команда.Имя = "ОтменитьПоискОбработанные" Тогда
		
		СписокОбработанных.Параметры.УстановитьЗначениеПараметра("СсылкаНеОпределена", 	Истина);
		СписокОбработанных.Параметры.УстановитьЗначениеПараметра("Ссылка", Null);
		
	ИначеЕсли Команда.Имя = "ОтменитьПоискЗагруженные" Тогда
		
		СписокЗагруженных.Параметры.УстановитьЗначениеПараметра("СсылкаНеОпределена", 	Истина);
		СписокЗагруженных.Параметры.УстановитьЗначениеПараметра("Ссылка", Null);
		
	КонецЕсли;	
	                               
КонецПроцедуры

&НаКлиенте
// Процедура - событие, выполняющее открытие формы настройки поиска.
//
Процедура НастройкаПоиска(Команда)
	
	Если Команда.Имя = "НастройкаПоискаОбработанные" Тогда
		
		ПередаваемыеПараметры = Новый Структура;
		ПередаваемыеПараметры.Вставить("ИмяСправочника",	ИмяСправочника);
		ПередаваемыеПараметры.Вставить("НастройкаПоиска",	КомпоновщикНастроекОбработанные.Настройки);
		ПередаваемыеПараметры.Вставить("ПараметрыПоиска",	ПараметрыНеточногоПоискаОбработанные);
		Если ЗначениеЗаполнено(НастройкаПоискаДанныхОбработанные) Тогда 
			ПередаваемыеПараметры.Вставить("Ключ", НастройкаПоискаДанныхОбработанные);
		КонецЕсли;		
		
		ОписаниеОповещения = новый ОписаниеОповещения("ОбработкаЗакрытияНастройкиПоискаДанных", ЭтаФорма, Ложь);
		ОткрытьФорму(
			"Справочник.нсиНастройкиПоискаДанных.Форма.ФормаНастройки",
			ПередаваемыеПараметры,ЭтаФорма,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
		);
		
		
	ИначеЕсли Команда.Имя = "НастройкаПоискаЗагруженные" Тогда
		
		ПередаваемыеПараметры = Новый Структура;
		ПередаваемыеПараметры.Вставить("ИмяСправочника",	ИмяСправочника);
		ПередаваемыеПараметры.Вставить("НастройкаПоиска",	КомпоновщикНастроекЗагруженные.Настройки);
		ПередаваемыеПараметры.Вставить("ПараметрыПоиска",	ПараметрыНеточногоПоискаЗагруженные);
		Если ЗначениеЗаполнено(НастройкаПоискаДанныхЗагруженные) Тогда 
			ПередаваемыеПараметры.Вставить("Ключ", НастройкаПоискаДанныхЗагруженные);
		КонецЕсли;		
		
		ОписаниеОповещения = новый ОписаниеОповещения("ОбработкаЗакрытияНастройкиПоискаДанных", ЭтаФорма, Истина);
		ОткрытьФорму(
			"Справочник.нсиНастройкиПоискаДанных.Форма.ФормаНастройки",
			ПередаваемыеПараметры,ЭтаФорма,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗакрытияНастройкиПоискаДанных(Результат,Загруженные) Экспорт
	Если ЗначениеЗаполнено(Результат) Тогда 
		ЗаполнитьФорму(Результат, Загруженные);		
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
// Процедура - событие, выполняющее открытие формы выбора настройки поиска.
//
Процедура ВыбратьНастройку(Команда)
	
	Если Команда.Имя = "ВыбратьНастройкуОбработанные" Тогда
		
		ОписаниеОповещения = новый ОписаниеОповещения("ОбработкаВыбораНастройкиПоиска",ЭтотОбъект,Ложь);
		ОткрытьФорму(
			"Справочник.нсиНастройкиПоискаДанных.ФормаВыбора",
			Новый Структура("ИмяСправочника", ИмяСправочника),ЭтаФорма,,,,
			ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца 
		);
		
	ИначеЕсли Команда.Имя = "ВыбратьНастройкуЗагруженные" Тогда
		
		ОписаниеОповещения = новый ОписаниеОповещения("ОбработкаВыбораНастройкиПоиска",ЭтотОбъект,Истина);
		ОткрытьФорму(
			"Справочник.нсиНастройкиПоискаДанных.ФормаВыбора",
			Новый Структура("ИмяСправочника", ИмяСправочника),ЭтаФорма,,,,
			ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца 
		);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораНастройкиПоиска(Результат,Загруженные) Экспорт
	Если ЗначениеЗаполнено(Результат) Тогда
		Если Загруженные Тогда 
			НастройкаПоискаДанныхЗагруженные = Результат;
		Иначе
			НастройкаПоискаДанныхОбработанные = Результат;
		КонецЕсли;
		ЗаполнитьФорму(Результат, Загруженные);
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
// Процедура - устанавливает видимость элементов формы.
//
Процедура РежимРаботыПриИзменении(Элемент)
	
	ЭтаФорма.Заголовок = РежимРаботы + " справочника ""МТР""";
	
	Элементы.ГруппаПоискаЗагруженные.Видимость 					= Ложь;
	Элементы.ГруппаПолнотекстовогоПоискаЗагруженные.Видимость 	= Ложь;
	Элементы.ГруппаПоискаОбработанные.Видимость 				= Ложь;
	Элементы.ГруппаПолнотекстовогоПоискаОбработанные.Видимость 	= Ложь;
	Элементы.ГруппаКлассификаторПродукции.Видимость 			= Ложь;
	Элементы.ГруппаДополнительныеКлассификаторы.Видимость 		= Ложь;
	Элементы.ЗахватитьНаОбработку.Видимость 					= Истина;
	Элементы.НазначитьКласс.Видимость 							= Ложь;
	Элементы.УбратьКлассификацию.Видимость 						= Ложь;
	
	Если РежимРаботы = 		"Комплексная работа с записями" Тогда 
		Элементы.ГруппаОтбораСпискаЗагруженных.Видимость 		= Истина;
		Элементы.СписокЗагруженных.Видимость 					= Истина;
		
		Элементы.ГруппаОтбораСпискаОбработанных.Видимость 		= Истина;
		Элементы.СписокОбработанных.Видимость 					= Истина;
		
		Элементы.СписокБуфера.Видимость 						= Истина;
		Элементы.ГруппаЭталона.Видимость 						= Истина;
	ИначеЕсли РежимРаботы = "Предварительная классификация" Тогда 	
		Элементы.ГруппаОтбораСпискаЗагруженных.Видимость 		= Истина;
		Элементы.СписокЗагруженных.Видимость 					= Истина;
		
		Элементы.ГруппаОтбораСпискаОбработанных.Видимость 		= Ложь;
		Элементы.СписокОбработанных.Видимость 					= Ложь;
		
		Элементы.СписокБуфера.Видимость 						= Ложь;
		Элементы.ГруппаЭталона.Видимость 						= Ложь;
		Элементы.ГруппаКлассификаторПродукции.Видимость 		= Истина;
		Элементы.ЗахватитьНаОбработку.Видимость 				= Ложь;
		Элементы.НазначитьКласс.Видимость 						= Истина;
		Элементы.УбратьКлассификацию.Видимость 					= Истина;
	ИначеЕсли РежимРаботы = "Подбор в буфер записей" 		Тогда 	
		Элементы.ГруппаОтбораСпискаЗагруженных.Видимость 		= Истина;
		Элементы.СписокЗагруженных.Видимость 					= Истина;
		
		Элементы.ГруппаОтбораСпискаОбработанных.Видимость 		= Ложь;
		Элементы.СписокОбработанных.Видимость 					= Ложь;
		
		Элементы.СписокБуфера.Видимость 						= Истина;
		Элементы.ГруппаЭталона.Видимость 						= Ложь;
	ИначеЕсли РежимРаботы = "Обработка буфера записей" 	Тогда 
		Элементы.ГруппаОтбораСпискаЗагруженных.Видимость 		= Ложь;
		Элементы.СписокЗагруженных.Видимость 					= Ложь;
		
		Элементы.ГруппаОтбораСпискаОбработанных.Видимость 		= Истина;
		Элементы.СписокОбработанных.Видимость 					= Истина;
		
		Элементы.СписокБуфера.Видимость 						= Истина;
		Элементы.ГруппаЭталона.Видимость 						= Истина;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПОДСИСТЕМА "Поиск по классу"

&НаКлиенте
// Процедура - отбирает загруженные и обработанные записи по классу.
//
Процедура КлассификаторПродукцииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ЭлементОтбора = нсиРаботаСФормами.ОтборВСпискеПоЗначению(СписокЗагруженных.Отбор.Элементы, 
		"Класс", ВыбраннаяСтрока, ВидСравненияКомпоновкиДанных.ВИерархии, ЗначениеЗаполнено(ВыбраннаяСтрока));
	ЭлементОтбора.Представление = "По основному классификатору";	
	
	ЭлементОтбора = нсиРаботаСФормами.ОтборВСпискеПоЗначению(СписокБуфера.Отбор.Элементы, 
		"Класс", ВыбраннаяСтрока, ВидСравненияКомпоновкиДанных.ВИерархии, ЗначениеЗаполнено(ВыбраннаяСтрока));
	ЭлементОтбора.Представление = "По основному классификатору";	
	
	ЭлементОтбора = нсиРаботаСФормами.ОтборВСпискеПоЗначению(СписокОбработанных.Отбор.Элементы, 
		"Класс", ВыбраннаяСтрока, ВидСравненияКомпоновкиДанных.ВИерархии, ЗначениеЗаполнено(ВыбраннаяСтрока));
	ЭлементОтбора.Представление = "По основному классификатору";	
	
	ТекущиеДанные = Элементы.КлассификаторПродукции.ВыделенныеСтроки[0];
	
	ЗаполнитьДеревоСвойств(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
// Процедура - устанавливает отбор по свойству и его значению.
//
Процедура ДеревоСвойствВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Свойство = Элемент.ТекущиеДанные.ПолучитьРодителя().Значения;
	Значение = Элемент.ТекущиеДанные.Значения;    	
	
	// СписокЗагруженных
	ЭлементОтбора = ЭтаФорма.СписокЗагруженных.Отбор.Элементы.Добавить(
		Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ЭлементОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ЭлементОтбора.Представление = "" + Элемент.ТекущиеДанные.ПолучитьРодителя().СвойствоЗначение + 
		" = " + Элемент.ТекущиеДанные.СвойствоЗначение;

	нсиРаботаСФормами.ОтборВСпискеПоЗначению(ЭлементОтбора.Элементы, 
		"Ссылка.ТехническиеХарактеристики.Характеристика", Свойство);
	нсиРаботаСФормами.ОтборВСпискеПоЗначению(ЭлементОтбора.Элементы, 
		"Ссылка.ТехническиеХарактеристики.Значение", Значение);
	
	// СписокБуфера
	ЭлементОтбора = ЭтаФорма.СписокБуфера.Отбор.Элементы.Добавить(
		Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ЭлементОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ЭлементОтбора.Представление = "" + Элемент.ТекущиеДанные.ПолучитьРодителя().СвойствоЗначение + 
		" = " + Элемент.ТекущиеДанные.СвойствоЗначение;

	нсиРаботаСФормами.ОтборВСпискеПоЗначению(ЭлементОтбора.Элементы, 
		"Ссылка.ТехническиеХарактеристики.Характеристика", Свойство);
	нсиРаботаСФормами.ОтборВСпискеПоЗначению(ЭлементОтбора.Элементы, 
		"Ссылка.ТехническиеХарактеристики.Значение", Значение);
	
	// СписокОбработанных
	ЭлементОтбора = ЭтаФорма.СписокОбработанных.Отбор.Элементы.Добавить(
		Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ЭлементОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ЭлементОтбора.Представление = "" + Элемент.ТекущиеДанные.ПолучитьРодителя().СвойствоЗначение + 
		" = " + Элемент.ТекущиеДанные.СвойствоЗначение;

	нсиРаботаСФормами.ОтборВСпискеПоЗначению(ЭлементОтбора.Элементы, 
		"Ссылка.ТехническиеХарактеристики.Характеристика", Свойство);
	нсиРаботаСФормами.ОтборВСпискеПоЗначению(ЭлементОтбора.Элементы, 
		"Ссылка.ТехническиеХарактеристики.Значение", Значение);
			
КонецПроцедуры

&НаКлиенте
// Процедура - присваивает выбранным элементам класс.
//
Процедура КлассификаторПродукцииПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	нсиСравнениеДанныхСервер.УстановкаКлассаПриПеретаскивании(ПараметрыПеретаскивания.Значение, Строка, ИмяСправочника,
		НЕ РежимРаботы = "Предварительная классификация");
		
	Элементы.СписокЗагруженных.Обновить();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПОДСИСТЕМА "Дополнительные классификаторы"

&НаКлиенте
// Процедура - отбирает группу доп. классов по виду.
//
Процедура ВидДопКлассификатораПриИзменении(Элемент)
	
	нсиРаботаСФормами.ОтборВСпискеПоЗначению(ЭтаФорма.ДополнительныеКлассификаторы.Отбор.Элементы, 
		"Владелец", ВидДопКлассификатора);
	
КонецПроцедуры

&НаКлиенте
// Процедура - устанавливает записи выбранный классификатор.
//
Процедура ДополнительныеКлассификаторыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Не ЗначениеЗаполнено(ВидДопКлассификатора) Тогда 
		Возврат;
	КонецЕсли;	

	нсиСравнениеДанныхСервер.УстановкаДопКлассаПриПеретаскивании(ПараметрыПеретаскивания.Значение, Строка, ИмяСправочника,
		НЕ РежимРаботы = "Предварительная классификация", ВидДопКлассификатора);
	Элементы.СписокЗагруженных.Обновить();
КонецПроцедуры

&НаКлиенте
// Процедура - отбирает загруженные и обработанные записи по доп. классу.
//
Процедура ДополнительныеКлассификаторыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ЭлементОтбора = нсиРаботаСФормами.НайтиГруппуОтбораПоПредставлению("По доп. классификатору", СписокЗагруженных.Отбор.Элементы);
	Если ЭлементОтбора = Неопределено Тогда
		ЭлементОтбора = СписокЗагруженных.Отбор.Элементы.Добавить(
			Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ЭлементОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		ЭлементОтбора.Представление = "По доп. классификатору";	
	КонецЕсли;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование = Истина;
	
	нсиРаботаСФормами.ОтборВСпискеПоЗначению(ЭлементОтбора.Элементы, 
		"Ссылка.ДополнительнаяКлассификация.ВидКлассификатора", ВидДопКлассификатора);
	нсиРаботаСФормами.ОтборВСпискеПоЗначению(ЭлементОтбора.Элементы, 
		"Ссылка.ДополнительнаяКлассификация.Класс", ВыбраннаяСтрока);
	
	ЭлементОтбора = нсиРаботаСФормами.НайтиГруппуОтбораПоПредставлению("По доп. классификатору", СписокОбработанных.Отбор.Элементы);
	Если ЭлементОтбора = Неопределено Тогда
		ЭлементОтбора = СписокОбработанных.Отбор.Элементы.Добавить(
			Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ЭлементОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		ЭлементОтбора.Представление = "По доп. классификатору";	
	КонецЕсли;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование = Истина;
	
	нсиРаботаСФормами.ОтборВСпискеПоЗначению(ЭлементОтбора.Элементы, 
		"Ссылка.ДополнительнаяКлассификация.ВидКлассификатора", ВидДопКлассификатора);
	нсиРаботаСФормами.ОтборВСпискеПоЗначению(ЭлементОтбора.Элементы, 
		"Ссылка.ДополнительнаяКлассификация.Класс", ВыбраннаяСтрока);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// ПОДСИСТЕМА "Поиск по классу"

&НаСервере  
// Процедура - строит дерево свойств и значений по выбранному классу.
//
Процедура ЗаполнитьДеревоСвойств(ТекущиеДанные)
	
	РедактируемоеДеревоСвойств = ДанныеФормыВЗначение(ДеревоСвойств, Тип("ДеревоЗначений"));
	нсиСравнениеДанныхСервер.ЗаполнитьДеревоСвойств(ТекущиеДанные, РедактируемоеДеревоСвойств, ИмяСправочника);
	ЗначениеВДанныеФормы(РедактируемоеДеревоСвойств, ДеревоСвойств);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПОДСИСТЕМА "Полнотекстовый поиск"

&НаСервере
// Процедура - вызывает общий метод УстановитьОтборВСпискеПоПолнотекстовымДанным.
//
Процедура НайтиДанныеПолнотекстноНаСервере(Загруженные)
	
	Если Загруженные Тогда 
		
		нсиСравнениеДанныхСервер.УстановитьОтборВСпискеПоПолнотекстовымДанным(СписокЗагруженных, ИмяСправочника, 
			СтрокаПолнотекстовогоПоиска, ПроцентСовпадения);
			
	Иначе 	
			
		нсиСравнениеДанныхСервер.УстановитьОтборВСпискеПоПолнотекстовымДанным(СписокОбработанных, ИмяСправочника, 
			СтрокаПолнотекстовогоПоиска, ПроцентСовпадения);
			
	КонецЕсли;	
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПОДСИСТЕМА "Сравнение данных"

&НаСервере
// Процедура - вызывает общий метод УстановитьОтборВСпискеПоНайденнымДанным
// вызов сервера в контексте формы.
//
Процедура УстановитьОтборВСпискеПоНайденнымДанным(Загруженные)
	
	// Обработчик подсистемы "Сравнение данных"
	Если Загруженные Тогда 
		нсиСравнениеДанныхСервер.УстановитьОтборВСпискеПоНайденнымДанным(СписокЗагруженных, ИмяСправочника, 
			КомпоновщикНастроекЗагруженные, ПараметрыНеточногоПоискаЗагруженные);
	Иначе 
		нсиСравнениеДанныхСервер.УстановитьОтборВСпискеПоНайденнымДанным(СписокОбработанных, ИмяСправочника, 
			КомпоновщикНастроекОбработанные, ПараметрыНеточногоПоискаОбработанные);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
// Процедура - заполняет АдресКомпоновки, ПараметрыНеточногоПоиска и КомпоновщикНастроек. 
//
Процедура ЗаполнитьФорму(ВходящиеДанные, Загруженные)
	
	// Обработчик подсистемы "Сравнение данных"
	Если Загруженные Тогда 
		нсиСравнениеДанныхСервер.ЗаполнениеКомпоновщикаНастроек(ИмяСправочника, 
			АдресКомпоновкиЗагруженные, КомпоновщикНастроекЗагруженные, ЭтаФорма.УникальныйИдентификатор);
		нсиСравнениеДанныхСервер.ЗаполнитьПараметрыИКомпоновщикНастроек(ВходящиеДанные, 
			ПараметрыНеточногоПоискаЗагруженные, КомпоновщикНастроекЗагруженные);
	Иначе 
		нсиСравнениеДанныхСервер.ЗаполнениеКомпоновщикаНастроек(ИмяСправочника, 
			АдресКомпоновкиОбработанные, КомпоновщикНастроекОбработанные, ЭтаФорма.УникальныйИдентификатор);
		нсиСравнениеДанныхСервер.ЗаполнитьПараметрыИКомпоновщикНастроек(ВходящиеДанные, 
			ПараметрыНеточногоПоискаОбработанные, КомпоновщикНастроекОбработанные);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПОДСИСТЕМА "Визуализация"

&НаКлиенте
Процедура СписокЗагруженныхПриАктивизацииЯчейки(Элемент)
	ВизуализацияЯчейки(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СписокБуфераПриАктивизацииЯчейки(Элемент)
	ВизуализацияЯчейки(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СписокОбработанныхПриАктивизацииЯчейки(Элемент)
	ВизуализацияЯчейки(Элемент);
КонецПроцедуры

&НаКлиенте
// Процедура раскрашивает данные активированной ячейки по установленным параметрам
//
Процедура ВизуализацияЯчейки(ЭлементФормы)
	
	Если ЭлементФормы.ТекущиеДанные <> Неопределено Тогда
		
		Попытка
			ИмяЭлемента 	= УбратьЦифрыИзИмениЭлемента(ЭлементФормы.ТекущийЭлемент.Имя);
			ЗначениеСтроки 	= ЭлементФормы.ТекущиеДанные[СтрЗаменить(ИмяЭлемента,ЭлементФормы.Имя,"")];
			ПолеВизуализации = нсиРаботаСФормамиКлиент.ПолучитьСтрокуСВыделениемБукв(ЗначениеСтроки, ЦветаВизуализации);
		Исключение
			ПолеВизуализации = нсиРаботаСФормамиКлиент.ПолучитьСтрокуСВыделениемБукв("", ЦветаВизуализации);
		КонецПопытки;
		
	Иначе
		
		ПолеВизуализации 	= Новый ФорматированнаяСтрока("");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Функция удаляет из имени элемента цифры
//
Функция УбратьЦифрыИзИмениЭлемента(ТекущееИмяЭлемента)
	
	ИмяЭлемента	= ТекущееИмяЭлемента;
	
	Пока СтрНайти(ИмяЭлемента,"0")>0 Цикл
		ИмяЭлемента = СтрЗаменить(ИмяЭлемента,"0", "");
	КонецЦикла;
	Пока СтрНайти(ИмяЭлемента,"1")>0 Цикл
		ИмяЭлемента = СтрЗаменить(ИмяЭлемента,"1", "");
	КонецЦикла;
	Пока СтрНайти(ИмяЭлемента,"2")>0 Цикл
		ИмяЭлемента = СтрЗаменить(ИмяЭлемента,"2", "");
	КонецЦикла;
	Пока СтрНайти(ИмяЭлемента,"3")>0 Цикл
		ИмяЭлемента = СтрЗаменить(ИмяЭлемента,"3", "");
	КонецЦикла;
	Пока СтрНайти(ИмяЭлемента,"4")>0 Цикл
		ИмяЭлемента = СтрЗаменить(ИмяЭлемента,"4", "");
	КонецЦикла;
	Пока СтрНайти(ИмяЭлемента,"5")>0 Цикл
		ИмяЭлемента = СтрЗаменить(ИмяЭлемента,"5", "");
	КонецЦикла;
	Пока СтрНайти(ИмяЭлемента,"6")>0 Цикл
		ИмяЭлемента = СтрЗаменить(ИмяЭлемента,"6", "");
	КонецЦикла;
	Пока СтрНайти(ИмяЭлемента,"7")>0 Цикл
		ИмяЭлемента = СтрЗаменить(ИмяЭлемента,"7", "");
	КонецЦикла;
	Пока СтрНайти(ИмяЭлемента,"8")>0 Цикл
		ИмяЭлемента = СтрЗаменить(ИмяЭлемента,"8", "");
	КонецЦикла;
	Пока СтрНайти(ИмяЭлемента,"9")>0 Цикл
		ИмяЭлемента = СтрЗаменить(ИмяЭлемента,"9", "");
	КонецЦикла;
	
	Возврат ИмяЭлемента;
	
КонецФункции
	
#КонецОбласти





