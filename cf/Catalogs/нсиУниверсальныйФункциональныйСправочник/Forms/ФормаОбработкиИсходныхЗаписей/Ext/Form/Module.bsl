#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Попытка
		ВидСправочника = Параметры.ВидСправочника;
	Исключение
		ВидСправочника = Неопределено;
	КонецПопытки;
	Если НЕ ЗначениеЗаполнено(ВидСправочника) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не устанвлен вид универсального справочника!",,,,Отказ);
		Возврат;
	КонецЕсли;
	
	ДопПоля = "";
	ДопСвязи = "";
	
	ДопПоля = "
		|// Параметры статуса
		|СтатусыОбработки.Пользователь КАК Пользователь,
		|СтатусыОбработки.СозданаЗаявка КАК СозданаЗаявка,
		|СтатусыОбработки.ОбработкаНачата КАК ОбработкаНачата, СтатусыОбработки.Обработано КАК Обработано,
		|СтатусыОбработки.Обработавший КАК Обработавший,
		|СтатусыОбработки.ВременныйЭлемент КАК ВременныйЭлемент";
		
	ДопСвязи = "
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.нсиСтатусыОбработкиСправочников КАК СтатусыОбработки
		|ПО (СтатусыОбработки.Объект = ОсновнаяТаблица.Ссылка)
		|	И (ВЫБОР КОГДА &СсылкаНеОпределена ТОГДА ИСТИНА ИНАЧЕ СтатусыОбработки.Объект В (&Ссылка) КОНЕЦ)
		|	И НЕ СтатусыОбработки.ВременныйЭлемент
		|	И (НЕ (СтатусыОбработки.Обработано ИЛИ (СтатусыОбработки.Пользователь = &Пользователь И СтатусыОбработки.ОбработкаНачата) ))";
	
	нсиУниверсальноеХранилищеФормыСервер.ФормаСпискаПриСозданииНаСервере(ЭтаФорма,Отказ,ДопПоля,ДопСвязи,,"СписокЗагруженных");
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	
	
	СписокБуфера.ТекстЗапроса = СтрЗаменить(СписокЗагруженных.ТекстЗапроса,ДопСвязи,"
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.нсиСтатусыОбработкиСправочников КАК СтатусыОбработки
		|ПО СтатусыОбработки.Объект = ОсновнаяТаблица.Ссылка
		|	И СтатусыОбработки.Пользователь = &Пользователь 
		|	И СтатусыОбработки.ОбработкаНачата"
	);
	
	СписокОбработанных.ТекстЗапроса = СтрЗаменить(СписокЗагруженных.ТекстЗапроса,ДопСвязи,"
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.нсиСтатусыОбработкиСправочников КАК СтатусыОбработки
		|ПО (СтатусыОбработки.Объект = ОсновнаяТаблица.Ссылка)
		|	И (ВЫБОР КОГДА &СсылкаНеОпределена ТОГДА ИСТИНА ИНАЧЕ СтатусыОбработки.Объект В (&Ссылка) КОНЕЦ)
		|	И НЕ СтатусыОбработки.ВременныйЭлемент
		|	И СтатусыОбработки.Обработано"
	);
	
	НастроитьСписок("СписокБуфера");
	НастроитьСписок("СписокОбработанных");
	
	нсиУниверсальноеХранилищеФормыСервер.УстановитьОформлениеСписка(СписокЗагруженных.КомпоновщикНастроек.Настройки.УсловноеОформление,пМетаданные);
	нсиУниверсальноеХранилищеФормыСервер.УстановитьОформлениеСписка(СписокБуфера.КомпоновщикНастроек.Настройки.УсловноеОформление,пМетаданные);
	нсиУниверсальноеХранилищеФормыСервер.УстановитьОформлениеСписка(СписокОбработанных.КомпоновщикНастроек.Настройки.УсловноеОформление,пМетаданные);
	
	Элементы.ГруппаКлассификатор.Видимость 	= Ложь;
	
	СписокОбработанных.Параметры.УстановитьЗначениеПараметра("СсылкаНеОпределена", 	Истина);
	СписокОбработанных.Параметры.УстановитьЗначениеПараметра("Ссылка", Null);
	нсиСравнениеДанныхСервер.УстановитьПользователяВПараметрыИОформление(СписокОбработанных);  	
	СписокЗагруженных.Параметры.УстановитьЗначениеПараметра("СсылкаНеОпределена", 	Истина);
	СписокЗагруженных.Параметры.УстановитьЗначениеПараметра("Ссылка", Null);
	нсиСравнениеДанныхСервер.УстановитьПользователяВПараметрыИОформление(СписокЗагруженных);  	
	нсиСравнениеДанныхСервер.УстановитьПользователяВПараметрыИОформление(СписокБуфера);
	
	Если ЗначениеЗаполнено(Параметры.РежимРаботы) Тогда 
		РежимРаботы 	= Параметры.РежимРаботы;
	Иначе 
		РежимРаботы 	= "Комплексная работа с записями";
	КонецЕсли;
	
	// @Комментарий: Вызовем процедуру установки функциональных опций.
	нсиРаботаСФормамиСервер.УправлениеВидимостьюОбработкиЗаявок(ЭтаФорма);
	
	Если пМетаданные.ИспользоватьКлассификацию Тогда 
		Поле = Элементы.Добавить("СписокЗагруженныхКласс", Тип("ПолеФормы"), Элементы.СписокЗагруженных);
		Поле.ПутьКДанным = "СписокЗагруженных.Класс";
		
		Поле = Элементы.Добавить("СписокБуфераКласс", Тип("ПолеФормы"), Элементы.СписокБуфера);
		Поле.ПутьКДанным = "СписокБуфера.Класс";
		
		Поле = Элементы.Добавить("СписокОбработанныхКласс", Тип("ПолеФормы"), Элементы.СписокОбработанных);
		Поле.ПутьКДанным = "СписокОбработанных.Класс";
		
		нсиРаботаСФормами.ОтборВСпискеПоПараметру(ЭтаФорма.СписокЗагруженных.Отбор.Элементы, Параметры, "Класс", "Класс");
		нсиРаботаСФормами.ОтборВСпискеПоПараметру(ЭтаФорма.СписокБуфера.Отбор.Элементы, Параметры, "Класс", "Класс");
		нсиРаботаСФормами.ОтборВСпискеПоПараметру(ЭтаФорма.СписокОбработанных.Отбор.Элементы, Параметры, "Класс", "Класс");
		
		ЭлементОтбора = нсиРаботаСФормами.ОтборВСпискеПоЗначению(
			Классификатор.Отбор.Элементы, 
			"Владелец", 
			пМетаданные.Классификатор.Тип.Тип2, 
			ВидСравненияКомпоновкиДанных.ВИерархии, 
			Истина
		);
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
	КонецЕсли;
	
	Элементы.ПоказатьГруппуПоискаПоКлассу.Видимость = пМетаданные.ИспользоватьКлассификацию;
	
	ЦветаВизуализации = нсиРаботаСФормамиСервер.ПолучитьЦветаВизуализации();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РежимРаботыПриИзменении(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
// Процедура - устанавливает выбранную строку эталонной записью.
//
Процедура ВыбратьЭталонной(Команда)

	Если ЭтаФорма.ТекущийЭлемент = Элементы.СписокОбработанных Тогда 
		Если Не Элементы.СписокОбработанных.ВыделенныеСтроки.Количество() = 0 Тогда 
			ЭталоннаяЗапись = Элементы.СписокОбработанных.ВыделенныеСтроки[0];
		КонецЕсли;  		
	ИначеЕсли ЭтаФорма.ТекущийЭлемент = Элементы.СписокБуфера Тогда  		
		Если Не Элементы.СписокБуфера.ВыделенныеСтроки.Количество() = 0 Тогда 
			ЭталоннаяЗапись = Элементы.СписокБуфера.ВыделенныеСтроки[0];
		КонецЕсли;          		
	ИначеЕсли ЭтаФорма.ТекущийЭлемент = Элементы.СписокЗагруженных Тогда  		
		Если Не Элементы.СписокЗагруженных.ВыделенныеСтроки.Количество() = 0 Тогда 
			ЭталоннаяЗапись = Элементы.СписокЗагруженных.ВыделенныеСтроки[0];
		КонецЕсли;          		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
// Процедура - создается копия эталонной записи, устанавливается как эталон для выделенных.
//
Процедура СоздатьЭталон(Команда)
	
	ВыделенныеСтроки = Новый СписокЗначений;
	ВыделенныеСтроки.ЗагрузитьЗначения(Элементы.СписокБуфера.ВыделенныеСтроки);
	ЭталоннаяЗапись = нсиОбработкаИсходныхЗаписей.СоздатьЭталонНаСервере(
		Элементы.СписокБуфера.ТекущаяСтрока, ВыделенныеСтроки, "нсиУниверсальныйФункциональныйСправочник");	
	
	ЭтаФорма.Элементы.СписокБуфера.Обновить();
	
КонецПроцедуры

&НаКлиенте
// Процедура - признает эталонную запись как эталон.
//
Процедура ПодтвердитьЭталон(Команда)
	
	ВыделенныеСтроки = Новый СписокЗначений;
	ВыделенныеСтроки.ЗагрузитьЗначения(Элементы.СписокБуфера.ВыделенныеСтроки);
	нсиОбработкаИсходныхЗаписей.ПодтвердитьЭталонНаСервере(ЭталоннаяЗапись, ВыделенныеСтроки, "нсиУниверсальныйФункциональныйСправочник");
	
	ЭтаФорма.Элементы.СписокБуфера.Обновить();
	
КонецПроцедуры

&НаКлиенте
// Команда - отбирает записи по пользователю (захваченные в буфер).
//
Процедура ПоказатьИзБуфера(Команда)
	
	Если Команда.Имя = "ПоказатьИзБуфераЗагруженные" Тогда
		
		ЭлементОтбора = нсиРаботаСФормами.НайтиЭлементОтбораПоПредставлению(
		"Пользователь", СписокЗагруженных.Отбор.Элементы);
		
		Если Не ЭлементОтбора = Неопределено Тогда
			Если ЭлементОтбора.Использование Тогда
				ЭлементОтбора.Использование = Ложь;
				Возврат;
			КонецЕсли;	
		КонецЕсли;	
		
		ЭлементОтбора = нсиРаботаСФормами.ОтборВСпискеПоЗначению(СписокЗагруженных.Отбор.Элементы, 
			"Пользователь", ПользователиКлиентСервер.ТекущийПользователь(), ВидСравненияКомпоновкиДанных.Равно);
		ЭлементОтбора.Представление = "Захваченные в буфере";	
		
	ИначеЕсли Команда.Имя = "ПоказатьИзБуфераОбработанные" Тогда
		
		ЭлементОтбора = нсиРаботаСФормами.НайтиЭлементОтбораПоПредставлению(
		"Пользователь", СписокОбработанных.Отбор.Элементы);
		
		Если Не ЭлементОтбора = Неопределено Тогда
			Если ЭлементОтбора.Использование Тогда
				ЭлементОтбора.Использование = Ложь;
				Возврат;
			КонецЕсли;	
		КонецЕсли;	
		
		ЭлементОтбора = нсиРаботаСФормами.ОтборВСпискеПоЗначению(СписокОбработанных.Отбор.Элементы, 
			"Пользователь", ПользователиКлиентСервер.ТекущийПользователь(), ВидСравненияКомпоновкиДанных.Равно);
		ЭлементОтбора.Представление = "Захваченные в буфере";	
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПОДСИСТЕМА "Поиск по классу"

&НаКлиенте
// Процедура - событие, скрывающее/показывающее группу классов.
//
Процедура ПоказатьГруппуПоискаПоКлассу(Команда)
	
	Элементы.ГруппаКлассификатор.Видимость = Не Элементы.ГруппаКлассификатор.Видимость;
	
	Если Не Элементы.ГруппаКлассификатор.Видимость Тогда
		ЭлементОтбора = нсиРаботаСФормами.НайтиЭлементОтбораПоПредставлению("Класс", СписокЗагруженных.Отбор.Элементы);
		Если Не ЭлементОтбора = Неопределено Тогда
			ЭлементОтбора.Использование = Ложь;
		КонецЕсли;	
		ЭлементОтбора = нсиРаботаСФормами.НайтиЭлементОтбораПоПредставлению("Класс", СписокОбработанных.Отбор.Элементы);
		Если Не ЭлементОтбора = Неопределено Тогда
			ЭлементОтбора.Использование = Ложь;
		КонецЕсли;	
	КонецЕсли;	
	
	Элементы.НазначитьКласс.Видимость 		=  РежимРаботы = "Предварительная классификация" И
		Элементы.ГруппаКлассификатор.Видимость;
	Элементы.УбратьКлассификацию.Видимость 	=  РежимРаботы = "Предварительная классификация" И
		Элементы.ГруппаКлассификатор.Видимость;
		
КонецПроцедуры

&НаКлиенте
// Процедура - устанавливает записи выбранный классификатор.
//
Процедура НазначитьКласс(Команда)

	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.ЗагрузитьЗначения(Элементы.СписокЗагруженных.ВыделенныеСтроки);

	Если Элементы.ГруппаКлассификатор.Видимость Тогда 
		нсиСравнениеДанныхСервер.УстановкаКлассаПриПеретаскивании(СписокЗначений, 
			Элементы.Классификатор.ТекущаяСтрока, "нсиУниверсальныйФункциональныйСправочник",
			НЕ РежимРаботы = "Предварительная классификация");
	КонецЕсли;	
	Элементы.СписокЗагруженных.Обновить();
КонецПроцедуры

&НаКлиенте
// Процедура - устанавливает записи пустой классификатор.
//
Процедура УбратьКлассификацию(Команда)
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.ЗагрузитьЗначения(Элементы.СписокЗагруженных.ВыделенныеСтроки);
	
	Если Элементы.ГруппаКлассификатор.Видимость Тогда 
		нсиСравнениеДанныхСервер.УстановкаКлассаПриПеретаскивании(СписокЗначений, 
			Неопределено, "нсиУниверсальныйФункциональныйСправочник",
			НЕ РежимРаботы = "Предварительная классификация");
	КонецЕсли;	
	
	Элементы.СписокЗагруженных.Обновить();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
// Процедура - устанавливает видимость элементов формы.
//
Процедура РежимРаботыПриИзменении(Элемент)
	
	ЭтаФорма.Заголовок = РежимРаботы + " справочника """+ВидСправочника+"""";
	
	Элементы.ГруппаКлассификатор.Видимость 			= Ложь;
	Элементы.ЗахватитьНаОбработку.Видимость 					= Истина;
	Элементы.НазначитьКласс.Видимость 							= Ложь;
	Элементы.УбратьКлассификацию.Видимость 						= Ложь;
	
	Если РежимРаботы = 		"Комплексная работа с записями" Тогда 
		Элементы.ГруппаОтбораСпискаЗагруженных.Видимость 		= Истина;
		Элементы.СписокЗагруженных.Видимость 					= Истина;
		
		Элементы.ГруппаОтбораСпискаОбработанных.Видимость 		= Истина;
		Элементы.СписокОбработанных.Видимость 					= Истина;
		
		Элементы.СписокБуфера.Видимость 						= Истина;
		Элементы.ГруппаЭталона.Видимость 						= Истина;
	ИначеЕсли РежимРаботы = "Предварительная классификация" Тогда 	
		Элементы.ГруппаОтбораСпискаЗагруженных.Видимость 		= Истина;
		Элементы.СписокЗагруженных.Видимость 					= Истина;
		
		Элементы.ГруппаОтбораСпискаОбработанных.Видимость 		= Ложь;
		Элементы.СписокОбработанных.Видимость 					= Ложь;
		
		Элементы.СписокБуфера.Видимость 						= Ложь;
		Элементы.ГруппаЭталона.Видимость 						= Ложь;
		Элементы.ГруппаКлассификатор.Видимость 		= Истина;
		Элементы.ЗахватитьНаОбработку.Видимость 				= Ложь;
		Элементы.НазначитьКласс.Видимость 						= Истина;
		Элементы.УбратьКлассификацию.Видимость 					= Истина;
	ИначеЕсли РежимРаботы = "Подбор в буфер записей" 		Тогда 	
		Элементы.ГруппаОтбораСпискаЗагруженных.Видимость 		= Истина;
		Элементы.СписокЗагруженных.Видимость 					= Истина;
		
		Элементы.ГруппаОтбораСпискаОбработанных.Видимость 		= Ложь;
		Элементы.СписокОбработанных.Видимость 					= Ложь;
		
		Элементы.СписокБуфера.Видимость 						= Истина;
		Элементы.ГруппаЭталона.Видимость 						= Ложь;
	ИначеЕсли РежимРаботы = "Обработка буфера записей" 	Тогда 
		Элементы.ГруппаОтбораСпискаЗагруженных.Видимость 		= Ложь;
		Элементы.СписокЗагруженных.Видимость 					= Ложь;
		
		Элементы.ГруппаОтбораСпискаОбработанных.Видимость 		= Истина;
		Элементы.СписокОбработанных.Видимость 					= Истина;
		
		Элементы.СписокБуфера.Видимость 						= Истина;
		Элементы.ГруппаЭталона.Видимость 						= Истина;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПОДСИСТЕМА "Поиск по классу"

&НаКлиенте
// Процедура - отбирает загруженные и обработанные записи по классу.
//
Процедура КлассификаторВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ЭлементОтбора = нсиРаботаСФормами.ОтборВСпискеПоЗначению(СписокЗагруженных.Отбор.Элементы, 
		"Класс", ВыбраннаяСтрока, ВидСравненияКомпоновкиДанных.ВИерархии, ЗначениеЗаполнено(ВыбраннаяСтрока));
	ЭлементОтбора.Представление = "По основному классификатору";	
	
	ЭлементОтбора = нсиРаботаСФормами.ОтборВСпискеПоЗначению(СписокБуфера.Отбор.Элементы, 
		"Класс", ВыбраннаяСтрока, ВидСравненияКомпоновкиДанных.ВИерархии, ЗначениеЗаполнено(ВыбраннаяСтрока));
	ЭлементОтбора.Представление = "По основному классификатору";	
	
	ЭлементОтбора = нсиРаботаСФормами.ОтборВСпискеПоЗначению(СписокОбработанных.Отбор.Элементы, 
		"Класс", ВыбраннаяСтрока, ВидСравненияКомпоновкиДанных.ВИерархии, ЗначениеЗаполнено(ВыбраннаяСтрока));
	ЭлементОтбора.Представление = "По основному классификатору";	
	
	ТекущиеДанные = Элементы.Классификатор.ВыделенныеСтроки[0];
	
КонецПроцедуры

&НаКлиенте
// Процедура - присваивает выбранным элементам класс.
//
Процедура КлассификаторПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	нсиСравнениеДанныхСервер.УстановкаКлассаПриПеретаскивании(ПараметрыПеретаскивания.Значение, Строка, "нсиУниверсальныйФункциональныйСправочник",
		НЕ РежимРаботы = "Предварительная классификация");
		
	Элементы.СписокЗагруженных.Обновить();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокБуфера

////////////////////////////////////////////////////////////////////////////////
// ПОДСИСТЕМА "Визуализация"

&НаКлиенте
Процедура СписокЗагруженныхПриАктивизацииЯчейки(Элемент)
	ВизуализацияЯчейки(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СписокБуфераПриАктивизацииЯчейки(Элемент)
	ВизуализацияЯчейки(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СписокОбработанныхПриАктивизацииЯчейки(Элемент)
	ВизуализацияЯчейки(Элемент);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура НастроитьСписок(ИмяСписка)
	Элементы[ИмяСписка].КартинкаСтрок = БиблиотекаКартинок.нсиПиктограммыЭлементов;
	Элементы[ИмяСписка].ПутьКДаннымКартинкиСтроки = ИмяСписка+".КартинкаСтроки";
	ЭтаФорма[ИмяСписка].Параметры.УстановитьЗначениеПараметра("ВидСправочника", пМетаданные.ВидСправочника);
	Для каждого КлючИЗначение Из пМетаданные.Реквизиты Цикл
		Имя = КлючИЗначение.Ключ;
		пРеквизит = КлючИЗначение.Значение;
		
		пРеквизит = КлючИЗначение.Значение;
		ЭтаФорма[ИмяСписка].Параметры.УстановитьЗначениеПараметра("Р"+Имя, пРеквизит.Идентификатор);
	КонецЦикла;
	
	Поле = Элементы.Добавить(ИмяСписка+"Код", Тип("ПолеФормы"), Элементы[ИмяСписка]);
	Поле.ПутьКДанным = ИмяСписка+".Код";
	Поле = Элементы.Добавить(ИмяСписка+"Наименование", Тип("ПолеФормы"), Элементы[ИмяСписка]);
	Поле.ПутьКДанным = ИмяСписка+".Наименование";
	
	Для каждого КлючИЗначение Из пМетаданные.Реквизиты Цикл
		Имя = КлючИЗначение.Ключ;
		пРеквизит = КлючИЗначение.Значение;
		
		Поле = Элементы.Добавить(ИмяСписка+Имя, Тип("ПолеФормы"), Элементы[ИмяСписка]);
		Если пРеквизит.Тип.Тип1="Булево" Тогда
			Поле.Вид = ВидПоляФормы.ПолеФлажка;
		КонецЕсли;
		Поле.ПутьКДанным = ИмяСписка+"."+Имя;
		Поле.Заголовок = пРеквизит.Наименование;
	КонецЦикла;
	
	Элементы[ИмяСписка].Отображение = ОтображениеТаблицы.Список;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПОДСИСТЕМА "Визуализация"

// Процедура раскрашивает данные активированной ячейки по установленным параметрам
//
&НаКлиенте
Процедура ВизуализацияЯчейки(ЭлементФормы)
	
	Если ЭлементФормы.ТекущиеДанные <> Неопределено Тогда
		
		Попытка
			ИмяЭлемента 	= УбратьЦифрыИзИмениЭлемента(ЭлементФормы.ТекущийЭлемент.Имя);
			ЗначениеСтроки 	= ЭлементФормы.ТекущиеДанные[СтрЗаменить(ИмяЭлемента,ЭлементФормы.Имя,"")];
			ПолеВизуализации = нсиРаботаСФормамиКлиент.ПолучитьСтрокуСВыделениемБукв(ЗначениеСтроки, ЦветаВизуализации);
		Исключение
			ПолеВизуализации = нсиРаботаСФормамиКлиент.ПолучитьСтрокуСВыделениемБукв("", ЦветаВизуализации);
		КонецПопытки;
		
	Иначе
		
		ПолеВизуализации 	= Новый ФорматированнаяСтрока("");
		
	КонецЕсли;
	
КонецПроцедуры

// Функция удаляет из имени элемента цифры
//
&НаКлиенте
Функция УбратьЦифрыИзИмениЭлемента(ТекущееИмяЭлемента)
	
	ИмяЭлемента	= ТекущееИмяЭлемента;
	
	Пока СтрНайти(ИмяЭлемента,"0")>0 Цикл
		ИмяЭлемента = СтрЗаменить(ИмяЭлемента,"0", "");
	КонецЦикла;
	Пока СтрНайти(ИмяЭлемента,"1")>0 Цикл
		ИмяЭлемента = СтрЗаменить(ИмяЭлемента,"1", "");
	КонецЦикла;
	Пока СтрНайти(ИмяЭлемента,"2")>0 Цикл
		ИмяЭлемента = СтрЗаменить(ИмяЭлемента,"2", "");
	КонецЦикла;
	Пока СтрНайти(ИмяЭлемента,"3")>0 Цикл
		ИмяЭлемента = СтрЗаменить(ИмяЭлемента,"3", "");
	КонецЦикла;
	Пока СтрНайти(ИмяЭлемента,"4")>0 Цикл
		ИмяЭлемента = СтрЗаменить(ИмяЭлемента,"4", "");
	КонецЦикла;
	Пока СтрНайти(ИмяЭлемента,"5")>0 Цикл
		ИмяЭлемента = СтрЗаменить(ИмяЭлемента,"5", "");
	КонецЦикла;
	Пока СтрНайти(ИмяЭлемента,"6")>0 Цикл
		ИмяЭлемента = СтрЗаменить(ИмяЭлемента,"6", "");
	КонецЦикла;
	Пока СтрНайти(ИмяЭлемента,"7")>0 Цикл
		ИмяЭлемента = СтрЗаменить(ИмяЭлемента,"7", "");
	КонецЦикла;
	Пока СтрНайти(ИмяЭлемента,"8")>0 Цикл
		ИмяЭлемента = СтрЗаменить(ИмяЭлемента,"8", "");
	КонецЦикла;
	Пока СтрНайти(ИмяЭлемента,"9")>0 Цикл
		ИмяЭлемента = СтрЗаменить(ИмяЭлемента,"9", "");
	КонецЦикла;
	
	Возврат ИмяЭлемента;
	
КонецФункции

#КонецОбласти




