
#Область СлужебныйПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	Настройки.ПриПолученииСлужебныхРеквизитов = Истина;	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Ограничивает видимость реквизитов объекта в отчете по версии.
//
// Параметры:
//  Реквизиты - Массив - список имен реквизитов объекта.
Процедура ПриПолученииСлужебныхРеквизитов(Реквизиты) Экспорт
	// Реквизиты.Добавить("ИмяРеквизита"); // реквизит объекта
	// Реквизиты.Добавить("ИмяТабличнойЧасти.*"); // табличная часть объекта
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

////////////////////////////////////////////////////////
// Выделение изменений

Функция СписокРеквизитовВыделенияИзменений() Экспорт
	Возврат Неопределено	
КонецФункции	

Функция СписокРеквизитовИсключенийВыделенияИзменений() Экспорт
	Возврат "Код"
КонецФункции	

Функция НастройкиОформленияВыделенияИзмененийТабличныхЧастей() Экспорт
	
	Настройки_ДополнительнаяКлассификация = Новый Структура;
	Настройки_ДополнительнаяКлассификация.Вставить("КлючСтроки", "ВидКлассификатора,Класс");
	Настройки_ДополнительнаяКлассификация.Вставить("Реквизиты" , "");
	Настройки_ДополнительнаяКлассификация.Вставить("Элемент"   , "ДополнительнаяКлассификация");
	
	НастройкиОформления = Новый Структура;
	НастройкиОформления.Вставить("ДополнительнаяКлассификация"   , Настройки_ДополнительнаяКлассификация);
	
	Возврат НастройкиОформления
	
КонецФункции

#КонецОбласти

// Interface AX
Процедура РегистрацияAX(Узел, Ссылка) Экспорт 

	РегистрацияНеУдаленные = НЕ Ссылка.ПометкаУдаления;
	РегистрацияПоставщик = Ссылка.Поставщик И Ссылка.Родитель.ВыгрузкаAX;
	РегистрацияПокупатель = Ссылка.Покупатель И Ссылка.СтатусМСФО > 0;
	
	Если РегистрацияНеУдаленные 
		И (РегистрацияПоставщик
		ИЛИ РегистрацияПокупатель) 
		Тогда
		
		ПланыОбмена.ЗарегистрироватьИзменения(Узел, Ссылка);
		
	КонецЕсли; 
	
КонецПроцедуры

// Interface Global
Функция СтруктураСоответствияАтрибутовGlobal(СсылкаLocal, Организация) Экспорт 
	
	СтруктураGlobal = Новый Структура;
	
	СтруктураGlobal.Вставить("LocalEntity", СсылкаLocal);
	СтруктураGlobal.Вставить("Entity", ?(СсылкаLocal.Нерезидент, Организация.Entity, Справочники.GlobalEntity.НайтиПоКоду("RUSDOMES")));
	СтруктураGlobal.Вставить("Type", ?(СсылкаLocal.Нерезидент, Перечисления.GlobalPartnersTypes.INTERNATIONAL, Перечисления.GlobalPartnersTypes.DOMESTIC));
	СтруктураGlobal.Вставить("DetailedType", DetailedType(СсылкаLocal));
	СтруктураGlobal.Вставить("Наименование", ?(СокрЛП(СсылкаLocal.НаименованиеEN) = "", СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(СокрЛП(СсылкаLocal.Наименование)), СокрЛП(СсылкаLocal.НаименованиеEN)));
	СтруктураGlobal.Вставить("ExistingLocalID", "");                                                     
	СтруктураGlobal.Вставить("IsSupplier", СсылкаLocal.Поставщик);
	СтруктураGlobal.Вставить("IsCustomer", СсылкаLocal.Покупатель);
	СтруктураGlobal.Вставить("IsNonTrade", СсылкаLocal.Родитель.NonTrade);
	СтруктураGlobal.Вставить("IsInstitution", СсылкаLocal.Родитель.Institution);
	СтруктураGlobal.Вставить("Market", СсылкаLocal.Страна);
	СтруктураGlobal.Вставить("Incoterms", Incoterms(СсылкаLocal, Организация));
	СтруктураGlobal.Вставить("DeliveryAddress", DeliveryAddress(СсылкаLocal, Организация));
	СтруктураGlobal.Вставить("Currency", Currency(СсылкаLocal, Организация));
	СтруктураGlobal.Вставить("Status", Перечисления.PartnersStatuses.ACTIVE);
	
	Возврат СтруктураGlobal;
	
КонецФункции // СтруктураСоответствияКлючевыхАтрибутов()

Функция DetailedType(СсылкаLocal)
	
	DetailedTypeОтвет = Перечисления.PartnersDetailedTypes.ПустаяСсылка();
	
	DetailedTypeМассив = Новый Массив;
	Если СсылкаLocal.КаналСбыта.ПризнакПрочие Тогда
		DetailedTypeМассив.Добавить(Формат(СсылкаLocal.Поставщик, "БЛ=''; БИ='Supplier'")); 
		DetailedTypeМассив.Добавить(Формат(СсылкаLocal.Покупатель, "БЛ=''; БИ='Customer'")); 
	Иначе	
		DetailedTypeМассив.Добавить(Формат(СсылкаLocal.Покупатель, "БЛ=''; БИ='Customer'")); 
		DetailedTypeМассив.Добавить(Формат(СсылкаLocal.Поставщик, "БЛ=''; БИ='Supplier'")); 
	КонецЕсли; 
	DetailedTypeМассив.Добавить(Формат(СсылкаLocal.Родитель.NonTrade, "БЛ=''; БИ='Customer'"));
	
	Для каждого DetailedType Из DetailedTypeМассив Цикл
		Если НЕ DetailedType = "" Тогда
			DetailedTypeОтвет = Перечисления.PartnersDetailedTypes[DetailedType];
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат DetailedTypeОтвет;

КонецФункции // DetailedType()

Функция Incoterms(СсылкаLocal, Организация)

	Incoterms = Справочники.Incoterms.НайтиПоКоду("NA");
	Если СсылкаLocal.Нерезидент Тогда
		Для каждого ОсновнойДоговорСтрока Из СсылкаLocal.ОсновныеДоговораКонтрагентов Цикл
			ДоговорКонтрагента = ОсновнойДоговорСтрока.ДоговорКонтрагента;
			Если ДоговорКонтрагента.Организация = Организация Тогда
				Incoterms = ДоговорКонтрагента.Incoterms;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
	Возврат Incoterms;

КонецФункции // Incoterms()

Функция DeliveryAddress(СсылкаLocal, Организация)

	DeliveryAddress = "Not applicable";
	Если СсылкаLocal.Нерезидент Тогда
		Для каждого ОсновнойДоговорСтрока Из СсылкаLocal.ОсновныеДоговораКонтрагентов Цикл
			ДоговорКонтрагента = ОсновнойДоговорСтрока.ДоговорКонтрагента;
			Если ДоговорКонтрагента.Организация = Организация Тогда
				DeliveryAddress = ДоговорКонтрагента.IncotermsМесто.НаименованиеEN;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
	Возврат DeliveryAddress;

КонецФункции // DeliveryAddress()

Функция Currency(СсылкаLocal, Организация)

	Currency = Справочники.Валюты.ПустаяСсылка();
	Если СсылкаLocal.Нерезидент Тогда
		Для каждого ОсновнойДоговорСтрока Из СсылкаLocal.ОсновныеДоговораКонтрагентов Цикл
			ДоговорКонтрагента = ОсновнойДоговорСтрока.ДоговорКонтрагента;
			Если ДоговорКонтрагента.Организация = Организация Тогда
				Currency = ДоговорКонтрагента.ВалютаВзаиморасчетов;
			КонецЕсли; 
		КонецЦикла; 
	Иначе
		Currency = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли; 
	
	Возврат Currency;

КонецФункции // Currency()
 