&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.Свойства.
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеСвойства");
//	временныйблок
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства.
		
	РегистрыСведений.нсиСтатусыОбработкиСправочников.ОпределитьДоступКФорме(
		Объект.Ссылка, ЭтаФорма.ТолькоПросмотр, Объект.ЭтоМакет);
	
	// СтандартныеПодсистемы.КонтактнаяИнформация.
//    УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, "ГруппаКонтактнаяИнформация", ПоложениеЗаголовкаЭлементаФормы.Лево);
	// КутьяАА ITRR
    УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, "ГруппаКонтактнаяИнформация");
    // Конец СтандартныеПодсистемы.КонтактнаяИнформация.
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов.
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов.
	
	нсиВыделениеИзменений.ОформитьВыделениеИзменений(ЭтотОбъект);
	
	УправлениеВидимостьюИДоступом();
	
	// @Комментарий: Вызовем процедуру установки функциональных опций.
//	временныйблок
	нсиРаботаСФормамиСервер.УправлениеВидимостьюОбработкиЗаявок(ЭтаФорма);
	
	нсиРаботаСФормамиСервер.УстановитьВидимостьКодов(ЭтаФорма);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) и Объект.ЭтоМакет Тогда
		нсиРаботаСФормамиСервер.УстановитьДоступностьПолей(ЭтаФорма, Объект.Ссылка);
	КонецЕсли;
	
	НастройкиПолученияДанныхПоИННЗаданы = нсиПолучениеДанныхПоИНН.НастройкиПолученияДанныхПоИННЗаданы();
	
	// КутьяАА ITRR <<
	Если Параметры.Ключ.Пустая() Тогда
		Объект.ПолнаяСинхронизацияMDM = Истина;
		Объект.Status = Перечисления.PartnersStatuses.ACTIVE;
	КонецЕсли; 
	
	ПолнаяСинхронизацияMDMДоИзменения = Объект.ПолнаяСинхронизацияMDM;
	
	УстановитьОтборПоВладельцу(Договоры);
	УстановитьОтборПоВладельцу(БанковскиеСчета);
	УстановитьОтборПоВладельцу(Лицензии);
	УстановитьОтборПоВладельцу(ПунктыРазгрузки);
	
	НаборЗаписей = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Объект.Ссылка);
	НаборЗаписей.Прочитать();
	
	КонтактнаяИнформацияУПП.Загрузить(НаборЗаписей.Выгрузить());
	
	Для каждого ЭлементКИ Из ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
		Если ЭлементКИ.Представление = "" Тогда
			Отбор = Новый Структура("Вид", ЭлементКИ.Вид);
			Строки = КонтактнаяИнформацияУПП.НайтиСтроки(Отбор);
			
			Если Строки.Количество() > 0 Тогда
				ДанныеСтрокиУПП = Строки[0];
				Если ЗначениеЗаполнено(ДанныеСтрокиУПП.Представление) Тогда
					ЭтотОбъект[ЭлементКИ.ИмяРеквизита] = ДанныеСтрокиУПП.Представление;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
	MDMСервер.ЗаполнитьУчастниковОбмена(ЭтаФорма);
	MDMСервер.УстановитьУсловноеОформление(ЭтаФорма);
	MDMСервер.ДоступностьУчастниковОбмена(ЭтаФорма);
	
	GUID_MDM = Объект.Ссылка.УникальныйИдентификатор();
	//>>
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// СтандартныеПодсистемы.КонтактнаяИнформация
    УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
    // Конец СтандартныеПодсистемы.КонтактнаяИнформация.
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	ЗаполнитьСписокНаименованийСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	нсиРаботаСФормами.СократитьПробелыТекстовыхПолей(ТекущийОбъект);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Объект.Ссылка);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1 Ссылка ИЗ  Справочник.Организации  
		|ГДЕ Контрагент = &Контрагент
		|	И (НЕ Контрагент = ЗНАЧЕНИЕ(Справочник.нсиКонтрагенты.ПустаяСсылка))";
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	Элементы.СобственныйКонтрагент.Видимость = ВыборкаДетальныеЗаписи.Следующий();	
	
	// СтандартныеПодсистемы.Свойства
//	временныйблок
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
    УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
    // Конец СтандартныеПодсистемы.КонтактнаяИнформация.
	
	//КутьяАА ITRR
	Если НЕ Отказ И Модифицированность Тогда
		MDMСервер.ЗаписатьУчастниковОбмена(ЭтаФорма);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
    УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
    // Конец СтандартныеПодсистемы.КонтактнаяИнформация.
	
	// СтандартныеПодсистемы.Свойства
//	временныйблок
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	// проверяются эталоны и одиночные позиции не помеченные на удаление
	Если НЕ Объект.ПометкаУдаления И
		Объект.ТипПозиции = Перечисления.нсиТипыПозицийСправочников.ЭталоннаяПозиция
		Тогда 
		// все проверки
	ИначеЕсли Объект.ТипПозиции = Перечисления.нсиТипыПозицийСправочников.ДублирующаяПозиция Тогда 	
		Возврат; // проверки не работают	
	Иначе 
		Возврат; // проверки не работают	
	КонецЕсли;	
		
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ПеренестиДублиКНовомуЭталону();
	
	Если ВедетсяОбработка Тогда 
		РегистрыСведений.нсиСтатусыОбработкиСправочников.УстановитьСтатусСправочника(ТекущийОбъект.Ссылка,
			Новый Структура("Пользователь,ОбработкаНачата", ПараметрыСеанса.ТекущийПользователь, Истина) );	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация.
    УправлениеКонтактнойИнформацией.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
    // Конец СтандартныеПодсистемы.КонтактнаяИнформация.
	
	УправлениеВидимостьюИДоступом();
	
	нсиВыделениеИзменений.ОформитьВыделениеИзменений(ЭтотОбъект);
	
	УстановитьОтборПоВладельцу(Договоры);
	УстановитьОтборПоВладельцу(БанковскиеСчета);
	УстановитьОтборПоВладельцу(Лицензии);
	УстановитьОтборПоВладельцу(ПунктыРазгрузки);
	
	//КутьяАА ITRR <<
	Для каждого СтрокаКИУПП Из КонтактнаяИнформацияУПП Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаКИУПП.Объект) Тогда
			СтрокаКИУПП.Объект = Объект.Ссылка;
		КонецЕсли; 
	КонецЦикла; 
	
	НаборЗаписейКИ = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
	НаборЗаписейКИ.Отбор.Объект.Установить(Объект.Ссылка);
	НаборЗаписейКИ.Загрузить(КонтактнаяИнформацияУПП.Выгрузить());
	НаборЗаписейКИ.Записать(Истина);
	
	MDMСервер.ДоступностьУчастниковОбмена(ЭтаФорма);
	
	УИ = Объект.Ссылка.УникальныйИдентификатор();
	Если НЕ GUID_MDM = УИ Тогда
		GUID_MDM = УИ;
	КонецЕсли; 
	//>>
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
//	временныйблок
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
//	временныйблок
	Если ВладелецФормы = Неопределено Тогда 
		ВедетсяОбработка = Ложь; 
	Иначе 	
		ВедетсяОбработка = 
			(ВладелецФормы.Имя = "СписокБуфера" ИЛИ 
			ВладелецФормы.Имя = "СписокЗагруженных" ИЛИ 
			ВладелецФормы.Имя = "СписокОбработанных");
	КонецЕсли;	
	
	УстановитьТекстПроверкиДляИННКПП();
	
	//фыв++   для уже проставленных флажков Покупатель/Поставщик
	Если Объект.Поставщик Тогда
		Элементы.Кредиторы.Доступность=Истина;
		Элементы.КодыSAPКредитора.Доступность=Истина;
		Элементы.ОрганизацииКредитора.Доступность=Истина;
	Иначе
		Элементы.Кредиторы.Доступность=Ложь;
		Элементы.КодыSAPКредитора.Доступность=Ложь;
		Элементы.ОрганизацииКредитора.Доступность=Ложь;
	КонецЕсли;
	
	Если Объект.Покупатель Тогда
		Элементы.СтраницыДебитора.Доступность=Истина;
		Элементы.КодыSAPДебитора.Доступность=Истина;
		Элементы.ОрганизацииДебитора.Доступность=истина;
	Иначе
		Элементы.СтраницыДебитора.Доступность=Ложь;
		Элементы.КодыSAPДебитора.Доступность=Ложь;
		Элементы.ОрганизацииДебитора.Доступность=Ложь;
	КонецЕсли;
	
	//КутьяАА ITRR
	ВидимостьГоловногоКонтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
	    ОбновитьЭлементыДополнительныхРеквизитов();
	    УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если Объект.ЭтоМакет Тогда 
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("Запись макета элемента справочника ""Контрагенты""");
	Иначе
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("Запись элемента справочника ""Контрагенты""");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТипПозицииПриИзменении(Элемент)
	
	УправлениеВидимостьюИДоступом();
	
КонецПроцедуры

&НаКлиенте
Процедура ЮрФизЛицоПриИзменении(Элемент)
	
	УправлениеВидимостьюИДоступом();	
	УстановитьТекстПроверкиДляИННКПП();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументУдостоверяющийЛичностьОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаДокумента = ПолучитьФорму("Справочник.нсиКонтрагенты.Форма.ФормаРедактированияДокумента",
		Новый Структура("ДокументУдостоверяющийЛичность", Объект.ДокументУдостоверяющийЛичность) );
		
	Результат = ФормаДокумента.ОткрытьМодально();	
	Если ЗначениеЗаполнено(Результат) Тогда 
		Объект.ДокументУдостоверяющийЛичность = Результат;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.ПолноеНаименование) Тогда 
		Объект.ПолноеНаименование = ""+Объект.Наименование;
	КонецЕсли;
	
	ЗаполнитьСписокНаименованийКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура СобственныйКонтрагентНажатие(Элемент)
	
	ОткрытьФорму("Справочник.Организации.ФормаОбъекта",
		Новый Структура("Ключ", нсиРаботаСФормамиСервер.ПолучитьОрганизациюПоКонтрагенту(Объект.Ссылка)) );
	
КонецПроцедуры

&НаКлиенте
Процедура ИННПриИзменении(Элемент)
	ПриИзмененииИНН();		
КонецПроцедуры

&НаКлиенте
Процедура КПППриИзменении(Элемент)
	
	ТекКПП = Объект.КПП;
	Пока Найти(ТекКПП, " ") > 0 цикл
		ТекКПП = СтрЗаменить(ТекКПП, " ", ""); 
	КонецЦикла;
	Объект.КПП = ТекКПП;
	
	УстановитьТекстПроверкиДляИННКПП();
	
КонецПроцедуры

&НаКлиенте
Процедура НеРезидентПриИзменении(Элемент)
	УправлениеВидимостьюИДоступом();
	ИзменитьGlobalIDНеРезидент();
КонецПроцедуры

&НаСервере
Процедура ИзменитьGlobalIDНеРезидент()

	Если Объект.Нерезидент Тогда 
		
	Иначе
		
	КонецЕсли;

КонецПроцедуры // ИзменитьGlobalIDНеРезидент()
 
&НаКлиенте
Процедура ОКОПФПриИзменении(Элемент)
	ЗаполнитьСписокНаименованийКлиент();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства.
&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
    УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства.

// СтандартныеПодсистемы.КонтактнаяИнформация.

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
    УправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
КонецПроцедуры
// Конец СтандартныеПодсистемы.КонтактнаяИнформация.

&НаКлиенте
Процедура нсиУстановитьКПП(Команда)
	Если (СтрДлина(Объект.ИНН) < 4) или Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.нсиЮрФизЛицо.ФизЛицо") или Объект.Нерезидент Тогда
		Возврат;
	КонецЕсли;
	ПравыеСимволыИНН = Лев(Объект.ИНН, 4);
	Объект.КПП = ПравыеСимволыИНН + "01001";
	
	УстановитьТекстПроверкиДляИННКПП();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеЕГРН(Команда)
	ПриИзмененииИНН(Истина);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПоказатьОтличия(Команда)
	
	ПараметрыСравненияТаблиц = ВыделениеИзменений_ПараметрыСравненияТаблиц(Команда.Имя);
	
	Если ПараметрыСравненияТаблиц = Неопределено тогда
		Возврат
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.нсиФормаСравненияТабличныхЧастей", ПараметрыСравненияТаблиц, ЭтаФорма);
	
КонецПроцедуры	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗаполнитьСписокНаименованийКлиент()
	Элементы.ПолноеНаименование.СписокВыбора.Очистить();
	Элементы.ПолноеНаименование.СписокВыбора.Добавить(""+Объект.Наименование);
	Если ЗначениеЗаполнено(Объект.ОрганизационноПравоваяФорма) Тогда 
		Элементы.ПолноеНаименование.СписокВыбора.Добавить(
			""+Объект.ОрганизационноПравоваяФорма+", "+Объект.Наименование);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокНаименованийСервер()
	Элементы.ПолноеНаименование.СписокВыбора.Очистить();
	Элементы.ПолноеНаименование.СписокВыбора.Добавить(""+Объект.Наименование);
	Если ЗначениеЗаполнено(Объект.ОрганизационноПравоваяФорма) Тогда 
		Элементы.ПолноеНаименование.СписокВыбора.Добавить(
			""+Объект.ОрганизационноПравоваяФорма+", "+Объект.Наименование);
	КонецЕсли;
КонецПроцедуры

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
    УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.КонтактнаяИнформация
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
        УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент,, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
    УправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат)
	УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
	
	//КутьяАА ITRR <<
	ЮрАдресКонтрагентаВидКИ = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
	ФактАдресКонтрагентаВидКИ = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
	
	МассивСтрок = Этаформа.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизита, Вид",Результат.ИмяРеквизита, ЮрАдресКонтрагентаВидКИ));
	Если МассивСтрок.Количество() Тогда
		СтрокаЮрАдреса = МассивСтрок[0];
		СтрокиФактАдреса = Этаформа.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("Вид", ФактАдресКонтрагентаВидКИ));
		Если СтрокиФактАдреса.Количество() Тогда
			СтрокаФактАдреса = СтрокиФактАдреса[0];
			ЗаполнитьЗначенияСвойств(СтрокаФактАдреса, СтрокаЮрАдреса,,"Вид, Тип, ИмяРеквизита");
			ЭтаФорма[СтрокаФактАдреса.ИмяРеквизита] = СтрокаФактАдреса.Представление;
		КонецЕсли;
		
		СтрокиЮрАдресаУПП = КонтактнаяИнформацияУПП.НайтиСтроки(Новый Структура("Вид", ЮрАдресКонтрагентаВидКИ));
		Если СтрокиЮрАдресаУПП.Количество() Тогда
		
			СтрокаЮрАдресаУПП = СтрокиЮрАдресаУПП[0];
			СтрокиФактАдресаУПП = КонтактнаяИнформацияУПП.НайтиСтроки(Новый Структура("Вид", ФактАдресКонтрагентаВидКИ));
			Если СтрокиФактАдресаУПП.Количество() Тогда
				СтрокаФактАдресаУПП = СтрокиФактАдресаУПП[0];
				Сообщить("Внимание! Фактический адрес был изменен.", СтатусСообщения.ОченьВажное);
			Иначе 	
				СтрокаФактАдресаУПП = КонтактнаяИнформацияУПП.Добавить();
				СтрокаФактАдресаУПП.Вид = ФактАдресКонтрагентаВидКИ;
			КонецЕсли; 
			ЗаполнитьЗначенияСвойств(СтрокаФактАдресаУПП, СтрокаЮрАдресаУПП,,"Вид,ЗначениеПоУмолчанию");
		КонецЕсли; 
		
	КонецЕсли; 
	//>>
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.КонтактнаяИнформация.

&НаСервере
Процедура УправлениеВидимостьюИДоступом()
	
	Элементы.ЭталоннаяПозиция.Доступность = 
		(Объект.ТипПозиции = Перечисления.нсиТипыПозицийСправочников.ДублирующаяПозиция);
	
	Если Не Объект.ЮрФизЛицо = Перечисления.нсиЮрФизЛицо.ФизЛицо Тогда 
		Элементы.ПолноеНаименование.Заголовок = "Полное наименование";
		Элементы.КПП.Видимость 			= Истина;
		Элементы.нсиУстановитьКПП.Видимость = Истина;
//	КутьяАА		
//		Элементы.НадписьПроверкаКПП.Видимость 			= Истина;
		Элементы.ОКОПФ.Видимость 		= Истина;
		Элементы.КодПоОКПО.Видимость 	= Истина;
		Элементы.ОГРН.Заголовок = "ОГРН";
		Элементы.ДокументУдостоверяющийЛичность.Видимость = Ложь;
	Иначе 
		Элементы.ПолноеНаименование.Заголовок = "ФИО";
		Элементы.ОГРН.Заголовок = "ОГРН ИП";
		Элементы.КПП.Видимость 			= Ложь;
		Элементы.НадписьПроверкаКПП.Видимость 			= Ложь;
		Элементы.ОКОПФ.Видимость 		= Ложь;
		Элементы.КодПоОКПО.Видимость 	= Ложь;
		Элементы.ДокументУдостоверяющийЛичность.Видимость = Истина;
		Элементы.нсиУстановитьКПП.Видимость = Ложь;
	КонецЕсли;	
	
	Если Объект.Нерезидент Тогда 
		Элементы.ИНН.Маска = "";
	Иначе
		Если Не Объект.ЮрФизЛицо = Перечисления.нсиЮрФизЛицо.ФизЛицо Тогда
			Элементы.ИНН.Маска = "9999999999";
			Объект.ИНН = Сред(Объект.ИНН, 1, 10);
		Иначе
			Элементы.ИНН.Маска = "999999999999";
			Объект.ИНН = Сред(Объект.ИНН, 1, 12);
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.GlobalIDОрганизация.Видимость = Объект.Нерезидент;
	Элементы.GlobalID_DeactivatedОрганизация.Видимость = Объект.Нерезидент;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Объект.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка ИЗ Справочник.Организации ГДЕ Контрагент = &Контрагент";
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	Элементы.СобственныйКонтрагент.Видимость = ВыборкаДетальныеЗаписи.Следующий();
	
КонецПроцедуры	

&НаКлиенте
Процедура УстановитьТекстПроверкиДляИННКПП(ИННПравильный = Ложь)
	
	ЦветТекстаСиний = Новый Цвет(0, 102, 255);
 	ЦветТекстаКрасный = Новый Цвет(255, 40, 0);
	
//	КутьяАА	
	ЦветТекстаЗеленый = Новый Цвет(200, 255, 200);
 	ЦветТекстаРозовый = Новый Цвет(255, 200, 200);
	
	ЭтоЮрЛицо = нсиОбщегоНазначенияВызовСервера.ЭтоЮрЛицо(Объект.ЮрФизЛицо);
	ИННПравильный = нсиРегламентированныеДанныеКлиентСервер.ИННСоответствуетКонтрЧислу(Объект.ИНН, ЭтоЮрЛицо);
	КПППравильный = нсиРегламентированныеДанныеКлиентСервер.КППСоответствуетКонтрЧислу(Объект.КПП);

 
	Если ИННПравильный Тогда
		Элементы.НадписьПроверкаИНН.Заголовок = "«Проверка на контрольное число: Совпадает»";
		Элементы.НадписьПроверкаИНН.ЦветТекста = ЦветТекстаСиний;
//	КутьяАА	
		Элементы.ИНН.ЦветФона = ЦветТекстаЗеленый;
	Иначе
		Элементы.НадписьПроверкаИНН.Заголовок = "«Проверка на контрольное число: Не совпадает»";
		Элементы.НадписьПроверкаИНН.ЦветТекста = ЦветТекстаКрасный;
//	КутьяАА	
		Элементы.ИНН.ЦветФона = ЦветТекстаРозовый;
	КонецЕсли;
	
	Если КПППравильный Тогда
		Элементы.НадписьПроверкаКПП.Заголовок = "«Проверка КПП: пройдена»";
		Элементы.НадписьПроверкаКПП.ЦветТекста = ЦветТекстаСиний;
//	КутьяАА	
		Элементы.КПП.ЦветФона = ЦветТекстаЗеленый;
	Иначе
		Элементы.НадписьПроверкаКПП.Заголовок = "«Проверка КПП: не пройдена»";
		Элементы.НадписьПроверкаКПП.ЦветТекста = ЦветТекстаКрасный;
//	КутьяАА	
		Элементы.КПП.ЦветФона = ЦветТекстаРозовый;
	КонецЕсли;

	
КонецПроцедуры

&НаСервере
Функция ВыделениеИзменений_ПараметрыСравненияТаблиц(ИмяКоманды)
	Возврат нсиВыделениеИзменений.ПараметрыСравненияТаблиц(ЭтотОбъект, ИмяКоманды);
КонецФункции

#КонецОбласти

#Область ЗаполнениеРеквизитовКонтрагентаПоИНН

&НаКлиенте
Процедура ПриИзмененииИНН(ОповещатьОбОшибке = Ложь)
	
	ТекИНН = Объект.ИНН;
	Пока Найти(ТекИНН, " ") > 0 цикл
		ТекИНН = СтрЗаменить(ТекИНН, " ", ""); 
	КонецЦикла;
	Объект.ИНН = ТекИНН;
	
	ИННПравильный = Истина;
	
	УстановитьТекстПроверкиДляИННКПП(ИННПравильный);

	Если ИННПравильный И НастройкиПолученияДанныхПоИННЗаданы тогда
		
		РезультатЗапуска = ЗапуститьФоновоеЗаданиеПолученияДанныхПоИНННаСервере();
		
		Если РезультатЗапуска.ЗаданиеЗапущено Тогда
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПараметрыОбработчикаОжидания.ТекущийИнтервал = 2;
			ПараметрыОбработчикаОжидания.Вставить("ОповещатьОбОшибке", ОповещатьОбОшибке);
			ПодключитьОбработчикОжидания("ПроверитьВыполнениеЗаданияПолученияДанныхПоИНННаКлиенте", 2, Истина);
		Иначе
			ЗаполнитьРеквизитыДаннымиПоИНН(РезультатЗапуска.РеквизитыКонтрагента, ОповещатьОбОшибке);
		КонецЕсли;
	ИначеЕсли Не НастройкиПолученияДанныхПоИННЗаданы 
		И ОповещатьОбОшибке тогда
		ПоказатьОповещениеПользователя("Получении данных ЕГРЮЛ\ЕГРИП",, "Не заданы настройки получения данных ЕГРЮЛ\ЕГРИП.", БиблиотекаКартинок.Предупреждение32);
	ИначеЕсли Не ИННПравильный 
		И ОповещатьОбОшибке тогда
		ПоказатьОповещениеПользователя("Получении данных ЕГРЮЛ\ЕГРИП",, "ИНН указан неверно.", БиблиотекаКартинок.Предупреждение32);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьФоновоеЗаданиеПолученияДанныхПоИНННаСервере()
	
	РезультатЗапуска = Новый Структура;
	РезультатЗапуска.Вставить("ЗаданиеЗапущено"     , Ложь);
	РезультатЗапуска.Вставить("РеквизитыКонтрагента", Неопределено);
	
	Если ТипЗнч(ИдентификаторЗадания) = Тип("УникальныйИдентификатор") Тогда
		Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
		
		Если НЕ Задание = Неопределено
			И Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
			Задание.Отменить();
		КонецЕсли;
	КонецЕсли;
	
	ИнформацияОбОшибке = Неопределено;
	
	ПараметрыФормирования = Новый Структура;
	ПараметрыФормирования.Вставить("ИНН", Объект.ИНН);
	ПараметрыФормирования.Вставить("ЭтоЮридическоеЛицо", (Объект.ЮрФизЛицо = Перечисления.нсиЮрФизЛицо.ЮрЛицо));
	
	Попытка
		РезультатФоновогоЗадания = ДлительныеОперации.ЗапуститьВыполнениеВФоне(УникальныйИдентификатор,	"нсиПолучениеДанныхПоИНН.ДанныеКонтрагентаПоИНН", ПараметрыФормирования, НСтр("ru = 'Работа с контрагентами: получение реквизитов по ИНН.'"));
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Возврат РезультатЗапуска;
	КонецПопытки;
	
	ИдентификаторЗадания  = РезультатФоновогоЗадания.ИдентификаторЗадания;
	АдресХранилища        = РезультатФоновогоЗадания.АдресХранилища;
	
	Если РезультатФоновогоЗадания.ЗаданиеВыполнено Тогда
		РезультатЗапуска.РеквизитыКонтрагента = ПолучитьИзВременногоХранилища(РезультатФоновогоЗадания.АдресХранилища);
	Иначе
		РезультатЗапуска.ЗаданиеЗапущено      = Истина;
	КонецЕсли;
	
	Возврат РезультатЗапуска;
	
КонецФункции

&НаСервере
Функция ФоновоеЗаданиеПолученияДанныхПоИННВыполнено(ЗаданиеИдентификатор, АдресХранилища)
	
	РезультатВыполнения = Новый Структура("ЗаданиеВыполнено, РеквизитыКонтрагента", Ложь, Неопределено);
	
	Попытка
		РезультатВыполнения.ЗаданиеВыполнено = ДлительныеОперации.ЗаданиеВыполнено(ЗаданиеИдентификатор);
	Исключение
	КонецПопытки;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		РезультатВыполнения.РеквизитыКонтрагента = ПолучитьИзВременногоХранилища(АдресХранилища);
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьВыполнениеЗаданияПолученияДанныхПоИНННаКлиенте()
	
	РезультатВыполнения = ФоновоеЗаданиеПолученияДанныхПоИННВыполнено(ИдентификаторЗадания, АдресХранилища);
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗаполнитьРеквизитыДаннымиПоИНН(РезультатВыполнения.РеквизитыКонтрагента, ПараметрыОбработчикаОжидания.ОповещатьОбОшибке);
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("ПроверитьВыполнениеЗаданияПолученияДанныхПоИНННаКлиенте", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеОбъектаДляСравнения()

	ДанныеДляСравнения = Новый Структура;
	ДанныеДляСравнения.Вставить("КПП"                    , "");
	ДанныеДляСравнения.Вставить("Наименование"           , "");
	ДанныеДляСравнения.Вставить("НаименованиеПолное", "");
	ДанныеДляСравнения.Вставить("ЮридическийАдрес"       , "");
	ДанныеДляСравнения.Вставить("Телефон"                , "");
	
	ЗаполнитьЗначенияСвойств(ДанныеДляСравнения, Объект, "КПП, Наименование");
	
	ДанныеДляСравнения.НаименованиеПолное = Объект.ПолноеНаименование;
	
	// Данные телефона.
	Отбор = Новый Структура("Вид", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента"));
	ДанныеКонтактнойИнформации = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);

	Если ДанныеКонтактнойИнформации.ВГраница() > -1 Тогда
		ДанныеДляСравнения.Телефон = ДанныеКонтактнойИнформации[0].Представление;
	КонецЕсли;
	
	// Данные юридического адреса.
	Отбор = Новый Структура("Вид", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента"));
	ДанныеКонтактнойИнформации = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);

	Если ДанныеКонтактнойИнформации.ВГраница() > -1 Тогда
		ДанныеДляСравнения.ЮридическийАдрес = ДанныеКонтактнойИнформации[0].Представление;
	КонецЕсли;
	
	Возврат ДанныеДляСравнения;

КонецФункции 

&НаКлиенте
Функция СравнитьДанные(РеквизитыКонтрагента, ДанныеОбъекта)
	
	Результат = Новый Структура("ЕстьИзменения, ЕстьИзмененияВЗаполненныхРеквизитах", Ложь, Ложь);
	
	Если РеквизитыКонтрагента.Свойство("КПП") И НЕ РеквизитыКонтрагента.КПП = ДанныеОбъекта.КПП Тогда
		Результат.ЕстьИзменения = Истина;
		Если ЗначениеЗаполнено(ДанныеОбъекта.КПП) Тогда
			Результат.ЕстьИзмененияВЗаполненныхРеквизитах = Истина;
		КонецЕсли;
		
		Возврат Результат;
	КонецЕсли;
	
	Если РеквизитыКонтрагента.Свойство("Наименование") 
		И НЕ РеквизитыКонтрагента.Наименование = ДанныеОбъекта.Наименование Тогда
		Результат.ЕстьИзменения = Истина;
		Если ЗначениеЗаполнено(ДанныеОбъекта.Наименование) Тогда
			Результат.ЕстьИзмененияВЗаполненныхРеквизитах = Истина;
		КонецЕсли;
		
		Возврат Результат;
	КонецЕсли;
	
	Если РеквизитыКонтрагента.Свойство("НаименованиеПолное") 
		И НЕ РеквизитыКонтрагента.НаименованиеПолное = ДанныеОбъекта.НаименованиеПолное Тогда
		Результат.ЕстьИзменения = Истина;
		Если ЗначениеЗаполнено(ДанныеОбъекта.НаименованиеПолное) Тогда
			Результат.ЕстьИзмененияВЗаполненныхРеквизитах = Истина;
		КонецЕсли;
		
		Возврат Результат;
	КонецЕсли;
	
	Если РеквизитыКонтрагента.Свойство("Телефон") 
		И НЕ РеквизитыКонтрагента.Телефон = Неопределено Тогда
		Если РеквизитыКонтрагента.Телефон.Представление <> ДанныеОбъекта.Телефон Тогда
			
			Результат.ЕстьИзменения = Истина;
			Если ЗначениеЗаполнено(ДанныеОбъекта.Телефон) Тогда
				Результат.ЕстьИзмененияВЗаполненныхРеквизитах = Истина;
			КонецЕсли;
			
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Если РеквизитыКонтрагента.Свойство("ЮридическийАдрес")
		И НЕ РеквизитыКонтрагента.ЮридическийАдрес = Неопределено Тогда
		Если РеквизитыКонтрагента.ЮридическийАдрес.Представление <> ДанныеОбъекта.ЮридическийАдрес Тогда
			
			Результат.ЕстьИзменения = Истина;
			Если ЗначениеЗаполнено(ДанныеОбъекта.ЮридическийАдрес) Тогда
				Результат.ЕстьИзмененияВЗаполненныхРеквизитах = Истина;
			КонецЕсли;
			
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьРеквизитыДаннымиПоИНН(РеквизитыКонтрагента, ОповещатьОбОшибке = Ложь)
	
	Если РеквизитыКонтрагента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыКонтрагента.ОписаниеОшибки) Тогда
		
		Если ПустаяСтрока(РеквизитыКонтрагента.ОписаниеОшибки) Тогда
			ТекстПредупреждения = НСтр("ru='При получении данных ЕГРЮЛ\ЕГРИП произошла неизвестная ошибка.'");
		ИначеЕсли РеквизитыКонтрагента.ОписаниеОшибки = "НеУказаныПараметрыАутентификации" Тогда
			ТекстПредупреждения = НСтр("ru='Не указаны параметры аутентификации сервиса получения данных по ИНН.'");
		ИначеЕсли РеквизитыКонтрагента.ОписаниеОшибки = "НеУказанПароль" Тогда
			ТекстПредупреждения = НСтр("ru='Не указан пароль для доступа к сервису получения данных по ИНН'");
		ИначеЕсли СтрЧислоВхождений(ВРЕГ(РеквизитыКонтрагента.ОписаниеОшибки),"НЕ УДАЛОСЬ НАЙТИ ДАННЫЕ ДЛЯ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ") > 0 Тогда
			ТекстПредупреждения = НСтр("ru = 'Выполнен запрос к базе ЕГРЮЛ\ЕГРИП.'") + " " + РеквизитыКонтрагента.ОписаниеОшибки;
		Иначе
			ТекстПредупреждения = РеквизитыКонтрагента.ОписаниеОшибки;
		КонецЕсли;
		
		Если ОповещатьОбОшибке тогда
			ПоказатьОповещениеПользователя("Получении данных ЕГРЮЛ\ЕГРИП",, ТекстПредупреждения, БиблиотекаКартинок.Предупреждение32);
		КонецЕсли;	
		
	Иначе
		
		РезультатСравнения = СравнитьДанные(РеквизитыКонтрагента, ДанныеОбъектаДляСравнения());
		
		Если РезультатСравнения.ЕстьИзменения Тогда
			
			Если РезультатСравнения.ЕстьИзмененияВЗаполненныхРеквизитах Тогда 
				
				ОписаниеОповещенияПерезаполнить = Новый ОписаниеОповещения("ЗаполнениеРеквизитовКонтрагентаПоИННЗавершение",
				                                                           ЭтотОбъект,
				                                                           Новый Структура("РеквизитыКонтрагента", РеквизитыКонтрагента));
				ТекстВопроса = НСтр("ru = 'Перезаполнить реквизиты контрагента на основании данных ЕГРЮЛ\ЕГРИП?'");
				ПоказатьВопрос(ОписаниеОповещенияПерезаполнить, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
			Иначе
				
				ЗаполнитьРевизитыКонтрагентаПоПолученнымДанным(РеквизитыКонтрагента);
				
			КонецЕсли;
			
		Иначе 
			ПоказатьОповещениеПользователя("Получении данных ЕГРЮЛ\ЕГРИП",, 
				"Данные соответсвуют ЕГРЮЛ\ЕГРИП. Изменения не требуется.", БиблиотекаКартинок.Информация32);	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеРеквизитовКонтрагентаПоИННЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьРевизитыКонтрагентаПоПолученнымДанным(ДополнительныеПараметры.РеквизитыКонтрагента);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРевизитыКонтрагентаПоПолученнымДанным(РеквизитыКонтрагента)
//	Кутья
//	ЗаполнитьЗначенияСвойств(Объект, РеквизитыКонтрагента, "ИНН, Наименование");
	ЗаполнитьЗначенияСвойств(Объект, РеквизитыКонтрагента, "ИНН");
	Если РеквизитыКонтрагента.Свойство("КПП") Тогда
		Объект.КПП = РеквизитыКонтрагента.КПП;
	КонецЕсли;
//	Объект.ПолноеНаименование = РеквизитыКонтрагента.НаименованиеПолное;
	
	Если РеквизитыКонтрагента.Свойство("Телефон")
		И НЕ РеквизитыКонтрагента.Телефон = Неопределено Тогда
		
		Отбор = Новый Структура("Вид", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента"));
		ДанныеСтроки = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
		Если ДанныеСтроки.ВГраница() = -1 Тогда
			Возврат;
		КонецЕсли;
		ДанныеСтроки[0].Представление = РеквизитыКонтрагента.Телефон.Представление;
		ДанныеСтроки[0].ЗначенияПолей = РеквизитыКонтрагента.Телефон.КонтактнаяИнформация;
		
		ЭтотОбъект[ДанныеСтроки[0].ИмяРеквизита] = РеквизитыКонтрагента.Телефон.Представление;
		
	КонецЕсли;
	
	Если РеквизитыКонтрагента.Свойство("ЮридическийАдрес")
		И НЕ РеквизитыКонтрагента.ЮридическийАдрес = Неопределено Тогда
		
		Отбор = Новый Структура("Вид", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента"));
		ДанныеСтроки = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
		Если ДанныеСтроки.ВГраница() = -1 Тогда
			Возврат;
		КонецЕсли;
		ДанныеСтроки[0].Представление = РеквизитыКонтрагента.ЮридическийАдрес.Представление;
		ДанныеСтроки[0].ЗначенияПолей = РеквизитыКонтрагента.ЮридическийАдрес.КонтактнаяИнформация;
		
		ЭтотОбъект[ДанныеСтроки[0].ИмяРеквизита] = РеквизитыКонтрагента.ЮридическийАдрес.Представление;
		
	КонецЕсли;
	
	УстановитьТекстПроверкиДляИННКПП();
	
	ЗаполнитьСписокНаименованийСервер();
	
	Модифицированность = Истина;

КонецПроцедуры

//&НаКлиенте
//Процедура СтранаОрганизацииПриИзменении(Элемент)
//	Объект.СтранаОрганизацииРазделительДанных = GlobalMDM.ПолучитьРеквизитНаСервере(Объект.СтранаОрганизации, "Код");
//КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоВладельцу(Список)

	Если Список.Отбор.Элементы.Количество() Тогда
		Отбор = Список.Отбор.Элементы[0];
	Иначе
		Отбор = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Отбор.ЛевоеЗначение = Список.Отбор.ДоступныеПоляОтбора.Элементы.Найти("Владелец").Поле;
	КонецЕсли; 
	Отбор.ПравоеЗначение = Объект.Ссылка;

КонецПроцедуры // 	УстановитьОтборПоВладельцу()

&НаКлиенте
Процедура ДоговорыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ПроверкаСсылкиНаЗапись(Отказ);

КонецПроцедуры

&НаКлиенте
Процедура БанковскиеСчетаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ПроверкаСсылкиНаЗапись(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛицензииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ПроверкаСсылкиНаЗапись(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПунктыРазгрузкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ПроверкаСсылкиНаЗапись(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСсылкиНаЗапись(Отказ)

	Если Параметры.Ключ.Пустая() Тогда
	
		Сообщить("Сначала запишите элемент.");
		
		Отказ = Истина;
	
	КонецЕсли;

КонецПроцедуры // ПроверкаСсылкиНаЗапись()
 
&НаКлиенте
Процедура БанковскийСчетСделатьОсновным(Команда)
	
	Если Элементы.БанковскиеСчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Элементы.БанковскиеСчета.ТекущаяСтрока) Тогда
		Возврат;
	КонецЕсли;

	Если Объект.ОсновнойБанковскийСчет = Элементы.БанковскиеСчета.ТекущаяСтрока Тогда
		Объект.ОсновнойБанковскийСчет = ПредопределенноеЗначение("Справочник.нсиБанковскиеСчета.ПустаяСсылка");
	Иначе
		Объект.ОсновнойБанковскийСчет = Элементы.БанковскиеСчета.ТекущаяСтрока;
	КонецЕсли;
	
	ПроверитьПометкуКнопкиУстановкиОсновногоБанковскогоСчета();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорСделатьОсновным(Команда)
	
	Если Элементы.Договоры.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТекущийДоговор = Элементы.Договоры.ТекущаяСтрока;
	
	Если НЕ ЗначениеЗаполнено(ТекущийДоговор) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеРеквизитаОбъекта(ТекущийДоговор, "ЭтоГруппа") Тогда
		Сообщить("Нельзя назначать основным договором - группу!");
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ДоговорКонтрагента", ТекущийДоговор);
	
	СтрокиДоговоров = Объект.ОсновныеДоговораКонтрагентов.НайтиСтроки(ПараметрыОтбора);
	
	Если СтрокиДоговоров.Количество() Тогда
		Объект.ОсновныеДоговораКонтрагентов.Удалить(Объект.ОсновныеДоговораКонтрагентов.Индекс(СтрокиДоговоров[0]));
	Иначе
		
		Для каждого СтрокаОсновнойДоговор Из Объект.ОсновныеДоговораКонтрагентов Цикл
			Если ЗначениеРеквизитаОбъекта(СтрокаОсновнойДоговор.ДоговорКонтрагента,"Организация") = ЗначениеРеквизитаОбъекта(ТекущийДоговор,"Организация") Тогда
				Объект.ОсновныеДоговораКонтрагентов.Удалить(Объект.ОсновныеДоговораКонтрагентов.Индекс(СтрокаОсновнойДоговор));
			КонецЕсли; 
		КонецЦикла; 
		
		СтрокаДоговора = Объект.ОсновныеДоговораКонтрагентов.Добавить();
		СтрокаДоговора.ДоговорКонтрагента = ТекущийДоговор;
	КонецЕсли; 
	
	ПроверитьПометкуКнопкиУстановкиОсновногоДоговора();
	
	Модифицированность = Истина;
	
КонецПроцедуры

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаСервереБезКонтекста
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита)

	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);

КонецФункции // ЗначениеРеквизитаОбъекта()
 
&НаКлиенте
Процедура ЛицензияСделатьОсновной(Команда)
	
	Если Элементы.Лицензии.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Элементы.Лицензии.ТекущаяСтрока) Тогда
		Возврат;
	КонецЕсли;
	 
	Если Объект.ОсновнаяЛицензия = Элементы.Лицензии.ТекущаяСтрока Тогда
		Объект.ОсновнаяЛицензия = ПредопределенноеЗначение("Справочник.алкЛицензии.ПустаяСсылка");
	Иначе
		Объект.ОсновнаяЛицензия = Элементы.Лицензии.ТекущаяСтрока;
	КонецЕсли;
	
	ПроверитьДоступностьКнопкиУстановкиОсновнойЛицензии();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПунктРазгрузкиСделатьОсновным(Команда)

	Если Элементы.ПунктыРазгрузки.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Элементы.ПунктыРазгрузки.ТекущаяСтрока) Тогда
		Возврат;
	КонецЕсли;

	Если Объект.алкОсновнойПунктРазгрузки = Элементы.ПунктыРазгрузки.ТекущаяСтрока Тогда
		Объект.алкОсновнойПунктРазгрузки = ПредопределенноеЗначение("Справочник.алкПунктыРазгрузки.ПустаяСсылка");
	Иначе
		Объект.алкОсновнойПунктРазгрузки = Элементы.ПунктыРазгрузки.ТекущаяСтрока;
	КонецЕсли;
	
	ПроверитьДоступностьКнопкиУстановкиОсновногоПунктаРазгрузки();
	
	Модифицированность = Истина;
	
КонецПроцедуры

// Процедура изменяет доступность кнопки установки основного банковского счета.
//
&НаКлиенте
Процедура ПроверитьПометкуКнопкиУстановкиОсновногоБанковскогоСчета()

	Если Элементы.БанковскиеСчета.ТекущиеДанные = Неопределено Тогда
		Элементы.БанковскиеСчетаБанковскийСчетСделатьОсновным.Доступность = Ложь;
		Элементы.БанковскиеСчетаБанковскийСчетСделатьОсновным.Пометка     = Ложь;
	Иначе
		Элементы.БанковскиеСчетаБанковскийСчетСделатьОсновным.Доступность = Истина;
		Элементы.БанковскиеСчетаБанковскийСчетСделатьОсновным.Пометка     = Элементы.БанковскиеСчета.ТекущаяСтрока = Объект.ОсновнойБанковскийСчет;
	КонецЕсли;
	
	БанковскиеСчета.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[2].Элементы[0].Отбор.Элементы[0].ПравоеЗначение = Объект.ОсновнойБанковскийСчет;

КонецПроцедуры

&НаКлиенте
Процедура БанковскиеСчетаПриАктивизацииСтроки(Элемент)
	
	ПроверитьПометкуКнопкиУстановкиОсновногоБанковскогоСчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорыПриАктивизацииСтроки(Элемент)
	
	ПроверитьПометкуКнопкиУстановкиОсновногоДоговора();
	
КонецПроцедуры

&НаКлиенте
Процедура ЛицензииПриАктивизацииСтроки(Элемент)
	ПроверитьДоступностьКнопкиУстановкиОсновнойЛицензии();
КонецПроцедуры

&НаКлиенте
Процедура ПунктыРазгрузкиПриАктивизацииСтроки(Элемент)
	ПроверитьДоступностьКнопкиУстановкиОсновногоПунктаРазгрузки();
КонецПроцедуры

// Процедура изменяет доступность кнопки установки основного договора взаиморасчетов.
//
&НаКлиенте
Процедура ПроверитьПометкуКнопкиУстановкиОсновногоДоговора()

	Если Элементы.Договоры.ТекущиеДанные = Неопределено Тогда
		Элементы.ДоговорыДоговорСделатьОсновным.Доступность = Ложь;
		Элементы.ДоговорыДоговорСделатьОсновным.Пометка     = Ложь;
		
	Иначе
		Если ЗначениеРеквизитаОбъекта(Элементы.Договоры.ТекущаяСтрока, "ЭтоГруппа") Тогда
			Элементы.ДоговорыДоговорСделатьОсновным.Доступность = Ложь;
			Элементы.ДоговорыДоговорСделатьОсновным.Пометка     = Ложь;
			
		Иначе
			Элементы.ДоговорыДоговорСделатьОсновным.Доступность = Истина;
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ДоговорКонтрагента", Элементы.Договоры.ТекущаяСтрока);
			
			СтрокиДоговоров = Объект.ОсновныеДоговораКонтрагентов.НайтиСтроки(ПараметрыОтбора);
			
			Элементы.ДоговорыДоговорСделатьОсновным.Пометка     = СтрокиДоговоров.Количество()>0;
			
		КонецЕсли;
	КонецЕсли;
	
	CписокДоговоров = Новый СписокЗначений;
	CписокДоговоров.ЗагрузитьЗначения(ПолучитьСписокОсновныхДоговоров());
	
	Договоры.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[2].Элементы[0].Отбор.Элементы[0].ПравоеЗначение = CписокДоговоров;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокОсновныхДоговоров()

	Возврат Объект.ОсновныеДоговораКонтрагентов.Выгрузить().ВыгрузитьКолонку("ДоговорКонтрагента");

КонецФункции // ПолучитьСписокОсновныхДоговоров()
 

&НаКлиенте
Процедура ПроверитьДоступностьКнопкиУстановкиОсновнойЛицензии()

	Если Элементы.Лицензии.ТекущиеДанные = Неопределено Тогда
		Элементы.ЛицензииЛицензияСделатьОсновной.Доступность = Ложь;
		Элементы.ЛицензииЛицензияСделатьОсновной.Пометка = Ложь;
	Иначе
		Элементы.ЛицензииЛицензияСделатьОсновной.Доступность = Истина;
		Элементы.ЛицензииЛицензияСделатьОсновной.Пометка = Элементы.Лицензии.ТекущаяСтрока = Объект.ОсновнаяЛицензия;
	КонецЕсли; 

	Лицензии.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[2].Элементы[0].Отбор.Элементы[0].ПравоеЗначение = Объект.ОсновнаяЛицензия;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДоступностьКнопкиУстановкиОсновногоПунктаРазгрузки()

	Если Элементы.ПунктыРазгрузки.ТекущиеДанные = Неопределено Тогда
		Элементы.ПунктыРазгрузкиПунктРазгрузкиСделатьОсновным.Доступность = Ложь;
		Элементы.ПунктыРазгрузкиПунктРазгрузкиСделатьОсновным.Пометка = Ложь;
	Иначе
		Элементы.ПунктыРазгрузкиПунктРазгрузкиСделатьОсновным.Доступность = Истина;
		Элементы.ПунктыРазгрузкиПунктРазгрузкиСделатьОсновным.Пометка = Элементы.ПунктыРазгрузки.ТекущаяСтрока = Объект.алкОсновнойПунктРазгрузки;
	КонецЕсли; 

	ПунктыРазгрузки.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[2].Элементы[0].Отбор.Элементы[0].ПравоеЗначение = Объект.алкОсновнойПунктРазгрузки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПокупательПриИзменении(Элемент)
	
	//фыв++   
	Если Объект.Покупатель Тогда
		Элементы.СтраницыДебитора.Доступность=Истина;
		Элементы.ОрганизацииДебитора.Доступность=Истина;
		Элементы.КодыSAPДебитора.Доступность=Истина;
	Иначе
		Режим=РежимДиалогаВопрос.ДаНет;
		Оповещение=Новый ОписаниеОповещения("ПослеЗакрытияВопроса",ЭтаФорма, Параметры);
		ПоказатьВопрос(Оповещение, "Все поля, относящиеся к ДЕБИТОРУ, будут очищены! Продолжить?", Режим, 0);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.СтраницыДебитора.Доступность=Ложь;
	Элементы.КодыSAPДебитора.Доступность=Ложь;
	Элементы.ОрганизацииДебитора.Доступность=Ложь;
	
	Для каждого Элем Из Элементы.ПодгруппаДебиторы1.ПодчиненныеЭлементы Цикл
		Объект[Элем.Имя]=Неопределено;
	КонецЦикла;
	
	Для каждого Элем Из Элементы.ПодгруппаДебиторы2.ПодчиненныеЭлементы Цикл
		Объект[Элем.Имя]=Неопределено;
	КонецЦикла;
	
	ТабЧасть=Объект.СписокОрганизацийSAP;
	ТабЧасть.Очистить();
	
	ТабЧасть=Объект.КодыSAP;
	ТабЧасть.Очистить();
	
КонецПроцедуры


&НаКлиенте
Процедура ПоставщикПриИзменении(Элемент)
	
	//фыв++   
	Если Объект.Поставщик Тогда
		Элементы.Кредиторы.Доступность=Истина;
		Элементы.КодыSAPКредитора.Доступность=Истина;
		Элементы.ОрганизацииКредитора.Доступность=Истина;
	Иначе
		Режим=РежимДиалогаВопрос.ДаНет;
		Оповещение=Новый ОписаниеОповещения("ПослеЗакрытияВопросаКредитора",ЭтаФорма, Параметры);
		ПоказатьВопрос(Оповещение, "Все поля, относящиеся к КРЕДИТОРУ, будут очищены! Продолжить?", Режим, 0);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаКредитора(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Кредиторы.Доступность=Ложь;
	Элементы.КодыSAPКредитора.Доступность=Ложь;
	Элементы.ОрганизацииКредитора.Доступность=Ложь;
	
	Для каждого Элем Из Элементы.Кредиторы.ПодчиненныеЭлементы Цикл
		Объект[Элем.Имя]=Неопределено;
	КонецЦикла;
	
	ТабЧасть=Объект.СписокОрганизацийSAPКред;
	ТабЧасть.Очистить();
	
	ТабЧасть=Объект.КодыSAPКредитор;
	ТабЧасть.Очистить();

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ВидимостьГоловногоКонтрагента()
	
	Элементы.ГоловнойКонтрагент.Видимость = Объект.ВходитВХолдинг;
	
КонецПроцедуры // ()

&НаКлиенте
Процедура ВходитВХолдингПриИзменении(Элемент)
	ВидимостьГоловногоКонтрагента();
КонецПроцедуры


&НаКлиенте
Процедура УчастникиОбменаПриИзменении(Элемент)
	
	//КутьяАА ITRR
	Если Элемент.ТекущийЭлемент.Имя = "УчастникиОбменаОбмен" Тогда
		Модифицированность = Истина;
		ИзменитьGlobalIDУчастникиОбмена(Элемент.ТекущиеДанные.Обмен, Элемент.ТекущиеДанные.УзелОбмена);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьGlobalIDУчастникиОбмена(Обмен, УзелОбмена)

	Если Объект.Нерезидент Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Организация", УзелОбмена.Организация);
		Если Обмен Тогда
			СтрокиGlobal = Объект.GlobalID.НайтиСтроки(Отбор);
			Если НЕ СтрокиGlobal.Количество() Тогда
				СтрокаGlobal = Объект.GlobalID.Добавить();
				СтрокаGlobal.Организация = УзелОбмена.Организация;
			КонецЕсли; 
		Иначе
			Отбор.Вставить("GlobalPartners", Справочники.GlobalPartners.ПустаяСсылка());
			СтрокиGlobal = Объект.GlobalID.НайтиСтроки(Отбор);
			Для каждого СтрокаGlobal Из СтрокиGlobal Цикл
				Объект.GlobalID.Удалить(СтрокаGlobal);
			КонецЦикла;
		КонецЕсли; 
	Иначе
		Если Обмен И НЕ Объект.GlobalID.Количество() Тогда
			Объект.GlobalID.Добавить();
		КонецЕсли;
	КонецЕсли; 

КонецПроцедуры // ИзменитьGlobalID()

&НаКлиенте
Процедура ЗапросGlobalID(Команда)
	
	Если Параметры.Ключ.Пустая()
		ИЛИ Модифицированность Тогда
		Сообщить("Перед запросом Global необходимо записать объект.", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеGlobalID = Элементы.GlobalID.ТекущиеДанные;
	
	Если ТекущиеДанныеGlobalID = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	СсылкаGlobal = ТекущиеДанныеGlobalID.GlobalPartners;
	
	Если ЗначениеЗаполнено(СсылкаGlobal) Тогда
		State = ЗначениеРеквизитаОбъекта(СсылкаGlobal, "State");
		
		Если State = ПредопределенноеЗначение("Перечисление.States.InProgress") Тогда
			Сообщить("По данному элементу уже выполняется запрос. Статус обмена In Progress.", СтатусСообщения.Важное);
			ОткрытьФорму("Справочник.GlobalPartners.ФормаОбъекта", Новый Структура("Ключ", СсылкаGlobal),ЭтаФорма,,,,Новый ОписаниеОповещения("ПриЗакрытииФормыGlobal",ЭтаФорма));
//			ОткрытьФорму("ВнешняяОбработка.ФормаКонтрагента.Форма.ФормаЭлементаGlobal", Новый Структура("Ключ", СсылкаGlobal),ЭтаФорма,,,,Новый ОписаниеОповещения("ПриЗакрытииФормыGlobal",ЭтаФорма));
		ИначеЕсли State = ПредопределенноеЗначение("Перечисление.States.Rejected") Тогда
			Сообщить("По данному элементу запрос был отклонен. Статус обмена Rejected.", СтатусСообщения.Важное);
			ОткрытьФорму("Справочник.GlobalPartners.ФормаОбъекта", Новый Структура("Ключ", СсылкаGlobal),ЭтаФорма,,,,Новый ОписаниеОповещения("ПриЗакрытииФормыGlobal",ЭтаФорма));
//			ОткрытьФорму("ВнешняяОбработка.ФормаКонтрагента.Форма.ФормаЭлементаGlobal", Новый Структура("Ключ", СсылкаGlobal),ЭтаФорма,,,,Новый ОписаниеОповещения("ПриЗакрытииФормыGlobal",ЭтаФорма));
		ИначеЕсли State = ПредопределенноеЗначение("Перечисление.States.Approved") Тогда
//080819			
			ОткрытьФорму("Справочник.GlobalPartners.ФормаОбъекта", Новый Структура("Ключ", СсылкаGlobal),ЭтаФорма,,,,Новый ОписаниеОповещения("ПриЗакрытииФормыGlobal",ЭтаФорма));
//			ОткрытьФорму("ВнешняяОбработка.ФормаКонтрагента.Форма.ФормаЭлементаGlobal", Новый Структура("Ключ", СсылкаGlobal),ЭтаФорма,,,,Новый ОписаниеОповещения("ПриЗакрытииФормыGlobal",ЭтаФорма));
		Иначе
			ПараметрыДляФормы = ЗаполнитьАтрибутыGlobal(Объект.Ссылка, ТекущиеДанныеGlobalID.Организация, СсылкаGlobal);
//080819	
			ОткрытьФорму("Справочник.GlobalPartners.ФормаОбъекта",ПараметрыДляФормы,ЭтаФорма,,,,Новый ОписаниеОповещения("ПриЗакрытииФормыGlobal",ЭтаФорма,ТекущиеДанныеGlobalID));
//			ОткрытьФорму("ВнешняяОбработка.ФормаКонтрагента.Форма.ФормаЭлементаGlobal",ПараметрыДляФормы,ЭтаФорма,,,,Новый ОписаниеОповещения("ПриЗакрытииФормыGlobal",ЭтаФорма,ТекущиеДанныеGlobalID));
		КонецЕсли; 
	Иначе
		ПараметрыДляФормы = ЗаполнитьАтрибутыGlobal(Объект.Ссылка, ТекущиеДанныеGlobalID.Организация);
//080819	
		ОткрытьФорму("Справочник.GlobalPartners.ФормаОбъекта",ПараметрыДляФормы,ЭтаФорма,,,,Новый ОписаниеОповещения("ПриЗакрытииФормыGlobal",ЭтаФорма,ТекущиеДанныеGlobalID));
//		ОткрытьФорму("ВнешняяОбработка.ФормаКонтрагента.Форма.ФормаЭлементаGlobal",ПараметрыДляФормы,ЭтаФорма,,,,Новый ОписаниеОповещения("ПриЗакрытииФормыGlobal",ЭтаФорма,ТекущиеДанныеGlobalID));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииФормыGlobal(Ответ, ДополнительныеПараметры) Экспорт 

	Если ЗначениеЗаполнено(Ответ)
		И НЕ ЗначениеЗаполнено(ДополнительныеПараметры.GlobalPartners) Тогда
		Объект.GlobalID[ДополнительныеПараметры.НомерСтроки-1].GlobalPartners = Ответ;
		ОтветGlobalID = ЗначениеРеквизитаОбъекта(Ответ, "GlobalID");
		Объект.GlobalIDs = ?(ПустаяСтрока(Объект.GlobalIDs), ОтветGlobalID, Объект.GlobalIDs+"; "+ОтветGlobalID);
		ЭтаФорма.Записать();
	КонецЕсли; 
		
КонецПроцедуры // ПриЗакрытииФормыGlobal()

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруGlobal(СсылкаLocal, Организация)

	Возврат MDMСервер.interface(СсылкаLocal).СтруктураСоответствияАтрибутовGlobal(СсылкаLocal, Организация);

КонецФункции // ПолучитьСтруктуруGlobal()

&НаКлиенте
Функция ЗаполнитьАтрибутыGlobal(СсылкаLocal, Организация, Ключ = Неопределено)
	
	СтруктураGlobal = ПолучитьСтруктуруGlobal(СсылкаLocal, Организация);
	
	ПараметрыДляФормы = Новый Структура;
	ПараметрыДляФормы.Вставить("СтруктураGlobal", СтруктураGlobal);
	Если НЕ Ключ = Неопределено Тогда
		ПараметрыДляФормы.Вставить("Ключ", Ключ);
	КонецЕсли;
	
	Возврат ПараметрыДляФормы;
	
КонецФункции // ЗаполнитьАтрибутыИОткрытьФорму()

//ДЕАКТИВАЦИЯ ЗАПИСИ GLOBAL
&НаСервереБезКонтекста
Функция ДеактивацияGlobalНаСервере(СсылкаGlobal)
	
	Возврат GlobEx.ДеактивацияGlobal(СсылкаGlobal, Перечисления.PartnersStatuses.INACTIVE);

КонецФункции

&НаКлиенте
Процедура ДеактивацияGlobal(Команда)
	
	Если Параметры.Ключ.Пустая()
		ИЛИ Модифицированность Тогда
		Сообщить("Перед изменением статуса Global необходимо записать объект.", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеGlobalID = Элементы.GlobalID.ТекущиеДанные;
	
	Если ТекущиеДанныеGlobalID = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	GlobalPartner = ТекущиеДанныеGlobalID.GlobalPartners;
	
	Если ЗначениеЗаполнено(GlobalPartner) Тогда
		State = ЗначениеРеквизитаОбъекта(GlobalPartner, "State");
		Если State = ПредопределенноеЗначение("Перечисление.States.ПустаяСсылка")
			ИЛИ State = ПредопределенноеЗначение("Перечисление.States.Approved")
			ИЛИ State = ПредопределенноеЗначение("Перечисление.States.Rejected")
			ИЛИ State = ПредопределенноеЗначение("Перечисление.States.ToCorrection") Тогда
			ТекстВопроса = "Деактивация применяется только в случае ошибочных запросов. В остальных случаях используйте команду Изменить статус Global. Выполнить деактивацию?";
			ПоказатьВопрос(Новый ОписаниеОповещения("ПослеЗакрытияВопросаДеактивации", ЭтотОбъект, GlobalPartner),ТекстВопроса,РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет,"Деактивация записи Global");
			Возврат;
		Иначе
			Сообщить("Невозможно выполнить действие. Условие для выполнения State = Approved, Rejected или To Correction.");
		КонецЕсли; 
	Иначе
		Сообщить("Невозможно выполнить действие. Не заполнен Global Partner.");
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаДеактивации(Результат, СсылкаGlobal) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ДеактивацияGlobalНаСервере(СсылкаGlobal) Тогда
			ЭтаФорма.Прочитать();
			ОповеститьОбИзменении(СсылкаGlobal); 
			Сообщить("Запись успешно деактивирована.");
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры // ПослеЗакрытияВопросаДеактивации()

//ИЗМЕНЕНИЕ СТАТУСА GLOBAL
&НаСервереБезКонтекста
Функция ИзменитьСтатусGlobalНаСервере(СсылкаGlobal, ВыбранныйСтатус)
	Возврат GlobEx.ИзменитьСтатусGlobal_SQL(СсылкаGlobal, ВыбранныйСтатус);
КонецФункции

&НаКлиенте
Процедура ИзменитьСтатусGlobal(Команда)
	
	Если Параметры.Ключ.Пустая()
		ИЛИ Модифицированность Тогда
		Сообщить("Перед изменением статуса Global необходимо записать объект.", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеGlobalID = Элементы.GlobalID.ТекущиеДанные;
	
	Если ТекущиеДанныеGlobalID = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	GlobalPartner = ТекущиеДанныеGlobalID.GlobalPartners;
	
	Если ЗначениеЗаполнено(GlobalPartner) Тогда
		State = ЗначениеРеквизитаОбъекта(GlobalPartner, "State");
		Status = ЗначениеРеквизитаОбъекта(GlobalPartner, "Status");
		Если State = ПредопределенноеЗначение("Перечисление.States.Approved")
			И Status = ПредопределенноеЗначение("Перечисление.PartnersStatuses.ACTIVE") Тогда
			ПоказатьВводЗначения(Новый ОписаниеОповещения("ОбработатьВыборСтатуса",ЭтотОбъект,GlobalPartner), ПредопределенноеЗначение("Перечисление.PartnersStatuses.INACTIVE"),"Выберите новый статус",Тип("ПеречислениеСсылка.PartnersStatuses"));
		Иначе
			Сообщить("Невозможно выполнить действие. Условие для выполнения State = Approved, Global status = ACTIVE.");
		КонецЕсли; 
	Иначе
		Сообщить("Невозможно выполнить действие. Не заполнен Global Partner.");
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборСтатуса(ВыбранныйСтатус, СсылкаGlobal) Экспорт 
	
	Если ВыбранныйСтатус = ПредопределенноеЗначение("Перечисление.PartnersStatuses.INACTIVE") Тогда
		
		Если ИзменитьСтатусGlobalНаСервере(СсылкаGlobal, ВыбранныйСтатус) Тогда
			ЭтаФорма.Прочитать();
			ОповеститьОбИзменении(СсылкаGlobal); 
		КонецЕсли; 
	Иначе
		Сообщить("Невозможно выполнить действие. Новый статус должен быть INACTIVE.");
	КонецЕсли; 
	
КонецПроцедуры // ()

//ОТЗЫВ ЗАПРОСА GLOBAL
&НаСервереБезКонтекста
Функция ОтозватьЗапросGlobalIDНаСервере(СсылкаGlobal)
	Возврат GlobEx.ОтозватьЗапросGlobalID_SQL(СсылкаGlobal);
КонецФункции

&НаКлиенте
Процедура ОтозватьЗапросGlobalID(Команда)
	
	Если Параметры.Ключ.Пустая()
		ИЛИ Модифицированность Тогда
		Сообщить("Перед изменением статуса Global необходимо записать объект.", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеGlobalID = Элементы.GlobalID.ТекущиеДанные;
	
	Если ТекущиеДанныеGlobalID = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	СсылкаGlobal = ТекущиеДанныеGlobalID.GlobalPartners;
	
	Если ЗначениеЗаполнено(СсылкаGlobal) Тогда
		State = ЗначениеРеквизитаОбъекта(СсылкаGlobal, "State");
		Status = ЗначениеРеквизитаОбъекта(СсылкаGlobal, "Status");
		Если State = ПредопределенноеЗначение("Перечисление.States.InProgress") Тогда
			Если ОтозватьЗапросGlobalIDНаСервере(СсылкаGlobal) Тогда
				ЭтаФорма.Прочитать();
				ОповеститьОбИзменении(СсылкаGlobal); 
				Сообщить("Запрос успешно отозван.");
			КонецЕсли;
		Иначе
			Сообщить("Невозможно выполнить действие. Условие для выполнения State = In Progress.");
		КонецЕсли; 
	Иначе
		Сообщить("Невозможно выполнить действие. Не заполнен Global Partner.");
	КонецЕсли; 
	
КонецПроцедуры
