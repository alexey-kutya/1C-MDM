////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Записывает данные календарного графика за указанный год
//
&НаСервере
Процедура ЗаписатьКалендарныйГрафик(Знач НомерГода, Знач ТекущийОбъект = Неопределено)
	
	Если ТекущийОбъект = Неопределено Тогда
		ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	КонецЕсли;
	
	Справочники.Календари.ЗаписатьДанныеГрафикаВРегистр(ТекущийОбъект.Ссылка, НомерГода, ТаблицаРегистра);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДаннымПроизводственногоКалендаря(Год)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДанныеПроизводственногоКалендаря.Дата
	|ИЗ
	|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|ГДЕ
	|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
	|	И ДанныеПроизводственногоКалендаря.Год = &Год
	|	И ВЫБОР
	|			КОГДА &ВидКалендаря = ЗНАЧЕНИЕ(Перечисление.ВидыКалендарей.Пятидневка)
	|				ТОГДА ДанныеПроизводственногоКалендаря.ВидДня В (ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий), ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный))
	|			КОГДА &ВидКалендаря = ЗНАЧЕНИЕ(Перечисление.ВидыКалендарей.Шестидневка)
	|				ТОГДА ДанныеПроизводственногоКалендаря.ВидДня В (ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий), ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный), ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Суббота))
	|		КОНЕЦ");
	
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь",	Объект.ПроизводственныйКалендарь);
	Запрос.УстановитьПараметр("ВидКалендаря", 				Объект.ВидКалендаря);
	Запрос.УстановитьПараметр("Год", 						Год);
	
	ТаблицаРегистра.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Дата"));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Объект.Ссылка = Справочники.Календари.ОсновнойКалендарь Тогда 
		Если НЕ ЗначениеЗаполнено(Объект.ПроизводственныйКалендарь) Тогда 
		
			Объект.ПроизводственныйКалендарь = Справочники.ПроизводственныеКалендари.ПроизводственныйКалендарьРФ;
			Объект.ВидКалендаря = Перечисления.ВидыКалендарей.Пятидневка;
			ЗаполнитьФормуПоОбъекту(Истина);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.ВидКалендаря) Тогда 
			Объект.ВидКалендаря = Перечисления.ВидыКалендарей.Пятидневка;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.ТипГрафика) Тогда 
			Объект.ТипГрафика = Перечисления.нсиТипыРабочихГрафиков.ОсновнойГрафик;
		КонецЕсли;
		
		Элементы.ТипГрафика.СписокВыбора.Добавить(Перечисления.нсиТипыРабочихГрафиков.ОсновнойГрафик);

	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Если Параметры.Свойство("ЗначенияЗаполнения") Тогда 
			ЗаполнитьЗначенияСвойств(Объект,Параметры.ЗначенияЗаполнения);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда 
			Если Параметры.Свойство("ПроизводственныйКалендарь") Тогда
				Объект.ПроизводственныйКалендарь = Параметры.ПроизводственныйКалендарь;
			Иначе
				Объект.ПроизводственныйКалендарь = Справочники.ПроизводственныеКалендари.ПроизводственныйКалендарьРФ;
			КонецЕсли;
			
			Если Параметры.Свойство("ВидКалендаря") Тогда
				Объект.ВидКалендаря = Параметры.ВидКалендаря;
			Иначе
				Объект.ВидКалендаря = Перечисления.ВидыКалендарей.Пятидневка;
			КонецЕсли;
			
			Если Не Объект.ТипГрафика = Перечисления.нсиТипыРабочихГрафиков.ОсновнойГрафик Тогда 
				Объект.ТипГрафика = Перечисления.нсиТипыРабочихГрафиков.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда 
			ЗаполнитьФормуПоОбъекту(Ложь,Параметры.ЗначениеКопирования);
		Иначе
			ЗаполнитьФормуПоОбъекту(Истина);
		КонецЕсли;
	Иначе
		ЗаполнитьФормуПоОбъекту(Ложь);
	КонецЕсли;
	
	
	УправлениеВидимостьюИДоступом();
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗаполнитьФормуПоОбъекту();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьСвойстваЭлементовФормы();
	ПериодыДействияГрафикаПриАктивизацииСтроки(Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Перем НомерГода;
	
	Если Не ПараметрыЗаписи.Свойство("НомерГода", НомерГода) Тогда
		НомерГода = НомерТекущегоГода;
	КонецЕсли;
	
	ЗаписатьКалендарныйГрафик(НомерГода, ТекущийОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура УстановитьСвойстваЭлементовФормы()
	
	Если РучноеИзменение <> Неопределено И НЕ РучноеИзменение Тогда
		СпособРедактированияПоясняющийТекст = ""; 
		Элементы.ЗаполнитьПоКалендарю.Доступность = Ложь;
	Иначе
		СпособРедактированияПоясняющийТекст = НСтр("ru = 'Для редактирования рабочих и выходных дней календаря используйте двойной щелчок левой кнопкой мыши'");
		Элементы.ЗаполнитьПоКалендарю.Доступность = ЗначениеЗаполнено(Объект.ПроизводственныйКалендарь) И ЗначениеЗаполнено(Объект.ВидКалендаря);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФормуПоОбъекту(ЗаполнятьПоДаннымПроизводственногоКалендаря = Ложь, ЗначениеКопирования = Неопределено)
	
	Если НомерТекущегоГода = 0 Тогда
		НомерТекущегоГода = Год(ТекущаяДата());
	КонецЕсли;
	НомерПредыдущегоГода	= НомерТекущегоГода;
	
	Элементы.Календарь.НачалоПериодаОтображения	= Дата(НомерТекущегоГода, 1, 1);
	Элементы.Календарь.КонецПериодаОтображения	= Дата(НомерТекущегоГода, 12, 31);
	
	Если ЗаполнятьПоДаннымПроизводственногоКалендаря Тогда
		ЗаполнитьПоДаннымПроизводственногоКалендаря(НомерТекущегоГода);
	Иначе
		Если ЗначениеЗаполнено(ЗначениеКопирования) Тогда
			СсылкаНаКалендарь = ЗначениеКопирования;
		Иначе
			СсылкаНаКалендарь = Объект.Ссылка;
		КонецЕсли;
		ТаблицаРегистра.ЗагрузитьЗначения(Справочники.Календари.ПрочитатьДанныеГрафикаИзРегистра(СсылкаНаКалендарь, НомерТекущегоГода));		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

&НаКлиенте
Процедура ЗаполнитьПоКалендарю(Команда)
	
	ОписаниеОповещения = новый ОписаниеОповещения("ОбработкаОтветаЗаполнитьПоКалендарю",ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения,
		"Рабочие и выходные дни будут установлены по производственному календарю. Продолжить?",
		РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет,"Внимание"
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОтветаЗаполнитьПоКалендарю(Результат,ДП) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда 
		ЗаполнитьФормуПоОбъекту(Истина);
		Элементы.Календарь.Обновить();
	КонецЕсли;	
КонецПроцедуры

// ПоставляемыеДанные
&НаКлиенте
Процедура Изменить(Команда)
	
	УстановитьСвойстваЭлементовФормы();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура НомерТекущегоГодаПриИзменении(Элемент)
	
	Если НомерТекущегоГода < 1900 Тогда
		НомерТекущегоГода = НомерПредыдущегоГода;
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Записать измененные данные за %1 год?'"), Формат(НомерПредыдущегоГода, "ЧГ=0"));
		
		ОписаниеОповещения = новый ОписаниеОповещения("ОбработкаОтветаЗаписатьДанныеЗаГод",ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстСообщения, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьФормуПоОбъекту();
	Модифицированность = Ложь;
	Элементы.Календарь.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОтветаЗаписатьДанныеЗаГод(Результат,ДП) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если Объект.Ссылка.Пустая() Тогда
			Записать(Новый Структура("НомерГода", НомерПредыдущегоГода));
		Иначе
			ЗаписатьКалендарныйГрафик(НомерПредыдущегоГода);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьФормуПоОбъекту();
	Модифицированность = Ложь;
	Элементы.Календарь.Обновить();

КонецПроцедуры

&НаКлиенте
Процедура КалендарьПриВыводеПериода(Элемент, ОформлениеПериода)
	
	Для Каждого СтрокаОформленияПериода Из ОформлениеПериода.Даты Цикл
		СтрокаТаблицыРегистра = ТаблицаРегистра.НайтиПоЗначению(СтрокаОформленияПериода.Дата);
		
		Если СтрокаТаблицыРегистра = Неопределено Тогда
			СтрокаОформленияПериода.ЦветТекста = WebЦвета.Красный;
		Иначе
			СтрокаОформленияПериода.ЦветТекста = WebЦвета.Черный;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КалендарьВыбор(Элемент, ВыбраннаяДата)
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицыРегистра = ТаблицаРегистра.НайтиПоЗначению(ВыбраннаяДата);
	
	Если СтрокаТаблицыРегистра = Неопределено Тогда
		ТаблицаРегистра.Добавить(ВыбраннаяДата);
	Иначе
		ТаблицаРегистра.Удалить(СтрокаТаблицыРегистра);
	КонецЕсли;
	
	Если Не Модифицированность Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	Элемент.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодыГрафикаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ТД = Элементы.ПериодыГрафика.ТекущиеДанные;
	ТД1 = Элементы.ПериодыДействияГрафика.ТекущиеДанные;
	Если ТД1 = Неопределено ИЛИ ТД = Неопределено Тогда 
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТД.КлючСТроки = ТД1.КлючСтроки;
	Если ТД.ВремяНачала>ТД.ВремяОкончания Тогда 
		Отказ = Истина;
		ПоказатьПредупреждение(,"Время начала не может быть больше времени окончания!");
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ПериодыГрафикаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	СортироватьПериоды();
	ПериодыДействияГрафикаПриАктивизацииСтроки(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПериоды()
	ЗаполнитьНомерДН();
	Объект.ПериодыГрафика.Сортировать("КлючСтроки,НомерДн,ВремяНачала");
	Элементы.ПериодыГрафика.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНомерДН()
	ДниНедели = ПолучитьДниНеделиПоПорядку();
	Для Каждого Строка ИЗ Объект.ПериодыГрафика Цикл 
		Если ЗначениеЗаполнено(Строка.ДеньНедели) Тогда 
			Строка.НомерДН = ДниНедели.Найти(Строка.ДеньНедели);
		Иначе
			Строка.НомерДН = 1000;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьДниНеделиПоПорядку()
	Массив = Новый Массив;
	Для Каждого День Из Перечисления.нсиДниНедели Цикл 
		Массив.Добавить(День);
	КонецЦикла;
	Возврат Массив;
КонецФункции
	

&НаСервере
Процедура УправлениеВидимостьюИДоступом()
	Если Объект.Ссылка = Справочники.Календари.ОсновнойКалендарь Тогда 
		Элементы.ТипГрафика.Доступность = Ложь;
		Элементы.Владелец.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.ТипГрафика = Перечисления.нсиТипыРабочихГрафиков.РабочийГрафикПользователя Тогда 
		Если ТипЗнч(Объект.ВладелецКалендаря)<>Тип("СправочникСсылка.Пользователи") Тогда 
			Объект.ВладелецКалендаря = Справочники.Пользователи.ПустаяСсылка();
		КонецЕсли;
		Элементы.Владелец.Видимость = Истина;
	ИначеЕсли Объект.ТипГрафика = Перечисления.нсиТипыРабочихГрафиков.ОсновнойГрафик Тогда 
		Объект.ВладелецКалендаря = Неопределено;
		Элементы.Владелец.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТипГрафикаПриИзменении(Элемент)
	УправлениеВидимостьюИДоступом();
КонецПроцедуры

&НаКлиенте
Процедура ПериодыДействияГрафикаПриАктивизацииСтроки(Элемент)
	ТД = Элементы.ПериодыДействияГрафика.ТекущиеДанные;
	
	Если ТД<>Неопределено Тогда 
		стрОтбор = новый ФиксированнаяСтруктура("КлючСтроки",ТД.КлючСтроки);
	Иначе
		стрОтбор = новый ФиксированнаяСтруктура("КлючСтроки",Неопределено);
	КонецЕсли;
	Элементы.ПериодыГрафика.ОтборСтрок = стрОтбор;
КонецПроцедуры

&НаКлиенте
Процедура ПериодыДействияГрафикаПередУдалением(Элемент, Отказ)
	ТД = Элементы.ПериодыДействияГрафика.ТекущиеДанные;
	Если ТД<>Неопределено Тогда
		Отказ = Истина;
		ОписаниеОповещения = новый ОписаниеОповещения("ОбработкаОтветаУдалитьДатуИзмененияРасписания",ЭтотОбъект);
		ПоказатьВопрос(
			ОписаниеОповещения,
			"Удалить дату изменения расписания?",
			РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет,"Внимание"
		);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОтветаУдалитьДатуИзмененияРасписания(Результат, ДП) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ТД = Элементы.ПериодыДействияГрафика.ТекущиеДанные;
		СтрокиКУдалению = Объект.ПериодыГрафика.НайтиСтроки(новый Структура("КлючСтроки",ТД.КлючСтроки));
		Для Каждого Строка Из СтрокиКУдалению Цикл 
			Объект.ПериодыГрафика.Удалить(Строка);
		КонецЦикла;
		Объект.ПериодыДействияГрафика.Удалить(
			Объект.ПериодыДействияГрафика.НайтиПоИдентификатору(Элементы.ПериодыДействияГрафика.ТекущаяСтрока)
		);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПериодыГрафикаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	ТД = Элементы.ПериодыДействияГрафика.ТекущиеДанные;
	Если ТД = Неопределено Тогда 
		Отказ=Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТД.ДатаИзмененияРасписания) Тогда 
		Отказ=Истина;
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПериодыГрафикаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда 
		ТД = Элементы.ПериодыДействияГрафика.ТекущиеДанные;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПериодыДействияГрафикаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	нсиРаботаСФормамиКлиент.ПроверитьУникальностьСтроки(
		Элементы.ПериодыДействияГрафика,
		Объект.ПериодыДействияГрафика,
		"ДатаИзмененияРасписания",
		ОтменаРедактирования,
		Отказ
	);
КонецПроцедуры

&НаКлиенте
Процедура ПериодыДействияГрафикаПриИзменении(Элемент)
	Объект.ПериодыДействияГрафика.Сортировать("ДатаИзмененияРасписания");
	ПериодыДействияГрафикаПриАктивизацииСтроки(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ПериодыДействияГрафикаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НоваяСтрока Тогда 
		ДобавитьДниНедели(Элементы.ПериодыДействияГрафика.ТекущиеДанные.КлючСтроки);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДобавитьДниНедели(КлючСтроки)
	Для Каждого ДН Из Перечисления.нсиДниНедели Цикл
		Если Объект.ВидКалендаря = Перечисления.ВидыКалендарей.Пятидневка
			И ДН = Перечисления.нсиДниНедели.Суббота Тогда 
			Прервать;
		КонецЕсли;
			
		Если Объект.ВидКалендаря = Перечисления.ВидыКалендарей.Шестидневка
			И ДН = Перечисления.нсиДниНедели.Воскресенье Тогда 
			Прервать;
		КонецЕсли;
		
		НС = Объект.ПериодыГрафика.Добавить();
		НС.ДеньНедели = ДН;
		НС.КлючСтроки = КлючСтроки;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПериодыДействияГрафикаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда 
		Элементы.ПериодыДействияГрафика.ТекущиеДанные.КлючСтроки = новый УникальныйИдентификатор;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВремя(Команда)
	ОписаниеОповещения = новый ОписаниеОповещения("ОбработкаЗакрытияФормыВводаВремени",ЭтотОбъект);
	ОткрытьФорму("Справочник.Календари.Форма.ФормаВводаВремени",,ЭтотОбъект,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

Процедура ОбработкаЗакрытияФормыВводаВремени(Результат,ДП) Экспорт
	Если Результат <> Неопределено Тогда 
		Для Каждого Стр ИЗ Элементы.ПериодыГрафика.ВыделенныеСтроки Цикл 
			Строка = Объект.ПериодыГрафика.НайтиПоИдентификатору(Стр);
			Строка.ВремяНачала = Результат.ВремяНачала;
			Строка.ВремяОкончания = Результат.ВремяОкончания;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры