#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	
	ЦветСкрытыхВариантов = ЦветаСтиля.СкрытыйВариантОтчетаЦвет;
	ЦветВидимыхВариантов = ЦветаСтиля.ВидимыйВариантОтчетаЦвет;
	ЦветГруппыВариантовОтчетов = ЦветаСтиля.ГруппаВариантовОтчетовЦвет;
	ЦветПодсказки = ЦветаСтиля.ПоясняющийТекст;
	ШрифтЖирный = Новый Шрифт(, , Истина);
	
	НаборРеквизитов = ПолучитьРеквизиты();
	Для Каждого Реквизит Из НаборРеквизитов Цикл
		ПостоянныеРеквизиты.Добавить(Реквизит.Имя);
	КонецЦикла;
	
	Для Каждого Команда Из Команды Цикл
		ПостоянныеКоманды.Добавить(Команда.Имя);
	КонецЦикла;
	
	ЗагрузитьНастройкиНаСервере();
	ЗаполнитьПанельСправочников();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	#Если ВебКлиент Тогда
		ВебКлиент = Истина;
	#Иначе
		ВебКлиент = Ложь;
	#КонецЕсли
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Настроить(Команда)
	РежимНастройки = Не РежимНастройки;
	Если НЕ РежимНастройки Тогда 
		СохранитьНастройкиНаСервере();
	КонецЕсли;
	ОбновитьОтображение();
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	ОбновитьПанельСправочников();
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьВсе(Команда)
	ПоказыватьВсе = НЕ ПоказыватьВсе;
	ОбновитьОтображение();
КонецПроцедуры

&НаКлиенте
Процедура СброситьМоиНастройки(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаОтветаСброситьНастройки",ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения,"Сбросить настройки?",РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
КонецПроцедуры

// Обрабатывает ответ на вопрос о сбросе настроек.
//
&НаКлиенте
Процедура ОбработкаОтветаСброситьНастройки(Результат, ДП) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда 
		Для Каждого Строка Из СправочникиПанели Цикл 
			Если Строка.Используется Тогда 
				Строка.Видимость = Истина;
				Строка.Важный = Ложь;
				Строка.БыстрыйДоступ = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Строка Из КомандыСправочников Цикл 
			Если Строка.Используется Тогда 
				Строка.Видимость = Истина;
			КонецЕсли;
		КонецЦикла;
		
		СохранитьНастройкиНаСервере();
		
		ОбновитьОтображение();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура СохранитьНастройкиНаСервере()
	СтрокиСправочников = СправочникиПанели.НайтиСтроки(новый Структура("Используется",Истина));
	СтрокиКоманд = КомандыСправочников.НайтиСтроки(новый Структура("Используется",Истина));
	Настройка = Новый Структура("ПоказыватьВсе,СправочникиПанели,КомандыСправочников",
		ПоказыватьВсе,
		СправочникиПанели.Выгрузить(СтрокиСправочников),
		КомандыСправочников.Выгрузить(СтрокиКоманд)
	);
	ХранилищаНастроек.нсиХранилищеНастроекПанелиСправочников.Сохранить("ОбщаяФорма.нсиПанельСправочников",,Настройка);
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиНаСервере()
	Настройка = ХранилищаНастроек.нсиХранилищеНастроекПанелиСправочников.Загрузить("ОбщаяФорма.нсиПанельСправочников");
	Если Настройка <> Неопределено Тогда 
		ПоказыватьВсе = Настройка.ПоказыватьВсе;
		СправочникиПанели.Очистить();
		Для Каждого Строка Из Настройка.СправочникиПанели Цикл
			НС = СправочникиПанели.Добавить();
			ЗаполнитьЗначенияСвойств(НС,Строка);
		КонецЦикла;
		КомандыСправочников.Очистить();
		Для Каждого Строка Из Настройка.КомандыСправочников Цикл
			НС = КомандыСправочников.Добавить();
			ЗаполнитьЗначенияСвойств(НС,Строка);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьПанельСправочников(Знач Событие = "")
	
	// Заполнение панели отчетов
	ЗаполнитьПанельСправочников();
КонецПроцедуры

&НаСервере
Процедура ОчиститьФормуОтДобавленныхЭлементов()
	УдалитьПодчиненныеЭлементы(Элементы.БыстрыйДоступКолонка1);
	УдалитьПодчиненныеЭлементы(Элементы.БыстрыйДоступКолонка2);
	УдалитьПодчиненныеЭлементы(Элементы.БыстрыйДоступКолонка3);
	
	УдалитьПодчиненныеЭлементы(Элементы.СГруппойКолонка1);
	УдалитьПодчиненныеЭлементы(Элементы.СГруппойКолонка2);
	УдалитьПодчиненныеЭлементы(Элементы.СГруппойКолонка3);
КонецПроцедуры

&НаСервере
Процедура УдалитьПодчиненныеЭлементы(Группа)
	Индекс = Группа.ПодчиненныеЭлементы.Количество()-1;
	Пока Индекс >= 0 Цикл
		Элементы.Удалить(Группа.ПодчиненныеЭлементы[Индекс]);
		Индекс = Индекс - 1;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнформациюОДоменах()
	Домены.Очистить();
	Запрос = новый Запрос(
		"ВЫБРАТЬ
		|	нсиДомены.Ссылка,
		|	нсиДомены.Порядок КАК Порядок
		|ИЗ
		|	Справочник.нсиДомены КАК нсиДомены
		|ГДЕ
		|	НЕ нсиДомены.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок"
	);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = Домены.Добавить();
		СтрокаТаблицы.Ссылка = Выборка.Ссылка;
		СтрокаТаблицы.Приоритет = Выборка.Порядок;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПанельСправочников()
	ЗаполнитьИнформациюОДоменах();
	НайтиСправочникиДляВывода();
	ОбновитьОтображение();
КонецПроцедуры

&НаСервере
Процедура ВывестиСправочникиБыстрыйДоступ()
	НомерКолонки = 1;
	КоличествоСтрок = 0;
	ТекущаяКолонка = Элементы.БыстрыйДоступКолонка1;
	НайденныеСтроки = СправочникиПанели.НайтиСтроки(новый Структура("БыстрыйДоступ",Истина));
	Если НайденныеСтроки.Количество() > 0 Тогда 
		Для Каждого СтрокаСправочника Из НайденныеСтроки Цикл
			Если КоличествоСтрок >= МаксКоличествоСтрокПоКолонкамБыстрыйДоступ[НомерКолонки-1] И НомерКолонки < 3 Тогда 
				КоличествоСтрок = 0;
				НомерКолонки = НомерКолонки + 1;
				ТекущаяКолонка = Элементы["БыстрыйДоступКолонка"+НомерКолонки];
			КонецЕсли;
			ДобавитьЭлементыСправочника(СтрокаСправочника,ТекущаяКолонка,КоличествоСтрок);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВывестиСправочники()
	НомерКолонки = 1;
	КоличествоСтрок = 0;
	ТекущаяКолонка = Элементы.СГруппойКолонка1;
	Для Каждого СтрокаДомена Из Домены Цикл
		НайденныеСтроки = СправочникиПанели.НайтиСтроки(новый Структура("Домен,БыстрыйДоступ",СтрокаДомена.Ссылка,Ложь));
		Если НайденныеСтроки.Количество() > 0 Тогда 
			ГруппаДомена = ДобавитьГруппуДомена(СтрокаДомена.Ссылка,ТекущаяКолонка);
			ЕстьСправочники = Ложь;
			Для Каждого СтрокаСправочника Из НайденныеСтроки Цикл
				Если КоличествоСтрок >= МаксКоличествоСтрокПоКолонкам[НомерКолонки-1] И НомерКолонки < 3 Тогда 
					КоличествоСтрок = 0;
					НомерКолонки = НомерКолонки + 1;
					ТекущаяКолонка = Элементы["СГруппойКолонка"+НомерКолонки];
					Если ЕстьСправочники Тогда 
						ЕстьСправочники = Ложь;
						КоличествоСтрок = КоличествоСтрок + 1;
					КонецЕсли;
					ГруппаДомена = ДобавитьГруппуДомена(СтрокаДомена.Ссылка,ТекущаяКолонка,Истина);
				КонецЕсли;
				ПредКоличество = КоличествоСтрок;
				ДобавитьЭлементыСправочника(СтрокаСправочника,ГруппаДомена,КоличествоСтрок);
				Если ПредКоличество<>КоличествоСтрок Тогда 
					ЕстьСправочники = Истина;
				КонецЕсли;
			КонецЦикла;
			Если ЕстьСправочники Тогда 
				ЕстьСправочники = Ложь;
				КоличествоСтрок = КоличествоСтрок + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	НайденныеСтроки = СправочникиПанели.НайтиСтроки(новый Структура("Домен,БыстрыйДоступ",Справочники.нсиДомены.ПустаяСсылка(),Ложь));
	Если НайденныеСтроки.Количество() > 0 Тогда 
		ГруппаДомена = ДобавитьГруппуДомена(Справочники.нсиДомены.ПустаяСсылка(),ТекущаяКолонка,КоличествоСтрок);
		ЕстьСправочники = Ложь;
		Для Каждого СтрокаСправочника Из НайденныеСтроки Цикл
			Если КоличествоСтрок >= МаксКоличествоСтрокПоКолонкам[НомерКолонки-1] И НомерКолонки < 3 Тогда 
				КоличествоСтрок = 0;
				НомерКолонки = НомерКолонки + 1;
				ТекущаяКолонка = Элементы["СГруппойКолонка"+НомерКолонки];
				Если ЕстьСправочники Тогда 
					ЕстьСправочники = Ложь;
					КоличествоСтрок = КоличествоСтрок + 1;
				КонецЕсли;
				ГруппаДомена = ДобавитьГруппуДомена(Справочники.нсиДомены.ПустаяСсылка(),ТекущаяКолонка,Истина);
			КонецЕсли;
			ПредКоличество = КоличествоСтрок;
			ДобавитьЭлементыСправочника(СтрокаСправочника,ГруппаДомена,КоличествоСтрок);
			Если ПредКоличество<>КоличествоСтрок Тогда 
				ЕстьСправочники = Истина;
			КонецЕсли;
		КонецЦикла;
		Если ЕстьСправочники Тогда 
			ЕстьСправочники = Ложь;
			КоличествоСтрок = КоличествоСтрок + 1;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ДобавитьГруппуДомена(Домен, ГруппаРодитель, Продолжение = Ложь)
	ГруппаДомена = Элементы.Добавить(ГруппаРодитель.Имя+"ГруппаДомена_"+СтрЗаменить(Строка(Домен.УникальныйИдентификатор()),"-","_"),Тип("ГруппаФормы"),ГруппаРодитель);
	ГруппаДомена.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаДомена.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаДомена.Поведение = ПоведениеОбычнойГруппы.Свертываемая;
	ГруппаДомена.РастягиватьПоГоризонтали = Истина;
	ГруппаДомена.ЦветТекстаЗаголовка = ЦветГруппыВариантовОтчетов;
	
	Если ЗначениеЗаполнено(Домен) Тогда 
		ГруппаДомена.Заголовок = Строка(Домен)+ ?(Продолжение,"(продолжение)","");
	Иначе
		ГруппаДомена.Заголовок = "Не включенные в домены"+ ?(Продолжение,"(продолжение)","");
	КонецЕсли;
	
	Возврат ГруппаДомена;
КонецФункции

&НаСервере
Процедура ДобавитьЭлементыСправочника(СтрокаСправочника, ГруппаРодитель,КоличествоСтрок)
	Если СтрокаСправочника.Используется Тогда 
		Если НЕ СтрокаСправочника.Видимость И НЕ РежимНастройки И НЕ ПоказыватьВсе Тогда 
			Возврат;
		КонецЕсли;
		
		ИмяЭлемента = Формат(СтрокаСправочника.ПолучитьИдентификатор(),"ЧН=0; ЧГ=0");
		
		ГруппаСправочника = СоздатьГруппуБезОтображения("ГруппаСправочника_"+ИмяЭлемента, ГруппаРодитель);
		ГруппаСправочника.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;

		Надпись = Элементы.Добавить("ОткрытьСписок_"+ИмяЭлемента, Тип("ДекорацияФормы"),ГруппаСправочника);
		Надпись.Вид = ВидДекорацииФормы.Надпись;
		Надпись.Гиперссылка = Истина;
		Надпись.Заголовок =  СтрокаСправочника.Наименование;
		Надпись.АвтоМаксимальнаяШирина = Ложь;
		Надпись.УстановитьДействие("Нажатие","ОбработкаНажатия");
		Надпись.ЦветТекста = ?(СтрокаСправочника.Видимость,ЦветВидимыхВариантов,ЦветСкрытыхВариантов);
		Надпись.Шрифт = ?(
			СтрокаСправочника.Важный,
			Новый Шрифт(Надпись.Шрифт,,,Истина),
			Новый Шрифт(Надпись.Шрифт,,,Ложь)
		);
		
		Команда = Команды.Добавить("ПереключитьБыстрыйДоступ_"+ИмяЭлемента);
		Команда.Действие = "Подключаемый_ПереключитьБыстрыйДоступ";
		
		Кнопка = Элементы.Добавить(Команда.Имя, Тип("КнопкаФормы"), Надпись.КонтекстноеМеню);
		Кнопка.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
		Кнопка.Отображение = ОтображениеКнопки.Картинка;
		Кнопка.Картинка = ?(СтрокаСправочника.БыстрыйДоступ,БиблиотекаКартинок["БыстрыйДоступУдалить"],БиблиотекаКартинок["БыстрыйДоступДобавить"]);
		Кнопка.ИмяКоманды = Команда.Имя;
		Кнопка.Заголовок = ?(СтрокаСправочника.БыстрыйДоступ,"Убрать из быстрого доступа","Добавить в быстрый доступ");
		
		
		Если РежимНастройки Тогда 
			Команда = Команды.Добавить("УстановитьВидимость_"+ИмяЭлемента);
			Команда.Действие = "Подключаемый_УстановитьВидимость";
			
			Кнопка = Элементы.Добавить(Команда.Имя, Тип("КнопкаФормы"), Надпись.КонтекстноеМеню);
			Кнопка.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
			Кнопка.Отображение = ОтображениеКнопки.Картинка;
			//Кнопка.Картинка = БиблиотекаКартинок["ПрочиеПользовательскиеНастройки"];
			Кнопка.ИмяКоманды = Команда.Имя;
			Кнопка.Заголовок = ?(СтрокаСправочника.Видимость,"Скрыть","Показать");
			
			Команда = Команды.Добавить("Выделить_"+ИмяЭлемента);
			Команда.Действие = "Подключаемый_Выделить";
			
			Кнопка = Элементы.Добавить(Команда.Имя, Тип("КнопкаФормы"), Надпись.КонтекстноеМеню);
			Кнопка.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
			Кнопка.Отображение = ОтображениеКнопки.Картинка;
			Кнопка.Картинка = БиблиотекаКартинок["УвеличитьШрифт"];
			Кнопка.ИмяКоманды = Команда.Имя;
			Кнопка.Заголовок = ?(СтрокаСправочника.Важный,"Снять выделение","Выделить");
			
			Команда = Команды.Добавить("ПереместитьВверх_"+ИмяЭлемента);
			Команда.Действие = "Подключаемый_ПереместитьВверх";
			
			Кнопка = Элементы.Добавить(Команда.Имя, Тип("КнопкаФормы"), Надпись.КонтекстноеМеню);
			Кнопка.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
			Кнопка.Отображение = ОтображениеКнопки.Картинка;
			Кнопка.Картинка = БиблиотекаКартинок["ПереместитьВверх"];
			Кнопка.ИмяКоманды = Команда.Имя;
			Кнопка.Заголовок = "Переместить вверх";
			
			Команда = Команды.Добавить("ПереместитьВниз_"+ИмяЭлемента);
			Команда.Действие = "Подключаемый_ПереместитьВниз";
			
			Кнопка = Элементы.Добавить(Команда.Имя, Тип("КнопкаФормы"), Надпись.КонтекстноеМеню);
			Кнопка.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
			Кнопка.Отображение = ОтображениеКнопки.Картинка;
			Кнопка.Картинка = БиблиотекаКартинок["ПереместитьВниз"];
			Кнопка.ИмяКоманды = Команда.Имя;
			Кнопка.Заголовок = "Переместить вниз";
			
		КонецЕсли;
		
		
		КоличествоСтрок = КоличествоСтрок + 1;
		
		СтрокиКоманд = КомандыСправочников.НайтиСтроки(новый Структура("Справочник,Домен",СтрокаСправочника.Справочник,СтрокаСправочника.Домен));
		Для Каждого СтрокаКоманды Из СтрокиКоманд Цикл
			ДобавитьЭлементыКоманды(СтрокаСправочника, СтрокаКоманды,ГруппаСправочника,КоличествоСтрок);
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементыКоманды(СтрокаСправочника, СтрокаКоманды, ГруппаРодитель,КоличествоСтрок)
	Если СтрокаКоманды.Используется Тогда
		
		Если НЕ СтрокаКоманды.Видимость И НЕ РежимНастройки И НЕ ПоказыватьВсе Тогда 
			Возврат;
		КонецЕсли;
		
		ИмяЭлемента = Формат(СтрокаКоманды.ПолучитьИдентификатор(),"ЧН=0; ЧГ=0");
		
		ГруппаКоманды = СоздатьГруппуБезОтображения("ГруппаКоманды_"+ИмяЭлемента, ГруппаРодитель);
		
		СоздатьОтступ("ОтступКоманды_"+ИмяЭлемента,ГруппаКоманды);
		
		Надпись = Элементы.Добавить("Команда_"+ИмяЭлемента, Тип("ДекорацияФормы"),ГруппаКоманды);
		Надпись.Вид = ВидДекорацииФормы.Надпись;
		Надпись.Гиперссылка = Истина;
		Надпись.Заголовок =  СтрокаКоманды.Наименование;
		Надпись.АвтоМаксимальнаяШирина = Ложь;
		Надпись.УстановитьДействие("Нажатие","ОбработкаНажатияКоманды");
		Надпись.ЦветТекста = ?(СтрокаКоманды.Видимость,ЦветВидимыхВариантов,ЦветСкрытыхВариантов);
	
		Если РежимНастройки Тогда 
			Команда = Команды.Добавить("УстановитьВидимостьКоманды_"+ИмяЭлемента);
			Команда.Действие = "Подключаемый_УстановитьВидимостьКоманды";
			
			Кнопка = Элементы.Добавить(Команда.Имя, Тип("КнопкаФормы"), Надпись.КонтекстноеМеню);
			Кнопка.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
			Кнопка.Отображение = ОтображениеКнопки.Картинка;
			//Кнопка.Картинка = БиблиотекаКартинок["ПрочиеПользовательскиеНастройки"];
			Кнопка.ИмяКоманды = Команда.Имя;
			Кнопка.Заголовок = ?(СтрокаКоманды.Видимость,"Скрыть","Показать");
			
			Команда = Команды.Добавить("ПереместитьКомандуВверх_"+ИмяЭлемента);
			Команда.Действие = "Подключаемый_ПереместитьКомандуВверх";
			
			Кнопка = Элементы.Добавить(Команда.Имя, Тип("КнопкаФормы"), Надпись.КонтекстноеМеню);
			Кнопка.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
			Кнопка.Отображение = ОтображениеКнопки.Картинка;
			Кнопка.Картинка = БиблиотекаКартинок["ПереместитьВверх"];
			Кнопка.ИмяКоманды = Команда.Имя;
			Кнопка.Заголовок = "Переместить вверх";
			
			Команда = Команды.Добавить("ПереместитьКомандуВниз_"+ИмяЭлемента);
			Команда.Действие = "Подключаемый_ПереместитьКомандуВниз";
			
			Кнопка = Элементы.Добавить(Команда.Имя, Тип("КнопкаФормы"), Надпись.КонтекстноеМеню);
			Кнопка.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
			Кнопка.Отображение = ОтображениеКнопки.Картинка;
			Кнопка.Картинка = БиблиотекаКартинок["ПереместитьВниз"];
			Кнопка.ИмяКоманды = Команда.Имя;
			Кнопка.Заголовок = "Переместить вниз";
			
		КонецЕсли;
		
		КоличествоСтрок = КоличествоСтрок + 1;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция СоздатьГруппуБезОтображения(Имя,ГруппаРодитель)
	Группа = Элементы.Добавить(Имя,Тип("ГруппаФормы"), ГруппаРодитель);
	Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	Группа.Отображение = ОтображениеОбычнойГруппы.Нет;
	Группа.ОтображатьЗаголовок = Ложь;
	Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	Группа.РастягиватьПоГоризонтали = Истина;
	Возврат Группа;
КонецФункции

&НаСервере
Функция СоздатьОтступ(Имя,ГруппаРодитель)
	Декорация = Элементы.Добавить(Имя,Тип("ДекорацияФормы"), ГруппаРодитель);
	Декорация.Вид = ВидДекорацииФормы.Надпись;
	Декорация.Заголовок = " ";
	Возврат Декорация;
КонецФункции

&НаСервере
Процедура НайтиСправочникиДляВывода()
	УстановитьПривилегированныйРежим(Истина);
	
	Настройки = новый Структура;
	Настройки.Вставить("ВестиРучнуюОбработкуСправочников",Константы.нсиВестиРучнуюОбработкуСправочников.Получить());
	НаборДоступностьОпераций = РегистрыСведений.нсиДоступностьОперацийПоТипамОбъектов.СоздатьНаборЗаписей();
	НаборДоступностьОпераций.Прочитать();
	Настройки.Вставить("ДоступностьОпераций",НаборДоступностьОпераций.Выгрузить());
	Настройки.Вставить("ПользовательИБ", ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ПараметрыСеанса.ТекущийПользователь.ИдентификаторПользователяИБ));
	
	Для Каждого Строка Из СправочникиПанели Цикл
		Строка.Используется = Ложь;
	КонецЦикла;
	
	Для Каждого Строка Из КомандыСправочников Цикл
		Строка.Используется = Ложь;
	КонецЦикла;
	
	СправочникиСистемы = новый СписокЗначений;
	Справочники.нсиДомены.ЗаполнитьСписокСправочников(СправочникиСистемы);
	СправочникиСистемы = СправочникиСистемы.ВыгрузитьЗначения();
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	нсиДоменыСправочники.Ссылка КАК Домен,
		|	нсиДоменыСправочники.Справочник,
		|	нсиДоменыСправочники.Ссылка.Порядок КАК ДоменПриоритет
		|ИЗ
		|	Справочник.нсиДомены.Справочники КАК нсиДоменыСправочники
		|ГДЕ
		|	НЕ нсиДоменыСправочники.Ссылка.ПометкаУдаления"
	);
	ДоменыСправочников = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Справочник Из СправочникиСистемы Цикл
		ДобавитьСправочникВТаблицу(ДоменыСправочников,Справочник,Настройки);
	КонецЦикла;
	
	СправочникиПанели.Сортировать("БыстрыйДоступ,Важный УБЫВ,Порядок, Наименование");
	КомандыСправочников.Сортировать("Порядок, Наименование");
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСправочникВТаблицу(ДоменыСправочников,Справочник, Настройки)
	
	
	Если ТипЗнч(Справочник) = Тип("Строка") Тогда 
		Если НЕ ПравоДоступа("Просмотр",Метаданные.Справочники[Справочник],Настройки.ПользовательИБ) Тогда 
			Возврат;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Справочник) = Тип("СправочникСсылка.нсиВидыСправочников") Тогда 
		пМетаданные = нсиУниверсальноеХранилище.ПолучитьМетаданные(Справочник);
		Если НЕ пМетаданные.ПраваДоступа.Просмотр Тогда 
			Возврат;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Справочник) = Тип("СправочникСсылка.нсиВидыДополнительныхКлассификаторов") Тогда 
		Если НЕ ПравоДоступа("Просмотр",Метаданные.Справочники.нсиДополнительныеКлассификаторы,Настройки.ПользовательИБ)
			ИЛИ НЕ ПравоДоступа("Просмотр",Метаданные.Справочники.нсиВидыДополнительныхКлассификаторов,Настройки.ПользовательИБ) Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;		
	
	СтрокиДоменовСправочника = ДоменыСправочников.НайтиСтроки(новый Структура("Справочник",Справочник));
	Если СтрокиДоменовСправочника.Количество()>0 Тогда 
		Для каждого СтрокаДомена Из СтрокиДоменовСправочника Цикл
			НайденныеСтроки = СправочникиПанели.НайтиСтроки(новый Структура("Справочник,Домен",Справочник,СтрокаДомена.Домен));
			Если НайденныеСтроки.Количество()=0 Тогда 
				НС = СправочникиПанели.Добавить();
				НС.Справочник = Справочник;
				НС.Домен = СтрокаДомена.Домен;
				НС.Видимость = Истина;
			Иначе
				НС = НайденныеСтроки[0];
			КонецЕсли;
			НС.Используется = Истина;
			
			Если ТипЗнч(Справочник) = Тип("Строка") Тогда 
				НС.Наименование = Метаданные.Справочники[Справочник].Синоним;
			Иначе
				НС.Наименование = Строка(Справочник);
			КонецЕсли;
			ЗаполнитьКомандыСправочника(Справочник, НС.Домен, Настройки);
		КонецЦикла;
	Иначе
		НайденныеСтроки = СправочникиПанели.НайтиСтроки(новый Структура("Справочник,Домен",Справочник,Справочники.нсиДомены.ПустаяСсылка()));
		Если НайденныеСтроки.Количество()=0 Тогда 
			НС = СправочникиПанели.Добавить();
			НС.Справочник = Справочник;
			НС.Домен = Справочники.нсиДомены.ПустаяСсылка();
		Иначе
			НС = НайденныеСтроки[0];
		КонецЕсли;
		НС.Используется = Истина;
			
		Если ТипЗнч(Справочник) = Тип("Строка") Тогда 
			НС.Наименование = Метаданные.Справочники[Справочник].Синоним;
		Иначе
			НС.Наименование = Строка(Справочник);
		КонецЕсли;
		ЗаполнитьКомандыСправочника(Справочник, НС.Домен, Настройки);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКомандыСправочника(Справочник, Домен, Настройки)
	
	
	Если ТипЗнч(Справочник) = Тип("Строка") Тогда 
		ДоступностьОпераций = Настройки.ДоступностьОпераций.Найти("Справочник."+Справочник,"ТипОбъекта");
		Если ДоступностьОпераций = Неопределено Тогда 
			РучнаяОбработка = Ложь;
			ИспользоватьБуфер = Ложь;
		Иначе
			РучнаяОбработка = ДоступностьОпераций.ИспользоватьРучнуюОбработкуСправочников И Настройки.ВестиРучнуюОбработкуСправочников;
			ИспользоватьБуфер = ДоступностьОпераций.ИспользоватьБуфер;
		КонецЕсли;
		
		Если Справочник = "нсиМТР" Тогда 
			ИспользоватьКлассификацию = Константы.нсиУчитыватьВРазрезеКлассификатораПродукции.Получить();
		ИначеЕсли Справочник = "нсиУслуги" Тогда 
			ИспользоватьКлассификацию = Константы.нсиУчитыватьВРазрезеКлассификатораУслуг.Получить();
		Иначе
			ИспользоватьКлассификацию = Ложь;
		КонецЕсли;
		
		Если Метаданные.Справочники[Справочник].Команды.Найти("ОдиночныеПозиции")<>Неопределено
			И ПравоДоступа("Просмотр",Метаданные.Справочники[Справочник].Команды.ОдиночныеПозиции,Настройки.ПользовательИБ) Тогда 
			ДобавитьКоманду(Справочник, Домен,"ОдиночныеПозиции","Одиночные позиции",1);
		КонецЕсли;
		Если Метаданные.Справочники[Справочник].Команды.Найти("ЭталонныеПозиции")<>Неопределено  
			И ПравоДоступа("Просмотр",Метаданные.Справочники[Справочник].Команды.ЭталонныеПозиции,Настройки.ПользовательИБ) Тогда 
			ДобавитьКоманду(Справочник, Домен,"ЭталонныеПозиции","Эталонные позиции",2);
		КонецЕсли;
		Если Метаданные.Справочники[Справочник].Команды.Найти("ДублирующиеПозиции")<>Неопределено
			И ПравоДоступа("Просмотр",Метаданные.Справочники[Справочник].Команды.ДублирующиеПозиции,Настройки.ПользовательИБ) Тогда 
			ДобавитьКоманду(Справочник, Домен,"ДублирующиеПозиции","Дублирующие позиции",3);
		КонецЕсли;
		
		Если РучнаяОбработка Тогда 
		
			Если ИспользоватьБуфер Тогда 
				Если Метаданные.Справочники[Справочник].Команды.Найти("ПодборВБуферЗаписей")<>Неопределено 
					И ПравоДоступа("Просмотр",Метаданные.Справочники[Справочник].Команды.ПодборВБуферЗаписей,Настройки.ПользовательИБ) Тогда 
					ДобавитьКоманду(Справочник, Домен,"ПодборВБуферЗаписей","Подбор в буфер записей",4);
				КонецЕсли;
				Если Метаданные.Справочники[Справочник].Команды.Найти("ОбработкаБуфераЗаписей")<>Неопределено 
					И ПравоДоступа("Просмотр",Метаданные.Справочники[Справочник].Команды.ОбработкаБуфераЗаписей,Настройки.ПользовательИБ) Тогда 
					ДобавитьКоманду(Справочник, Домен,"ОбработкаБуфераЗаписей","Обработка буфера записей",5);
				КонецЕсли;
				
				Если Метаданные.Справочники[Справочник].Команды.Найти("КомплекснаяРаботаСЗаписями")<>Неопределено
					И ПравоДоступа("Просмотр",Метаданные.Справочники[Справочник].Команды.КомплекснаяРаботаСЗаписями,Настройки.ПользовательИБ) Тогда 
					ДобавитьКоманду(Справочник, Домен,"КомплекснаяРаботаСЗаписями","Комплексная работа с записями",8);
				КонецЕсли;
			КонецЕсли;
			
			Если ИспользоватьКлассификацию Тогда 
				Если Метаданные.Справочники[Справочник].Команды.Найти("ПредварительнаяКлассификация")<>Неопределено 
					И ПравоДоступа("Просмотр",Метаданные.Справочники[Справочник].Команды.ПредварительнаяКлассификация,Настройки.ПользовательИБ) Тогда 
					ДобавитьКоманду(Справочник, Домен,"ПредварительнаяКлассификация","Предварительная классификация",6);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		
	ИначеЕсли ТипЗнч(Справочник) = Тип("СправочникСсылка.нсиВидыСправочников") Тогда 
		пМетаданные = нсиУниверсальноеХранилище.ПолучитьМетаданные(Справочник);
		Если Справочник.ВидСправочника = Перечисления.нсиВидыСправочников.ФункциональныйСправочник 
			И (пМетаданные.ИспользоватьНормализацию ИЛИ пМетаданные.ИспользоватьКлассификацию) Тогда 
			
			Если пМетаданные.ИспользоватьНормализацию Тогда 
					ДобавитьКоманду(Справочник, Домен,"ОдиночныеПозиции","Одиночные позиции",1);
					ДобавитьКоманду(Справочник, Домен,"ЭталонныеПозиции","Эталонные позиции",2);
					ДобавитьКоманду(Справочник, Домен,"ДублирующиеПозиции","Дублирующие позиции",3);
				
				Если пМетаданные.ПраваДоступа.Редактирование Тогда 
					ДобавитьКоманду(Справочник, Домен,"ПодборВБуферЗаписей","Подбор в буфер записей",4);
					ДобавитьКоманду(Справочник, Домен,"ОбработкаБуфераЗаписей","Обработка буфера записей",5);
					ДобавитьКоманду(Справочник, Домен,"КомплекснаяРаботаСЗаписями","Комплексная работа с записями",8);
				КонецЕсли;
			КонецЕсли;
			
			Если пМетаданные.ИспользоватьКлассификацию И пМетаданные.ПраваДоступа.Редактирование Тогда 
				ДобавитьКоманду(Справочник, Домен,"ПредварительнаяКлассификация","Предварительная классификация",6);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДобавитьКоманду(Справочник, Домен, Имя, Наименование, Порядок)
	НайденныеСтроки = КомандыСправочников.НайтиСтроки(новый Структура("Справочник, Домен, Имя",Справочник, Домен, Имя));
	Если НайденныеСтроки.Количество() = 0 Тогда 
		НС = КомандыСправочников.Добавить();
		НС.Справочник = Справочник;
		НС.Домен = Домен;
		НС.Имя = Имя;
		НС.Порядок = Порядок;
		НС.Видимость = Истина;
	Иначе
		НС = НайденныеСтроки[0];
	КонецЕсли;
	
	НС.Наименование = Наименование;
	НС.Используется = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНажатия(Элемент)
	ИмяЭлемента = СтрЗаменить(Элемент.Имя,"ОткрытьСписок_","");
	ИдСтроки = Число(ИмяЭлемента);
	СтрокаСправочника = СправочникиПанели.НайтиПоИдентификатору(ИдСтроки);
	Если РежимНастройки Тогда 
		СтрокаСправочника.Видимость = НЕ СтрокаСправочника.Видимость;
		Элементы["ОткрытьСписок_"+ИмяЭлемента].ЦветТекста = ?(СтрокаСправочника.Видимость,ЦветВидимыхВариантов,ЦветСкрытыхВариантов);
		Элементы["УстановитьВидимость_"+ИмяЭлемента].Заголовок = ?(СтрокаСправочника.Видимость,"Скрыть","Показать");
	Иначе
		Если ТипЗнч(СтрокаСправочника.Справочник) = Тип("Строка") Тогда 
			ОткрытьФорму("Справочник."+СтрокаСправочника.Справочник+".ФормаСписка",,,,ПолучитьОкна()[0]);
		ИначеЕсли ТипЗнч(СтрокаСправочника.Справочник) = Тип("СправочникСсылка.нсиВидыСправочников") Тогда 
			ПараметрыФормы = Новый Структура;
			ВидСправочника = СтрокаСправочника.Справочник;
			ПараметрыФормы.Вставить("Отбор",новый Структура("Владелец", ВидСправочника));
			
			ОткрытьФорму(нсиУниверсальноеХранилище.ПолучитьИмяФормы(ВидСправочника)+".ФормаСписка", ПараметрыФормы, , ВидСправочника.УникальныйИдентификатор(), ПолучитьОкна()[0]);
		ИначеЕсли ТипЗнч(СтрокаСправочника.Справочник) = Тип("СправочникСсылка.нсиВидыДополнительныхКлассификаторов") Тогда 
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Отбор",новый Структура("Владелец", СтрокаСправочника.Справочник));
			ОткрытьФорму("Справочник.нсиДополнительныеКлассификаторы.ФормаСписка", ПараметрыФормы, , СтрокаСправочника.Справочник.УникальныйИдентификатор(), ПолучитьОкна()[0]);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНажатияКоманды(Элемент)
	ИмяЭлемента = СтрЗаменить(Элемент.Имя,"Команда_","");
	ИдСтроки = Число(ИмяЭлемента);
	СтрокаКоманды = КомандыСправочников.НайтиПоИдентификатору(ИдСтроки);
	СтрокаСправочника = СправочникиПанели.НайтиСтроки(новый Структура("Справочник,Домен",СтрокаКоманды.Справочник,СтрокаКоманды.Домен))[0];
	
	Если РежимНастройки Тогда 
		СтрокаКоманды.Видимость = НЕ СтрокаКоманды.Видимость;
		
		Элементы["Команда_"+ИмяЭлемента].ЦветТекста = ?(СтрокаКоманды.Видимость,ЦветВидимыхВариантов,ЦветСкрытыхВариантов);
		Элементы["УстановитьВидимостьКоманды_"+ИмяЭлемента].Заголовок = ?(СтрокаКоманды.Видимость,"Скрыть","Показать");
	Иначе
		ПараметрыФормы = Новый Структура;
		Если ТипЗнч(СтрокаКоманды.Справочник) = Тип("Строка") Тогда 
			ПрефиксИмениФормы = "Справочник."+СтрокаКоманды.Справочник+".";
			ПараметрыФормы.Вставить("Отбор",новый Структура);
			Уникальность = "Справочник_"+СтрокаКоманды.Справочник+"_"+СтрокаКоманды.Имя;
		Иначе
			ИмяСправочника = нсиУниверсальноеХранилищеПовтИсп.ПолучитьИмяСправочникаХранилища(СтрокаКоманды.Справочник);
			ПараметрыФормы.Вставить("Отбор",новый Структура("Владелец", СтрокаКоманды.Справочник));
			ПараметрыФормы.Вставить("ВидСправочника",СтрокаКоманды.Справочник);
			ПрефиксИмениФормы = "Справочник."+ИмяСправочника+".";
			Уникальность = "Справочник_"+СтрЗаменить(Строка(СтрокаКоманды.Справочник.УникальныйИдентификатор()),"-","_")+"_"+СтрокаКоманды.Имя;
		КонецЕсли;
		ОкноКоманды = ПолучитьОкна()[0];
			
		Если СтрокаКоманды.Имя = "ДублирующиеПозиции" Тогда 
			ОткрытьФорму(ПрефиксИмениФормы+"Форма.ФормаСпискаДублей",ПараметрыФормы,ЭтотОбъект,Уникальность,ОкноКоманды);
		ИначеЕсли СтрокаКоманды.Имя = "ЭталонныеПозиции" Тогда 
			ПараметрыФормы.Отбор.Вставить("ТипПозиции", 
				ПредопределенноеЗначение("Перечисление.нсиТипыПозицийСправочников.ЭталоннаяПозиция")
			);
			ОткрытьФорму(ПрефиксИмениФормы+"ФормаСписка", ПараметрыФормы, ЭтотОбъект, Уникальность, ОкноКоманды);
		ИначеЕсли СтрокаКоманды.Имя = "КомплекснаяРаботаСЗаписями" Тогда 
			ПараметрыФормы.Вставить("РежимРаботы", "Комплексная работа с записями");
			ОткрытьФорму(ПрефиксИмениФормы+"Форма.ФормаОбработкиИсходныхЗаписей", 
				ПараметрыФормы, ЭтотОбъект, Уникальность, ОкноКоманды
			);
		ИначеЕсли СтрокаКоманды.Имя = "ОбработкаБуфераЗаписей" Тогда 
			ПараметрыФормы.Вставить("РежимРаботы", "Обработка буфера записей");
			ОткрытьФорму(ПрефиксИмениФормы+"Форма.ФормаОбработкиИсходныхЗаписей", 
				ПараметрыФормы, ЭтотОбъект, Уникальность, ОкноКоманды
			);
		ИначеЕсли СтрокаКоманды.Имя = "ПодборВБуферЗаписей" Тогда 
			ПараметрыФормы.Вставить("РежимРаботы", "Подбор в буфер записей");
			ОткрытьФорму(ПрефиксИмениФормы+"Форма.ФормаОбработкиИсходныхЗаписей", 
				ПараметрыФормы, ЭтотОбъект, Уникальность, ОкноКоманды
			);
		ИначеЕсли СтрокаКоманды.Имя = "ПредварительнаяКлассификация" Тогда 
			ПараметрыФормы.Вставить("РежимРаботы", "Предварительная классификация");
			ОткрытьФорму(ПрефиксИмениФормы+"Форма.ФормаОбработкиИсходныхЗаписей", 
				ПараметрыФормы, ЭтотОбъект, Уникальность, ОкноКоманды
			);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьВидимость(Команда)
	ИмяЭлемента = СтрЗаменить(Команда.Имя,"УстановитьВидимость_","");
	ИдСтроки = Число(ИмяЭлемента);
	СтрокаСправочника = СправочникиПанели.НайтиПоИдентификатору(ИдСтроки);
	СтрокаСправочника.Видимость = НЕ СтрокаСправочника.Видимость;
	Элементы["ОткрытьСписок_"+ИмяЭлемента].ЦветТекста = ?(СтрокаСправочника.Видимость,ЦветВидимыхВариантов,ЦветСкрытыхВариантов);
	Элементы[Команда.Имя].Заголовок = ?(СтрокаСправочника.Видимость,"Скрыть","Показать");
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Выделить(Команда)
	ИмяЭлемента = СтрЗаменить(Команда.Имя,"Выделить_","");
	ИдСтроки = Число(ИмяЭлемента);
	СтрокаСправочника = СправочникиПанели.НайтиПоИдентификатору(ИдСтроки);
	СтрокаСправочника.Важный = НЕ СтрокаСправочника.Важный;
	СтрокаСправочника.Порядок = 100000;
	СправочникиПанели.Сортировать("БыстрыйДоступ,Важный УБЫВ,Порядок,Наименование");
	ОбновитьОтображение();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПереключитьБыстрыйДоступ(Команда)
	ИмяЭлемента = СтрЗаменить(Команда.Имя,"ПереключитьБыстрыйДоступ_","");
	ИдСтроки = Число(ИмяЭлемента);
	СтрокаСправочника = СправочникиПанели.НайтиПоИдентификатору(ИдСтроки);
	СтрокаСправочника.БыстрыйДоступ = НЕ СтрокаСправочника.БыстрыйДоступ;
	СтрокаСправочника.Порядок = 100000;
	СправочникиПанели.Сортировать("БыстрыйДоступ,Важный УБЫВ,Порядок,Наименование");
	СохранитьНастройкиНаСервере();
	ОбновитьОтображение();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПереместитьВверх(Команда)
	ИмяЭлемента = СтрЗаменить(Команда.Имя,"ПереместитьВверх_","");
	ИдСтроки = Число(ИмяЭлемента);
	СтрокаСправочника = СправочникиПанели.НайтиПоИдентификатору(ИдСтроки);
	Если СтрокаСправочника.БыстрыйДоступ Тогда 
		СтрокиДомена = СправочникиПанели.НайтиСтроки(новый Структура("БыстрыйДоступ,Важный",Истина,СтрокаСправочника.Важный));
	Иначе
		СтрокиДомена = СправочникиПанели.НайтиСтроки(новый Структура("Домен,БыстрыйДоступ,Важный",СтрокаСправочника.Домен,Ложь,СтрокаСправочника.Важный));
	КонецЕсли;
	Индекс = 1;
	ПредСтрока = Неопределено;
	Для Каждого Строка Из СтрокиДомена Цикл
		Если Строка.Используется Тогда
			Если Строка = СтрокаСправочника И Индекс>1 Тогда
				Строка.Порядок = Индекс - 1;
				Если ПредСтрока <> Неопределено Тогда 
					ПредСтрока.Порядок = Индекс;
				КонецЕсли;
			Иначе
				Строка.Порядок = Индекс;
			КонецЕсли;
			Индекс = Индекс + 1;
			ПредСтрока = Строка;
		КонецЕсли;
	КонецЦикла;
	СправочникиПанели.Сортировать("БыстрыйДоступ,Важный УБЫВ,Порядок,Наименование");
	ОбновитьОтображение();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПереместитьВниз(Команда)
	ИмяЭлемента = СтрЗаменить(Команда.Имя,"ПереместитьВниз_","");
	ИдСтроки = Число(ИмяЭлемента);
	СтрокаСправочника = СправочникиПанели.НайтиПоИдентификатору(ИдСтроки);
	Если СтрокаСправочника.БыстрыйДоступ Тогда 
		СтрокиДомена = СправочникиПанели.НайтиСтроки(новый Структура("БыстрыйДоступ,Важный",Истина,СтрокаСправочника.Важный));
	Иначе
		СтрокиДомена = СправочникиПанели.НайтиСтроки(новый Структура("Домен,БыстрыйДоступ,Важный",СтрокаСправочника.Домен,Ложь,СтрокаСправочника.Важный));
	КонецЕсли;
	Индекс = 1;
	ПредСтрока = Неопределено;
	Для Каждого Строка Из СтрокиДомена Цикл
		Если Строка.Используется Тогда
			Если Строка = СтрокаСправочника Тогда
				Строка.Порядок = Индекс + 1;
			ИначеЕсли ПредСтрока = СтрокаСправочника  Тогда 
				Строка.Порядок = Индекс-1;
			Иначе
				Строка.Порядок = Индекс;
			КонецЕсли;
			Индекс = Индекс + 1;
			ПредСтрока = Строка;
		КонецЕсли;
	КонецЦикла;
	СправочникиПанели.Сортировать("БыстрыйДоступ,Важный УБЫВ,Порядок,Наименование");
	ОбновитьОтображение();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьВидимостьКоманды(Команда)
	ИмяЭлемента = СтрЗаменить(Команда.Имя,"УстановитьВидимостьКоманды_","");
	ИдСтроки = Число(ИмяЭлемента);
	СтрокаКоманды = КомандыСправочников.НайтиПоИдентификатору(ИдСтроки);
	СтрокаКоманды.Видимость = НЕ СтрокаКоманды.Видимость;
	СтрокаСправочника = СправочникиПанели.НайтиСтроки(новый Структура("Справочник,Домен",СтрокаКоманды.Справочник,СтрокаКоманды.Домен))[0];
	
	Элементы["Команда_"+ИмяЭлемента].ЦветТекста = ?(СтрокаКоманды.Видимость,ЦветВидимыхВариантов,ЦветСкрытыхВариантов);
	Элементы[Команда.Имя].Заголовок = ?(СтрокаКоманды.Видимость,"Скрыть","Показать");
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПереместитьКомандуВверх(Команда)
	ИмяЭлемента = СтрЗаменить(Команда.Имя,"ПереместитьКомандуВверх_","");
	ИдСтроки = Число(ИмяЭлемента);
	СтрокаКоманды = КомандыСправочников.НайтиПоИдентификатору(ИдСтроки);
	СтрокиКоманд = КомандыСправочников.НайтиСтроки(новый Структура("Справочник,Домен",СтрокаКоманды.Справочник,СтрокаКоманды.Домен));
	Индекс = 1;
	ПредСтрока = Неопределено;
	Для Каждого Строка Из СтрокиКоманд Цикл
		Если Строка.Используется Тогда
			Если Строка = СтрокаКоманды И Индекс>1 Тогда
				Строка.Порядок = Индекс - 1;
				Если ПредСтрока <> Неопределено Тогда 
					ПредСтрока.Порядок = Индекс;
				КонецЕсли;
			Иначе
				Строка.Порядок = Индекс;
			КонецЕсли;
			Индекс = Индекс + 1;
			ПредСтрока = Строка;
		КонецЕсли;
	КонецЦикла;
	КомандыСправочников.Сортировать("Порядок,Наименование");
	ОбновитьОтображение();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПереместитьКомандуВниз(Команда)
	ИмяЭлемента = СтрЗаменить(Команда.Имя,"ПереместитьКомандуВниз_","");
	ИдСтроки = Число(ИмяЭлемента);
	СтрокаКоманды = КомандыСправочников.НайтиПоИдентификатору(ИдСтроки);
	СтрокиКоманд = КомандыСправочников.НайтиСтроки(новый Структура("Справочник,Домен",СтрокаКоманды.Справочник,СтрокаКоманды.Домен));
	Индекс = 1;
	ПредСтрока = Неопределено;
	Для Каждого Строка Из СтрокиКоманд Цикл
		Если Строка.Используется Тогда
			Если Строка = СтрокаКоманды Тогда
				Строка.Порядок = Индекс + 1;
			ИначеЕсли ПредСтрока = СтрокаКоманды Тогда 
				Строка.Порядок = Индекс-1;
			Иначе
				Строка.Порядок = Индекс;
			КонецЕсли;
			Индекс = Индекс + 1;
			ПредСтрока = Строка;
		КонецЕсли;
	КонецЦикла;
	КомандыСправочников.Сортировать("Порядок,Наименование");
	ОбновитьОтображение();
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображение()
	ОпределитьМаксимальноеКоличествоСтрок();
	Элементы.БыстрыйДоступШапкаНадпись.ОтображениеПодсказки = ?(РежимНастройки, ОтображениеПодсказки.Кнопка, ОтображениеПодсказки.Нет);
	Элементы.Настроить.Заголовок = ?(РежимНастройки, НСтр("ru = 'Вернуться к режиму просмотра'"), "");
	Элементы.ФормаПоказыватьВсе.Пометка = ПоказыватьВсе;

	// Заголовок.
	СуффиксРежимаНастройки = " (" + НСтр("ru = 'настройка'") + ")";
	СуффиксВыведен = (Прав(Заголовок, СтрДлина(СуффиксРежимаНастройки)) = СуффиксРежимаНастройки);
	Если СуффиксВыведен <> РежимНастройки Тогда
		Если РежимНастройки Тогда
			Заголовок = Заголовок + СуффиксРежимаНастройки;
		Иначе
			Заголовок = СтрЗаменить(Заголовок, СуффиксРежимаНастройки, "");
		КонецЕсли;
	КонецЕсли;
	
	
	// Удаление элементов.
	ОчиститьФормуОтДобавленныхЭлементов();
	
	// Удаление команд
	УдаляемыеКоманды = Новый Массив;
	Для Каждого Команда Из Команды Цикл
		Если ПостоянныеКоманды.НайтиПоЗначению(Команда.Имя) = Неопределено Тогда
			УдаляемыеКоманды.Добавить(Команда);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Команда Из УдаляемыеКоманды Цикл
		Команды.Удалить(Команда);
	КонецЦикла;
	
	ВывестиСправочникиБыстрыйДоступ();
	ВывестиСправочники();

КонецПроцедуры

&НаСервере
Процедура ОпределитьМаксимальноеКоличествоСтрок()
	КоличествоСтрокБыстрыйДоступ = 0;
	НайденныеСтроки = СправочникиПанели.НайтиСтроки(новый Структура("БыстрыйДоступ",Истина));
	Для Каждого СтрокаСправочника Из НайденныеСтроки Цикл
		Если СтрокаСправочника.Видимость ИЛИ РежимНастройки Или ПоказыватьВсе Тогда 
			КоличествоСтрокБыстрыйДоступ = КоличествоСтрокБыстрыйДоступ + 1;
			
			СтрокиКоманд = КомандыСправочников.НайтиСтроки(новый Структура("Справочник,Домен",СтрокаСправочника.Справочник,СтрокаСправочника.Домен));
			Для Каждого СтрокаКоманды Из СтрокиКоманд Цикл
				Если СтрокаКоманды.Используется Тогда 
					Если СтрокаКоманды.Видимость ИЛИ РежимНастройки Или ПоказыватьВсе Тогда 
						КоличествоСтрокБыстрыйДоступ = КоличествоСтрокБыстрыйДоступ + 1;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	
	КоличествоСтрок = 0;
	Для Каждого СтрокаДомена Из Домены Цикл
		НайденныеСтроки = СправочникиПанели.НайтиСтроки(новый Структура("Домен,БыстрыйДоступ",СтрокаДомена.Ссылка,Ложь));
		ЕстьСправочники = Ложь;
		Для Каждого СтрокаСправочника Из НайденныеСтроки Цикл
			Если СтрокаСправочника.Видимость ИЛИ РежимНастройки Или ПоказыватьВсе Тогда 
				ЕстьСправочники = Истина;
				КоличествоСтрок = КоличествоСтрок + 1;
				
				СтрокиКоманд = КомандыСправочников.НайтиСтроки(новый Структура("Справочник,Домен",СтрокаСправочника.Справочник,СтрокаСправочника.Домен));
				Для Каждого СтрокаКоманды Из СтрокиКоманд Цикл
					Если СтрокаКоманды.Используется Тогда 
						Если СтрокаКоманды.Видимость ИЛИ РежимНастройки Или ПоказыватьВсе Тогда 
							КоличествоСтрок = КоличествоСтрок + 1;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		Если ЕстьСправочники Тогда 
			КоличествоСтрок = КоличествоСтрок + 1;
		КонецЕсли;
	КонецЦикла;
	
	НайденныеСтроки = СправочникиПанели.НайтиСтроки(новый Структура("Домен,БыстрыйДоступ",Справочники.нсиДомены.ПустаяСсылка(),Ложь));
	ЕстьСправочники = Ложь;
	Для Каждого СтрокаСправочника Из НайденныеСтроки Цикл
		Если СтрокаСправочника.Видимость ИЛИ РежимНастройки Или ПоказыватьВсе Тогда 
			ЕстьСправочники = Истина;
			КоличествоСтрок = КоличествоСтрок + 1;
			
			СтрокиКоманд = КомандыСправочников.НайтиСтроки(новый Структура("Справочник,Домен",СтрокаСправочника.Справочник,СтрокаСправочника.Домен));
			Для Каждого СтрокаКоманды Из СтрокиКоманд Цикл
				Если СтрокаКоманды.Используется Тогда 
					Если СтрокаКоманды.Видимость ИЛИ РежимНастройки Или ПоказыватьВсе Тогда 
						КоличествоСтрок = КоличествоСтрок + 1;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Если ЕстьСправочники Тогда 
		КоличествоСтрок = КоличествоСтрок + 1;
	КонецЕсли;
	
	СбалансироватьКолонки(КоличествоСтрокБыстрыйДоступ,КоличествоСтрок);
КонецПроцедуры

&НаСервере
Процедура СбалансироватьКолонки(КоличествоСтрокБыстрыйДоступ,КоличествоСтрок)
	МассивОграничений = Новый Массив;
	МассивОграничений.Добавить(0);
	МассивОграничений.Добавить(0);
	МассивОграничений.Добавить(0);
	МаксКоличествоСтрокПоКолонкамБыстрыйДоступ = новый ФиксированныйМассив(МассивОграничений);
	МаксКоличествоСтрокПоКолонкам = новый ФиксированныйМассив(МассивОграничений);
	
	ЛучшийРезультат = КоличествоСтрокБыстрыйДоступ;
	НачКоличество = Макс(1,Цел(КоличествоСтрокБыстрыйДоступ/3)-9);
	КонКоличество = Мин(КоличествоСтрокБыстрыйДоступ,Цел(КоличествоСтрокБыстрыйДоступ/3)+9);
	Для ТекМаксКоличество1= НачКоличество По КонКоличество Цикл
		Для ТекМаксКоличество2= НачКоличество По Мин(КоличествоСтрокБыстрыйДоступ-ТекМаксКоличество1,КонКоличество) Цикл
			ТекМаксКоличество3 = КоличествоСтрокБыстрыйДоступ-ТекМаксКоличество1-ТекМаксКоличество2;
			МассивОграничений = Новый Массив;
			МассивОграничений.Добавить(ТекМаксКоличество1);
			МассивОграничений.Добавить(ТекМаксКоличество2);
			МассивОграничений.Добавить(ТекМаксКоличество3);
			ТекРезультат = РассчитатьМаксимальноеКоличествоСтрокБыстрыйДоступ(МассивОграничений,ЛучшийРезультат);
			Если ТекРезультат < ЛучшийРезультат Тогда 
				ЛучшийРезультат = ТекРезультат;
				МаксКоличествоСтрокПоКолонкамБыстрыйДоступ = новый ФиксированныйМассив(МассивОграничений);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	
	ЛучшийРезультат = КоличествоСтрок;
	НачКоличество = Макс(1,Цел(КоличествоСтрок/3)-9);
	КонКоличество = Мин(КоличествоСтрок,Цел(КоличествоСтрок/3)+9);
	Для ТекМаксКоличество1= НачКоличество По КонКоличество Цикл
		Для ТекМаксКоличество2= НачКоличество По Мин(КоличествоСтрок-ТекМаксКоличество1,КонКоличество) Цикл
			ТекМаксКоличество3 = КоличествоСтрок-ТекМаксКоличество1-ТекМаксКоличество2;
			МассивОграничений = Новый Массив;
			МассивОграничений.Добавить(ТекМаксКоличество1);
			МассивОграничений.Добавить(ТекМаксКоличество2);
			МассивОграничений.Добавить(ТекМаксКоличество3);
			ТекРезультат = РассчитатьМаксимальноеКоличествоСтрок(МассивОграничений,ЛучшийРезультат);
			Если ТекРезультат < ЛучшийРезультат Тогда 
				ЛучшийРезультат = ТекРезультат;
				МаксКоличествоСтрокПоКолонкам = новый ФиксированныйМассив(МассивОграничений);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры	

&НаСервере
Функция  РассчитатьМаксимальноеКоличествоСтрокБыстрыйДоступ(МассивОграничений,ЛучшийРезультат)
	Результат = 0;
	КоличествоСтрок = 0;
	НомерКолонки = 0;
	НайденныеСтроки = СправочникиПанели.НайтиСтроки(новый Структура("БыстрыйДоступ",Истина));
	Для Каждого СтрокаСправочника Из НайденныеСтроки Цикл
		Если СтрокаСправочника.Используется И (СтрокаСправочника.Видимость ИЛИ РежимНастройки Или ПоказыватьВсе) Тогда 
			Если КоличествоСтрок>=МассивОграничений[НомерКолонки] И НомерКолонки<МассивОграничений.Количество()-1 Тогда 
				НомерКолонки = НомерКолонки + 1;
				Результат = Макс(Результат,КоличествоСтрок);
				КоличествоСтрок = 0;
			КонецЕсли;
			КоличествоСтрок = КоличествоСтрок + 1;
			
			Если КоличествоСтрок > ЛучшийРезультат Тогда 
				Возврат КоличествоСтрок;
			КонецЕсли;
			Если РежимНастройки Или ПоказыватьВсе Тогда 
				СтрокиКоманд = КомандыСправочников.НайтиСтроки(новый Структура("Справочник,Домен,Используется",СтрокаСправочника.Справочник,СтрокаСправочника.Домен,Истина));
			Иначе
				СтрокиКоманд = КомандыСправочников.НайтиСтроки(новый Структура("Справочник,Домен,Используется,Видимость",СтрокаСправочника.Справочник,СтрокаСправочника.Домен,Истина,Истина));
			КонецЕсли;
			КоличествоСтрок = КоличествоСтрок + СтрокиКоманд.Количество();
			Если КоличествоСтрок > ЛучшийРезультат Тогда 
				Возврат КоличествоСтрок;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Результат = Макс(Результат,КоличествоСтрок);
	Возврат Результат;
КонецФункции


&НаСервере
Функция  РассчитатьМаксимальноеКоличествоСтрок(МассивОграничений,ЛучшийРезультат)
	Результат = 0;
	КоличествоСтрок = 0;
	НомерКолонки = 0;
	Для Каждого СтрокаДомена Из Домены Цикл
		НайденныеСтроки = СправочникиПанели.НайтиСтроки(новый Структура("Домен,БыстрыйДоступ",СтрокаДомена.Ссылка,Ложь));
		ЕстьСправочники = Ложь;
		Для Каждого СтрокаСправочника Из НайденныеСтроки Цикл
			Если СтрокаСправочника.Используется И (СтрокаСправочника.Видимость ИЛИ РежимНастройки Или ПоказыватьВсе) Тогда 
				Если КоличествоСтрок>=МассивОграничений[НомерКолонки] И НомерКолонки<МассивОграничений.Количество()-1 Тогда 
					НомерКолонки = НомерКолонки + 1;
					Результат = Макс(Результат,КоличествоСтрок);
					КоличествоСтрок = 1;
				КонецЕсли;
				ЕстьСправочники = Истина;
				КоличествоСтрок = КоличествоСтрок + 1;
				Если КоличествоСтрок > ЛучшийРезультат Тогда 
					Возврат КоличествоСтрок;
				КонецЕсли;
				
				Если РежимНастройки Или ПоказыватьВсе Тогда 
					СтрокиКоманд = КомандыСправочников.НайтиСтроки(новый Структура("Справочник,Домен,Используется",СтрокаСправочника.Справочник,СтрокаСправочника.Домен,Истина));
				Иначе
					СтрокиКоманд = КомандыСправочников.НайтиСтроки(новый Структура("Справочник,Домен,Используется,Видимость",СтрокаСправочника.Справочник,СтрокаСправочника.Домен,Истина,Истина));
				КонецЕсли;
				КоличествоСтрок = КоличествоСтрок + СтрокиКоманд.Количество();
				Если КоличествоСтрок > ЛучшийРезультат Тогда 
					Возврат КоличествоСтрок;
				КонецЕсли;
					
			КонецЕсли;
		КонецЦикла;
		Если ЕстьСправочники Тогда 
			КоличествоСтрок = КоличествоСтрок + 1;
			Если КоличествоСтрок > ЛучшийРезультат Тогда 
				Возврат КоличествоСтрок;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	НайденныеСтроки = СправочникиПанели.НайтиСтроки(новый Структура("Домен,БыстрыйДоступ",Справочники.нсиДомены.ПустаяСсылка(),Ложь));
	ЕстьСправочники = Ложь;
	Для Каждого СтрокаСправочника Из НайденныеСтроки Цикл
		Если СтрокаСправочника.Используется И (СтрокаСправочника.Видимость ИЛИ РежимНастройки Или ПоказыватьВсе) Тогда 
			Если КоличествоСтрок>=МассивОграничений[НомерКолонки] И НомерКолонки<МассивОграничений.Количество()-1 Тогда 
				НомерКолонки = НомерКолонки + 1;
				Результат = Макс(Результат,КоличествоСтрок);
				КоличествоСтрок = 1;
			КонецЕсли;
			ЕстьСправочники = Истина;
			КоличествоСтрок = КоличествоСтрок + 1;
			Если КоличествоСтрок > ЛучшийРезультат Тогда 
				Возврат КоличествоСтрок;
			КонецЕсли;
			
			Если РежимНастройки Или ПоказыватьВсе Тогда 
				СтрокиКоманд = КомандыСправочников.НайтиСтроки(новый Структура("Справочник,Домен,Используется",СтрокаСправочника.Справочник,СтрокаСправочника.Домен,Истина));
			Иначе
				СтрокиКоманд = КомандыСправочников.НайтиСтроки(новый Структура("Справочник,Домен,Используется,Видимость",СтрокаСправочника.Справочник,СтрокаСправочника.Домен,Истина,Истина));
			КонецЕсли;
			КоличествоСтрок = КоличествоСтрок + СтрокиКоманд.Количество();
			Если КоличествоСтрок > ЛучшийРезультат Тогда 
				Возврат КоличествоСтрок;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ЕстьСправочники Тогда 
		КоличествоСтрок = КоличествоСтрок + 1;
	КонецЕсли;
	Результат = Макс(Результат,КоличествоСтрок);
	Возврат Результат;
КонецФункции


&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	ОбновитьПанельСправочников();
КонецПроцедуры

#КонецОбласти
