
#Область ПрограммныйИнтерфейс

// Оформляет выделение изменений данных формы.
//
// Параметры:
// Форма - управляемая форма.
//
Процедура ОформитьВыделениеИзменений(Форма) Экспорт
	
	Объект = Форма.Объект;	
	Если Не Объект.ЭтоМакет тогда
		Возврат
	КонецЕсли;	
	
	ИмяОписания = "ВыделениеИзменений_ОписаниеДополнительныхРеквизитов";
	Если ЕстьРеквизитФормы(Форма, ИмяОписания) Тогда
		// Удаление доп. реквизитов и элементов условного оформления.
		РеквизитыДляУдаления = Новый Массив;
		Для Каждого Строка Из Форма.ВыделениеИзменений_ОписаниеДополнительныхРеквизитов Цикл 
			РеквизитыДляУдаления.Добавить(Строка.ИмяРеквизита);
			
			ЭлементУсловногоОформления = Форма.УсловноеОформление.ПолучитьОбъектПоИдентификатору(Строка.ИдентификаторЭлементаУсловногоОформления);
			Форма.УсловноеОформление.Элементы.Удалить(ЭлементУсловногоОформления);
		КонецЦикла;
		Форма.ИзменитьРеквизиты(, РеквизитыДляУдаления);
		
		// Очистка описания удаленных реквизитов и элементов условного оформления.
		Форма.ВыделениеИзменений_ОписаниеДополнительныхРеквизитов.Очистить();
		
		СброситьВыделениеИзмененийСтраницФормы(Форма);
	Иначе 	
		// Добавление реквизита описания создаваемых реквизитов и элементов условного оформления.
		Реквизиты = Новый Массив;
		
		Реквизиты.Добавить(Новый РеквизитФормы(
			ИмяОписания, Новый ОписаниеТипов("ТаблицаЗначений")));
		
		Реквизиты.Добавить(Новый РеквизитФормы(
			"ИмяРеквизита", Новый ОписаниеТипов("Строка"), ИмяОписания));
			
		Реквизиты.Добавить(Новый РеквизитФормы(
			"ИдентификаторЭлементаУсловногоОформления", Новый ОписаниеТипов(), ИмяОписания));
			
		Форма.ИзменитьРеквизиты(Реквизиты);	
	КонецЕсли;	
	
	// Заполнение ссылки на оригинал.
	Запрос = новый Запрос(
		"ВЫБРАТЬ
		|	нсиСтатусыОбработкиСправочников.ИзменяемыйОбъект
		|ИЗ
		|	РегистрСведений.нсиСтатусыОбработкиСправочников КАК нсиСтатусыОбработкиСправочников
		|ГДЕ
		|	нсиСтатусыОбработкиСправочников.Объект = &Ссылка"
		);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Форма.СсылкаНаОригинал = Выборка.ИзменяемыйОбъект;
	Иначе 
		Форма.СсылкаНаОригинал = Объект.Ссылка;
	КонецЕсли;
	
	// Оформление изменений.
	ОформитьВыделениеИзмененийДопРеквизитов(Форма);
	ОформитьВыделениеИзмененийРеквизитовШапки(Форма);
	ОформитьВыделениеИзмененийРеквизитовКонтактнойИнформации(Форма);
	ОформитьВыделениеИзмененийТабличныхЧастей(Форма);
	ОформитьВыделениеИзмененийУниверсальныхСправочников(Форма);
	
КонецПроцедуры	

// Формирует структуру параметров вывода таблицы сравнения. 
// Параметры:
// 	Форма - управляемая форма.
// 	ИмяКоманды - строка с именем команды из которой выполняется вызов функции.
// Возвращает структуру с ключами АдресТаблицы - адрес таблицы сравнения во временном хранилище, Заголовок - заголовок формы вывода таблицы сравнения.
//  
Функция ПараметрыСравненияТаблиц(Форма, ИмяКоманды) Экспорт 
	Перем НастройкиСравнения;
	
	Объект           = Форма.Объект;
	СсылкаНаОригинал = Форма.СсылкаНаОригинал;
	
	Если Не ЗначениеЗаполнено(СсылкаНаОригинал) тогда
		Возврат Неопределено
	КонецЕсли;	
	
	ИмяТЧ = СтрЗаменить(ИмяКоманды, "ПоказатьОтличия", "");
	
	ОбъектОригинал = СсылкаНаОригинал.ПолучитьОбъект();
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(СсылкаНаОригинал);
	НастройкиОформления = МенеджерОбъекта.НастройкиОформленияВыделенияИзмененийТабличныхЧастей();
	
	Если НЕ НастройкиОформления = Неопределено тогда
		НастройкиОформления.Свойство(ИмяТЧ, НастройкиСравнения);
	КонецЕсли;
		
	ЭтоУниверсальныйСправочник = ЭтоУниверсальныйСправочник(Форма.Объект.Ссылка);	
	Если ЭтоУниверсальныйСправочник тогда
		мдТабличныеЧасти = Форма.пМетаданные.ТабличныеЧасти;
	    		
		Если мдТабличныеЧасти.Свойство(ИмяТЧ) тогда
			ОбъектОригинал = нсиУниверсальноеХранилище.ПолучитьОбъект(Форма.пМетаданные, СсылкаНаОригинал);
			
			КлючСтроки = КлючСтрокиУниверсальнойТабличнойЧасти(ОбъектОригинал[ИмяТЧ]);
						
			НастройкиСравнения = Новый Структура;
			НастройкиСравнения.Вставить("КлючСтроки"   , КлючСтроки);
			НастройкиСравнения.Вставить("Реквизиты"    , КлючСтроки);
			НастройкиСравнения.Вставить("РеквизитФормы", ИмяТЧ);
			
			ЗаголовокТабличнойЧасти = мдТабличныеЧасти[ИмяТЧ].Наименование;
		КонецЕсли;
	Иначе 
		ЗаголовокТабличнойЧасти = ЗаголовокТабличнойЧасти(Объект, ИмяТЧ);
	КонецЕсли;	
	
	Если НастройкиСравнения = Неопределено тогда
		Возврат Неопределено
	Иначе 	
		// Если в настройках сравнения указано, что табличная часть текущего объекта 
		// содержится в реквизите формы, то для сравнения берем ее оттуда.
		Если НастройкиСравнения.Свойство("РеквизитФормы") тогда
			Таблица1 = Форма[НастройкиСравнения.РеквизитФормы].Выгрузить();
		Иначе 
			Таблица1 = Объект[ИмяТЧ].Выгрузить();	
		КонецЕсли;
		
		// В универсальных справочниках в объекте табличная часть имеет тип ТаблицаЗначений.
		Если ТипЗнч(ОбъектОригинал[ИмяТЧ]) = Тип("ТаблицаЗначений") тогда
			Таблица2 = ОбъектОригинал[ИмяТЧ].Скопировать();
		Иначе 
			Таблица2 = ОбъектОригинал[ИмяТЧ].Выгрузить();
		КонецЕсли;	
		
		ТаблицаРезультат = СравнитьТаблицыПодробно(Таблица1, Таблица2, Объект, ИмяТЧ, НастройкиСравнения);			
		
		АдресТаблицы = ПоместитьВоВременноеХранилище(ТаблицаРезультат, Форма.УникальныйИдентификатор); 
		
		Возврат Новый Структура("АдресТаблицы, Заголовок", 
			АдресТаблицы, "Изменения табличной части """ + ЗаголовокТабличнойЧасти + """")
	КонецЕсли;	
КонецФункции

// Формирует таблицу сравнения.
// Параметры:
// 	Таблица1 - таблицы значения;
// 	Таблица2 - таблицы значения;
// 	Объект - объект формы;
// 	ИмяТЧ - имя табличной части;
//  НастройкиСравнения - структура настроек сравнения таблиц.
// Возвращает таблицу значения - результат сравнения двух таблиц: Таблица1 и Таблица2.
//  
Функция СравнитьТаблицыПодробно(Таблица1, Таблица2, Объект, ИмяТЧ, НастройкиСравнения) Экспорт
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	Для Каждого Колонка из Таблица1.Колонки цикл
		Если Колонка.Имя = "ИсходныйНомерСтроки" 
			ИЛИ Колонка.Имя = "пСсылка" тогда
			Продолжить;
		КонецЕсли;	
		
		ЗаголовокКолонки = ЗаголовокРеквизитаТабличнойЧасти(Объект, ИмяТЧ, Колонка);
		
		Если НЕ Таблица2.Колонки.Найти(Колонка.Имя) = Неопределено тогда
			ТаблицаРезультат.Колонки.Добавить(Колонка.Имя, 
					Новый ОписаниеТипов(Колонка.ТипЗначения), ЗаголовокКолонки);	
			ТаблицаРезультат.Колонки.Добавить(Колонка.Имя + "Оригинал", 
					Новый ОписаниеТипов(Колонка.ТипЗначения), ЗаголовокКолонки + " (оригинал)");
		КонецЕсли;	
	КонецЦикла;	
	ТаблицаРезультат.Колонки.Добавить("ВариантИзменения", Новый ОписаниеТипов("Число")); 
	
	Таблица1.Колонки.Добавить("Выбрано", Новый ОписаниеТипов("Булево"));
	Таблица2.Колонки.Добавить("Выбрано", Новый ОписаниеТипов("Булево"));
	
	// Индексация таблицы 2.
	Таблица2.Индексы.Добавить(НастройкиСравнения.КлючСтроки + ",Выбрано");
	
	// Левое соединение Таблица1->Таблица2
	Для Каждого СтрокаТаблицы1 из Таблица1 цикл
		НоваяСтрока = ТаблицаРезультат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы1);
		
		НайденныеСтроки = Таблица2.НайтиСтроки(СтруктураПоиска(НастройкиСравнения.КлючСтроки, СтрокаТаблицы1));
		Если НайденныеСтроки.ВГраница() > -1 тогда
			Для Каждого Колонка	из Таблица1.Колонки цикл
				Если Таблица2.Колонки.Найти(Колонка.Имя) = Неопределено
					ИЛИ Колонка.Имя = "Выбрано"
					ИЛИ Колонка.Имя = "ИсходныйНомерСтроки" 
					ИЛИ Колонка.Имя = "пСсылка" тогда
					Продолжить;
				КонецЕсли;	
				НоваяСтрока[Колонка.Имя + "Оригинал"] = НайденныеСтроки[0][Колонка.Имя]
			КонецЦикла;
			НайденныеСтроки[0].Выбрано = Истина;
			НоваяСтрока.ВариантИзменения = 1;
		Иначе 
			НоваяСтрока.ВариантИзменения = 2;
		КонецЕсли;	
	КонецЦикла;	
	
	// Допишем из таблицы 2, то что не было выбрано при соединении.
	Для Каждого СтрокаТаблицы2 из Таблица2 цикл
		Если СтрокаТаблицы2.Выбрано тогда
			Продолжить;
		КонецЕсли;	
		
		НоваяСтрока = ТаблицаРезультат.Добавить();
		Для Каждого Колонка	из Таблица1.Колонки цикл
			Если Таблица2.Колонки.Найти(Колонка.Имя) = Неопределено
				ИЛИ Колонка.Имя = "Выбрано"
				ИЛИ Колонка.Имя = "ИсходныйНомерСтроки" 
				ИЛИ Колонка.Имя = "пСсылка" тогда
				Продолжить;
			КонецЕсли;	
			НоваяСтрока[Колонка.Имя + "Оригинал"] = СтрокаТаблицы2[Колонка.Имя]
		КонецЦикла;
		НоваяСтрока.ВариантИзменения = 3;
	КонецЦикла;	
	
	КолонкиСортировки = "";
	Если НЕ ТаблицаРезультат.Колонки.Найти("НомерСтроки") = Неопределено тогда
		КолонкиСортировки = "НомерСтроки";
	КонецЕсли;	
	Если НЕ ТаблицаРезультат.Колонки.Найти("НомерСтрокиОригинал") = Неопределено тогда
		КолонкиСортировки = КолонкиСортировки + ?(КолонкиСортировки="","",",") + "НомерСтрокиОригинал";
	КонецЕсли;	
	Если ЗначениеЗаполнено(КолонкиСортировки) тогда
		ТаблицаРезультат.Сортировать(КолонкиСортировки);
	КонецЕсли;	
	
	Возврат ТаблицаРезультат
	
КонецФункции	

#КонецОбласти

#Область ПроцедурыОформленияИзменений

// Очищает картинку ВосклицательныйЗнакКрасный у страниц формы.
//
// Параметры:
// Форма - управляемая форма.
//
Процедура СброситьВыделениеИзмененийСтраницФормы(Форма)
	
	Для Каждого Элемент из Форма.Элементы цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы")
			И Элемент.Вид = ВидГруппыФормы.Страница
			И Элемент.Картинка = БиблиотекаКартинок.ВосклицательныйЗнакКрасный тогда
			Элемент.Картинка = БиблиотекаКартинок.Пустая;
			Элемент.Подсказка = "";
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры	

// Процедура рекурсивно проходит по элементам-родителям текущего элемента 
// и для групп формы страниц устанавливает картинку ВосклицательныйЗнакКрасный.
//
Процедура ОформитьВыделениеИзмененийСтраницыЭлемента(Элемент)
	
	Если ТипЗнч(Элемент) = Тип("УправляемаяФорма") тогда
		Возврат
	ИначеЕсли ТипЗнч(Элемент) = Тип("ГруппаФормы")
				И Элемент.Вид = ВидГруппыФормы.Страница
				И НЕ Элемент.Картинка = БиблиотекаКартинок.ВосклицательныйЗнакКрасный тогда
		Элемент.Картинка = БиблиотекаКартинок.ВосклицательныйЗнакКрасный;
		Элемент.Подсказка = "Страница содержит измененные данные";
		ОформитьВыделениеИзмененийСтраницыЭлемента(Элемент.Родитель);
	Иначе 
		ОформитьВыделениеИзмененийСтраницыЭлемента(Элемент.Родитель);		
	КонецЕсли;			
		
КонецПроцедуры	

// Оформляет выделение изменений реквизитов шапки объекта формы.
//
// Параметры:
// Форма - управляемая форма.
//
Процедура ОформитьВыделениеИзмененийРеквизитовШапки(Форма)
	
	Объект           = Форма.Объект;
	СсылкаНаОригинал = Форма.СсылкаНаОригинал;
	
	Если Не ЗначениеЗаполнено(СсылкаНаОригинал)
		ИЛИ СсылкаНаОригинал = Объект.Ссылка тогда
		Возврат
	КонецЕсли;	
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(СсылкаНаОригинал);
	
	СписокРеквизитов           = МенеджерОбъекта.СписокРеквизитовВыделенияИзменений();
	СписокРеквизитовИсключений = МенеджерОбъекта.СписокРеквизитовИсключенийВыделенияИзменений();
	
	РеквизитыОригинала = Новый Массив;
	ЗначенияРеквизитовОригинала = Новый Массив;
	
	Для Каждого Элемент из Форма.Элементы цикл
		Если НЕ ТипЗнч(Элемент) = Тип("ПолеФормы") тогда
			Продолжить;
		КонецЕсли;	
		
		РеквизитОбъекта = СтрЗаменить(Элемент.ПутьКДанным,"Объект.","");
		
		Если НЕ Объект.Свойство(РеквизитОбъекта) тогда
			Продолжить;
		КонецЕсли;	
		
		Если НЕ СписокРеквизитов = Неопределено И СтрНайти(СписокРеквизитов, РеквизитОбъекта) = 0 тогда
			Продолжить;
		ИначеЕсли НЕ СписокРеквизитовИсключений = Неопределено И СтрНайти(СписокРеквизитовИсключений, РеквизитОбъекта) > 0 тогда
			Продолжить;
		КонецЕсли;	
		
		ЗначениеОригинал = СсылкаНаОригинал[РеквизитОбъекта];
		
		Элемент.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
		Элемент.Подсказка            = ЗаголовокЭлемента(Элемент, Объект, РеквизитОбъекта) + " (оригинал): " + ЗначениеОригинал;
		
//	ITRR Кутья АА Локализация		
		СтрокаЗамены = НСтр("ru = 'оригинал'; en = 'original'");
		Элемент.Подсказка            = СтрЗаменить(Элемент.Подсказка,"оригинал",СтрокаЗамены);
//	ITRR Кутья АА Локализация		

		// Добавим реквизит оригинала для использования в условном оформлении.
		РеквизитыОригинала.Добавить(Новый РеквизитФормы("СсылкаНаОригинал"+РеквизитОбъекта, 
							Новый ОписаниеТипов(ОписаниеТипаРеквизита(Объект, РеквизитОбъекта)))); 
		
		ЗначенияРеквизитовОригинала.Добавить(ЗначениеОригинал);
		
		Если НЕ ЗначениеОригинал = Объект[РеквизитОбъекта] тогда
			ОформитьВыделениеИзмененийСтраницыЭлемента(Элемент);
		КонецЕсли;	
	КонецЦикла;	
	
	Форма.ИзменитьРеквизиты(РеквизитыОригинала);
	
	УсловноеОформление = Форма.УсловноеОформление;
	Для Инд = 0 по РеквизитыОригинала.ВГраница() цикл
		РеквизитОригинала = РеквизитыОригинала[Инд];
		
		РеквизитОбъекта = СтрЗаменить(РеквизитОригинала.Имя,"СсылкаНаОригинал","");
		
		Форма[РеквизитОригинала.Имя] = ЗначенияРеквизитовОригинала[Инд];
		
		// Элемент условного оформления по реквизиту.
		НовыйЭлемент = УсловноеОформление.Элементы.Добавить();
		
		Поле = НовыйЭлемент.Поля.Элементы.Добавить();
		Поле.Поле          = Новый ПолеКомпоновкиДанных(РеквизитОбъекта);
		Поле.Использование = Истина;
		
		ЭлементОтбора = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект."+РеквизитОбъекта);
		ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных(РеквизитОригинала.Имя);
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
		ЭлементОтбора.Использование  = Истина;
		
		НовыйЭлемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);
		
		ДобавитьВОписаниеДопРеквизитов(Форма, РеквизитОригинала.Имя, НовыйЭлемент);
	КонецЦикла;	
	
КонецПроцедуры

// Оформляет выделение изменений доп. реквизитов формы.
//
// Параметры:
// Форма - управляемая форма.
//
Процедура ОформитьВыделениеИзмененийДопРеквизитов(Форма)
	
	Если Не УправлениеСвойствами.ИспользоватьДопРеквизиты(Форма.Объект.Ссылка)
		ИЛИ Не ЕстьРеквизитФормы(Форма, "Свойства_ОписаниеДополнительныхРеквизитов") тогда
		Возврат
	КонецЕсли;	
	
	СсылкаНаОригинал = Форма.СсылкаНаОригинал;
	
	Если Не ЗначениеЗаполнено(СсылкаНаОригинал)
		ИЛИ СсылкаНаОригинал = Форма.Объект.Ссылка тогда
		Возврат
	КонецЕсли;	
	
	ОписаниеДополнительныхРеквизитов = Форма.Свойства_ОписаниеДополнительныхРеквизитов;
	ДополнительныеРеквизитыОригинал  = СсылкаНаОригинал.ДополнительныеРеквизиты;
	
	РеквизитыОригинала = Новый Массив;
	ЗначенияРеквизитовОригинала = Новый Массив;
	
	Для каждого Строка Из ОписаниеДополнительныхРеквизитов Цикл
		Значение = Форма[Строка.ИмяРеквизитаЗначение];
		
		НайденныеСтроки = ДополнительныеРеквизитыОригинал.НайтиСтроки(Новый Структура("Свойство", Строка.Свойство));
		Если НайденныеСтроки.ВГраница() = -1 тогда
			ЗначениеОригинал = Строка.ТипЗначения.ПривестиЗначение(Неопределено);
		Иначе 	
			ЗначениеОригинал = НайденныеСтроки[0].Значение;
		КонецЕсли;	
		
		Элемент = Форма.Элементы[Строка.ИмяРеквизитаЗначение];
		Элемент.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
		Элемент.Подсказка            = Строка.Наименование + " (оригинал): " + ЗначениеОригинал;
//	ITRR Кутья АА Локализация		
		СтрокаЗамены = НСтр("ru = 'оригинал'; en = 'original'");
		Элемент.Подсказка            = СтрЗаменить(Элемент.Подсказка,"оригинал",СтрокаЗамены);
//	ITRR Кутья АА Локализация		
		
		// Добавим реквизит оригинала для использования в условном оформлении.
		РеквизитыОригинала.Добавить(Новый РеквизитФормы("СсылкаНаОригинал"+Строка.ИмяРеквизитаЗначение, Новый ОписаниеТипов()));
		
		ЗначенияРеквизитовОригинала.Добавить(ЗначениеОригинал);
		
		Если НЕ ЗначениеОригинал = Значение тогда
			ОформитьВыделениеИзмененийСтраницыЭлемента(Элемент);
		КонецЕсли;	
	КонецЦикла;
	
	Форма.ИзменитьРеквизиты(РеквизитыОригинала);
	
	УсловноеОформление = Форма.УсловноеОформление;
	Для Инд = 0 по РеквизитыОригинала.ВГраница() цикл
		РеквизитОригинала = РеквизитыОригинала[Инд];
		
		РеквизитОбъекта = СтрЗаменить(РеквизитОригинала.Имя,"СсылкаНаОригинал","");
		
		Форма[РеквизитОригинала.Имя] = ЗначенияРеквизитовОригинала[Инд];
		
		// Элемент условного оформления по реквизиту.
		НовыйЭлемент = УсловноеОформление.Элементы.Добавить();
		
		Поле = НовыйЭлемент.Поля.Элементы.Добавить();
		Поле.Поле          = Новый ПолеКомпоновкиДанных(РеквизитОбъекта);
		Поле.Использование = Истина;
		
		ЭлементОтбора = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(РеквизитОбъекта);
		ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных(РеквизитОригинала.Имя);
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
		ЭлементОтбора.Использование  = Истина;
		
		НовыйЭлемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);
		
		ДобавитьВОписаниеДопРеквизитов(Форма, РеквизитОригинала.Имя, НовыйЭлемент);
	КонецЦикла;	
	
КонецПроцедуры

// Оформляет выделение изменений реквизитов контактной информации формы.
//
// Параметры:
// Форма - управляемая форма.
//
Процедура ОформитьВыделениеИзмененийРеквизитовКонтактнойИнформации(Форма)
	
	Если Не ИспользуетсяКонтактнаяИнформация(Форма.Объект.Ссылка) тогда
		Возврат
	КонецЕсли;	
	
	СсылкаНаОригинал = Форма.СсылкаНаОригинал;
	
	Если Не ЗначениеЗаполнено(СсылкаНаОригинал) 
		ИЛИ СсылкаНаОригинал = Форма.Объект.Ссылка тогда
		Возврат
	КонецЕсли;	
	
	КонтактнаяИнформацияОписание = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
	КонтактнаяИнформацияОригинал = СсылкаНаОригинал.КонтактнаяИнформация;
	
	РеквизитыОригинала = Новый Массив;
	ЗначенияРеквизитовОригинала = Новый Массив;
	
	Для каждого Строка Из КонтактнаяИнформацияОписание Цикл
		Значение = Форма[Строка.ИмяРеквизита];
		
		НайденныеСтроки = КонтактнаяИнформацияОригинал.НайтиСтроки(Новый Структура("Тип,Вид", Строка.Тип, Строка.Вид));
		Если НайденныеСтроки.ВГраница() = -1 тогда
			ЗначениеОригинал = Неопределено;
		Иначе 	
			ЗначениеОригинал = НайденныеСтроки[0].Представление;
		КонецЕсли;	
		
		Элемент = Форма.Элементы[Строка.ИмяРеквизита];
		Элемент.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
		Элемент.Подсказка            = Строка(Строка.Вид) + " (оригинал): " + ЗначениеОригинал;
//	ITRR Кутья АА Локализация		
		СтрокаЗамены = НСтр("ru = 'оригинал'; en = 'original'");
		Элемент.Подсказка            = СтрЗаменить(Элемент.Подсказка,"оригинал",СтрокаЗамены);
//	ITRR Кутья АА Локализация		
		
		// Добавим реквизит оригинала для использования в условном оформлении.
		РеквизитыОригинала.Добавить(Новый РеквизитФормы("СсылкаНаОригинал"+Строка.ИмяРеквизита, Новый ОписаниеТипов()));
		
		ЗначенияРеквизитовОригинала.Добавить(ЗначениеОригинал);
		
		Если НЕ ЗначениеОригинал = Значение тогда
			ОформитьВыделениеИзмененийСтраницыЭлемента(Элемент);
		КонецЕсли;	
	КонецЦикла;
	
	Форма.ИзменитьРеквизиты(РеквизитыОригинала);
	
	УсловноеОформление = Форма.УсловноеОформление;
	Для Инд = 0 по РеквизитыОригинала.ВГраница() цикл
		РеквизитОригинала = РеквизитыОригинала[Инд];
		
		РеквизитОбъекта = СтрЗаменить(РеквизитОригинала.Имя,"СсылкаНаОригинал","");
		
		Форма[РеквизитОригинала.Имя] = ЗначенияРеквизитовОригинала[Инд];
		
		// Элемент условного оформления по реквизиту.
		НовыйЭлемент = УсловноеОформление.Элементы.Добавить();
		
		Поле = НовыйЭлемент.Поля.Элементы.Добавить();
		Поле.Поле          = Новый ПолеКомпоновкиДанных(РеквизитОбъекта);
		Поле.Использование = Истина;
		
		ЭлементОтбора = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(РеквизитОбъекта);
		ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных(РеквизитОригинала.Имя);
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
		ЭлементОтбора.Использование  = Истина;
		
		НовыйЭлемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);
		
		ДобавитьВОписаниеДопРеквизитов(Форма, РеквизитОригинала.Имя, НовыйЭлемент);
	КонецЦикла;	
	
КонецПроцедуры

// Оформляет выделение изменений табличных частей формы.
//
// Параметры:
// Форма - управляемая форма.
//
Процедура ОформитьВыделениеИзмененийТабличныхЧастей(Форма)
	
	Объект           = Форма.Объект;
	СсылкаНаОригинал = Форма.СсылкаНаОригинал;
	
	Если Не ЗначениеЗаполнено(СсылкаНаОригинал) 
		ИЛИ СсылкаНаОригинал = Объект.Ссылка тогда
		Возврат
	КонецЕсли;	
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(СсылкаНаОригинал);
	
	НастройкиОформления = МенеджерОбъекта.НастройкиОформленияВыделенияИзмененийТабличныхЧастей();
	
	Если НастройкиОформления = Неопределено тогда
		Возврат
	КонецЕсли;
	
	мдТабличныеЧасти = Объект.Ссылка.Метаданные().ТабличныеЧасти;
	Для Каждого ТЧ из мдТабличныеЧасти цикл
		ПутьКДанным = ТЧ.Имя; 
				
		Если НЕ НастройкиОформления.Свойство(ПутьКДанным) тогда
			Продолжить;
		КонецЕсли;	
		
		ИмяКоманды = "ПоказатьОтличия"+ПутьКДанным;
		Если Форма.Команды.Найти(ИмяКоманды) = Неопределено тогда
			НоваяКоманда = Форма.Команды.Добавить(ИмяКоманды);
			НоваяКоманда.Заголовок = "Показать изменения";
			НоваяКоманда.Действие  = "Подключаемый_ПоказатьОтличия";
			НоваяКоманда.Подсказка = "Показать изменения";
			
			Кнопка = Форма.Элементы.Добавить(
				ИмяКоманды,
				Тип("КнопкаФормы"),
				Форма.Элементы[НастройкиОформления[ПутьКДанным].Элемент+"КоманднаяПанель"]);
			
			Кнопка.ТолькоВоВсехДействиях = Ложь;
			Кнопка.ИмяКоманды = ИмяКоманды;
			Кнопка.Картинка   = БиблиотекаКартинок.нсиПодсказка;
		КонецЕсли;	
		
		НастройкиСравнения = НастройкиОформления[ПутьКДанным];
		Если НастройкиСравнения.Свойство("РеквизитФормы") тогда
			Таблица1 = Форма[НастройкиСравнения.РеквизитФормы].Выгрузить();
		Иначе 
			Таблица1 = Объект[ПутьКДанным].Выгрузить();	
		КонецЕсли;
		Таблица2 = СсылкаНаОригинал[ПутьКДанным].Выгрузить();
		
		Элемент = Форма.Элементы[НастройкиСравнения.Элемент];
		Если ТаблицыОтличаются(Таблица1, Таблица2) тогда
			Элемент.ЦветТекста = WebЦвета.Красный;
			ОформитьВыделениеИзмененийСтраницыЭлемента(Элемент);
		Иначе 
			Элемент.ЦветТекста = ЦветаСтиля.ЦветТекстаПоля;
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

// Оформляет выделение изменений подключаемых реквизитов универсальных справочников формы.
//
// Параметры:
// Форма - управляемая форма.
//
Процедура ОформитьВыделениеИзмененийУниверсальныхСправочников(Форма)
	
	Если Не ЭтоУниверсальныйСправочник(Форма.Объект.Ссылка) тогда
		Возврат
	КонецЕсли;	
	
	СсылкаНаОригинал = Форма.СсылкаНаОригинал;
	
	Если Не ЗначениеЗаполнено(СсылкаНаОригинал)
		ИЛИ СсылкаНаОригинал = Форма.Объект.Ссылка тогда
		Возврат
	КонецЕсли;	
	
	мдСтандартныеРеквизиты = Форма.пМетаданные.СтандартныеРеквизиты;
	мдРеквизиты            = Форма.пМетаданные.Реквизиты;
	мдТабличныеЧасти       = Форма.пМетаданные.ТабличныеЧасти;
	
	ОбъектОригинал = нсиУниверсальноеХранилище.ПолучитьОбъект(Форма.пМетаданные, СсылкаНаОригинал);
	
	// Оформление подключаемых реквизитов шапки.
	РеквизитыОригинала = Новый Массив;
	ЗначенияРеквизитовОригинала = Новый Массив;
	
	Для каждого Реквизит Из мдРеквизиты Цикл
		ИмяРеквизита = Реквизит.Ключ;
		
		Значение = Форма[ИмяРеквизита];
		ЗначениеОригинал = ОбъектОригинал[ИмяРеквизита];
		
		Элемент = Форма.Элементы[ИмяРеквизита];
		Элемент.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
		Элемент.Подсказка            = Реквизит.Значение.Наименование + " (оригинал): " + ЗначениеОригинал;
//	ITRR Кутья АА Локализация		
		СтрокаЗамены = НСтр("ru = 'оригинал'; en = 'original'");
		Элемент.Подсказка            = СтрЗаменить(Элемент.Подсказка,"оригинал",СтрокаЗамены);
//	ITRR Кутья АА Локализация		
		
		// Добавим реквизит оригинала для использования в условном оформлении.
		РеквизитыОригинала.Добавить(Новый РеквизитФормы("СсылкаНаОригинал"+ИмяРеквизита, Реквизит.Значение.Тип1С));
		
		ЗначенияРеквизитовОригинала.Добавить(ЗначениеОригинал);
		
		Если НЕ ЗначениеОригинал = Значение тогда
			ОформитьВыделениеИзмененийСтраницыЭлемента(Элемент);
		КонецЕсли;	
	КонецЦикла;
	
	Для каждого Реквизит Из мдСтандартныеРеквизиты Цикл
		Если НЕ ЕстьРеквизитФормы(Форма, Реквизит.Ключ) тогда
			Продолжить;
		КонецЕсли;	
		
		ИмяРеквизита = Реквизит.Ключ;
		
		Значение = Форма[ИмяРеквизита];
		ЗначениеОригинал = СсылкаНаОригинал[ИмяРеквизита];
		
		Элемент = Форма.Элементы[ИмяРеквизита];
		Элемент.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
		Элемент.Подсказка            = Реквизит.Значение.Наименование + " (оригинал): " + ЗначениеОригинал;
//	ITRR Кутья АА Локализация		
		СтрокаЗамены = НСтр("ru = 'оригинал'; en = 'original'");
		Элемент.Подсказка            = СтрЗаменить(Элемент.Подсказка,"оригинал",СтрокаЗамены);
//	ITRR Кутья АА Локализация		
		
		// Добавим реквизит оригинала для использования в условном оформлении.
		РеквизитыОригинала.Добавить(Новый РеквизитФормы("СсылкаНаОригинал"+ИмяРеквизита, Реквизит.Значение.Тип1С));
		
		ЗначенияРеквизитовОригинала.Добавить(ЗначениеОригинал);
		
		Если НЕ ЗначениеОригинал = Значение тогда
			ОформитьВыделениеИзмененийСтраницыЭлемента(Элемент);
		КонецЕсли;	
	КонецЦикла;
		
	Форма.ИзменитьРеквизиты(РеквизитыОригинала);
	
	УсловноеОформление = Форма.УсловноеОформление;
	Для Инд = 0 по РеквизитыОригинала.ВГраница() цикл
		РеквизитОригинала = РеквизитыОригинала[Инд];
		
		РеквизитОбъекта = СтрЗаменить(РеквизитОригинала.Имя,"СсылкаНаОригинал","");
		
		Форма[РеквизитОригинала.Имя] = ЗначенияРеквизитовОригинала[Инд];
		
		// Элемент условного оформления по реквизиту.
		НовыйЭлемент = УсловноеОформление.Элементы.Добавить();
		
		Поле = НовыйЭлемент.Поля.Элементы.Добавить();
		Поле.Поле          = Новый ПолеКомпоновкиДанных(РеквизитОбъекта);
		Поле.Использование = Истина;
		
		ЭлементОтбора = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(РеквизитОбъекта);
		ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных(РеквизитОригинала.Имя);
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
		ЭлементОтбора.Использование  = Истина;
		
		НовыйЭлемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);
		
		ДобавитьВОписаниеДопРеквизитов(Форма, РеквизитОригинала.Имя, НовыйЭлемент);
	КонецЦикла;	
	
	// Оформление подключаемых табличных частей.
	Для Каждого Элемент из мдТабличныеЧасти цикл
		ПутьКДанным = Элемент.Ключ; 
		ИмяЭлемента = Элемент.Ключ;
		
		ИмяКоманды = "ПоказатьОтличия"+ПутьКДанным;
		Если Форма.Команды.Найти(ИмяКоманды) = Неопределено тогда
			НоваяКоманда = Форма.Команды.Добавить(ИмяКоманды);
			НоваяКоманда.Заголовок = "Показать изменения";
			НоваяКоманда.Действие  = "Подключаемый_ПоказатьОтличия";
			НоваяКоманда.Подсказка = "Показать изменения";
			
			Кнопка = Форма.Элементы.Добавить(
				ИмяКоманды,
				Тип("КнопкаФормы"),
				Форма.Элементы[ПутьКДанным+"КоманднаяПанель"]);
			
			Кнопка.ТолькоВоВсехДействиях = Ложь;
			Кнопка.ИмяКоманды = ИмяКоманды;
			Кнопка.Картинка   = БиблиотекаКартинок.нсиПодсказка;
		КонецЕсли;	
		
		Таблица1 = Форма[ПутьКДанным].Выгрузить();
		Таблица2 = ОбъектОригинал[ПутьКДанным].Скопировать();
		
		Таблица1.Колонки.Удалить("пСсылка");
		Таблица2.Колонки.Удалить("пСсылка");
		
		Элемент = Форма.Элементы[ИмяЭлемента];
		Если ТаблицыОтличаются(Таблица1, Таблица2) тогда
			Элемент.ЦветТекста = WebЦвета.Красный;
			ОформитьВыделениеИзмененийСтраницыЭлемента(Элемент);
		Иначе 
			Элемент.ЦветТекста = ЦветаСтиля.ЦветТекстаПоля;
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция формирует ключ строки из колонок универсальной табличной части.
//
Функция КлючСтрокиУниверсальнойТабличнойЧасти(Таблица)
	
	КлючСтроки = "";
	Для Каждого Колонка из Таблица.Колонки цикл
		Если Колонка.Имя = "пСсылка" тогда
			Продолжить;
		КонецЕсли;	
		КлючСтроки = КлючСтроки + ?(КлючСтроки="","",",") + Колонка.Имя;
	КонецЦикла;	
	
	Возврат КлючСтроки;
	
КонецФункции	

// Функция проверяет равны ли таблицы.
// Параметры:
//	Таблица1 - ТаблицаЗначений;
//	Таблица2 - ТаблицаЗначений.
//
Функция ТаблицыОтличаются(Таблица1, Таблица2)
	
	Таблица1.Колонки.Добавить("СлужебныйСчетчик", Новый ОписаниеТипов("Число"));
	Таблица1.ЗаполнитьЗначения(1, "СлужебныйСчетчик");
		
	Таблица2.Колонки.Добавить("СлужебныйСчетчик", Новый ОписаниеТипов("Число"));
	Таблица2.ЗаполнитьЗначения(2, "СлужебныйСчетчик");
	
	Для Каждого СтрокаТаблица2 из Таблица2 цикл
		НоваяСтрока1 = Таблица1.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока1, СтрокаТаблица2);
	КонецЦикла;	
	
	СтрокаКолонокСвертки = "";
	Для Каждого Колонка из Таблица1.Колонки цикл
		Если Колонка.Имя = "СлужебныйСчетчик" 
			ИЛИ Колонка.Имя = "ИсходныйНомерСтроки"
			ИЛИ Таблица2.Колонки.Найти(Колонка.Имя) = Неопределено тогда
			Продолжить;
		КонецЕсли;	
		СтрокаКолонокСвертки = СтрокаКолонокСвертки + ?(СтрокаКолонокСвертки="","",",") + Колонка.Имя;
	КонецЦикла;	
	Таблица1.Свернуть(СтрокаКолонокСвертки, "СлужебныйСчетчик");
	
	Для Каждого СтрокаТаблицы из Таблица1 цикл
		Если СтрокаТаблицы.СлужебныйСчетчик = 1 ИЛИ СтрокаТаблицы.СлужебныйСчетчик = 2 тогда
			Возврат Истина	
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Ложь
	
КонецФункции	

// Добавляет в таблицу формы ВыделениеИзменений_ОписаниеДополнительныхРеквизитов 
// описание реквизита и связанного с ним элемента условного оформления.
// Параметры:
//	ИмяРеквизита - строка - имя реквизита;
//	ЭлементУсловногоОформления - ЭлементУсловногоОформленияКомпоновкиДанных - элемент условного офолмения.
// 
Процедура ДобавитьВОписаниеДопРеквизитов(Форма, ИмяРеквизита, ЭлементУсловногоОформления)
	
	ИдентификаторУсловногоОформления = Форма.УсловноеОформление.ПолучитьИдентификаторПоОбъекту(ЭлементУсловногоОформления);
	
	НоваяСтрока = Форма.ВыделениеИзменений_ОписаниеДополнительныхРеквизитов.Добавить();
	НоваяСтрока.ИмяРеквизита = ИмяРеквизита;
	НоваяСтрока.ИдентификаторЭлементаУсловногоОформления = ИдентификаторУсловногоОформления;
	
КонецПроцедуры

// Формирует структуру поиска по ключу для метода НайтиСтроки.
// Параметры:
//	Ключ - строка - список полей ключа поиска;
//	Данные - строка ТЗ, из которой получаются данные для ключа.
// Возвращает:
//	Структуру с ключами из строки Ключ.
// 
Функция СтруктураПоиска(Ключ, Данные)
	стрПоиска = Новый Структура;
	
	КлючСтроки = СтрЗаменить(Ключ, ",", Символы.ПС);
	Для Инд = 1 по СтрЧислоСтрок(КлючСтроки) цикл
		Поле = СтрПолучитьСтроку(КлючСтроки, Инд);
		стрПоиска.Вставить(Поле, Данные[Поле]);
	КонецЦикла;	
	стрПоиска.Вставить("Выбрано", Ложь);
	
	Возврат стрПоиска
КонецФункции	

// Формирует заголовок элемента формы.
// Параметры:
//	Элемент - элемент формы.
//	Объект - объект формы.
//	РеквизитОбъекта - строка - реквизит объекта.
// Возвращает:
//	Заголовок элемента формы.
//
Функция ЗаголовокЭлемента(Элемент, Объект, РеквизитОбъекта)
	
	Если ЗначениеЗаполнено(Элемент.Заголовок) тогда
		Возврат Элемент.Заголовок
	КонецЕсли;
	
	мдРеквизит = Объект.Ссылка.Метаданные().Реквизиты.Найти(РеквизитОбъекта);
	Если НЕ мдРеквизит = Неопределено 
		И ЗначениеЗаполнено(мдРеквизит.Синоним) тогда
		Возврат мдРеквизит.Синоним
	ИначеЕсли НЕ мдРеквизит = Неопределено тогда	
		Возврат мдРеквизит.Имя
	КонецЕсли;	
	
	Для каждого мдСтандартныйРеквизит из Объект.Ссылка.Метаданные().СтандартныеРеквизиты цикл
		Если Не мдСтандартныйРеквизит.Имя = РеквизитОбъекта тогда
			Продолжить;
		КонецЕсли;	
		Если ЗначениеЗаполнено(мдСтандартныйРеквизит.Синоним) тогда
			Возврат мдСтандартныйРеквизит.Синоним
		КонецЕсли;	
		Возврат мдСтандартныйРеквизит.Имя
	КонецЦикла;

	Возврат "Реквизит"
	
КонецФункции

// Формирует заголовок реквизита табличной части.
// Параметры:
//	Объект - объект формы;
//	ИмяТабличнойЧасти - строка - имя табличной части;
//	ИмяРеквизита - строка - имя реквизита.
// Возвращает:
//	Заголовок реквизита табличной части.
//  
Функция ЗаголовокРеквизитаТабличнойЧасти(Объект, ИмяТабличнойЧасти, Колонка)
	
	Если Колонка.Имя = "НомерСтроки" ИЛИ Колонка.Имя = "Код" тогда
		Возврат "N"
	КонецЕсли;	
	
	Если Колонка.Заголовок = "" тогда 
		мдТабличнаяЧасть = Объект.Ссылка.Метаданные().ТабличныеЧасти.Найти(ИмяТабличнойЧасти);
		Если НЕ мдТабличнаяЧасть = Неопределено тогда
			мдРеквизит = мдТабличнаяЧасть.Реквизиты.Найти(Колонка.Имя);
			Если НЕ мдРеквизит = Неопределено
				И ЗначениеЗаполнено(мдРеквизит.Синоним)тогда
				Возврат мдРеквизит.Синоним
			ИначеЕсли НЕ мдРеквизит = Неопределено тогда 	
				Возврат мдРеквизит.Имя
			Иначе 
				Возврат СтрЗаменить(Колонка.Имя, "_", " ");	
			КонецЕсли;	
		Иначе 
			Возврат СтрЗаменить(Колонка.Имя, "_", " "); 
		КонецЕсли;	
	Иначе 
		Возврат Колонка.Заголовок	
	КонецЕсли;
	
КонецФункции	

// Формирует заголовок табличной части.
// Параметры:
//	Объект - объект формы;
//	ИмяТабличнойЧасти - строка - имя табличной части;
// Возвращает:
//	Заголовок табличной части.
//
Функция ЗаголовокТабличнойЧасти(Объект, ИмяТабличнойЧасти)
	
	мдТЧ = Объект.Ссылка.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти];
	Если ЗначениеЗаполнено(мдТЧ.Синоним) тогда
		Возврат мдТЧ.Синоним
	Иначе	
		Возврат мдТЧ.Имя
	КонецЕсли;	
	
КонецФункции	

// Формирует описание типа реквизита.
// Параметры:
//	Объект - объект формы;
//	РеквизитОбъекта - строка - имя имя реквизита.
// Возвращает:
//	Описание типа реквизита.
//  
Функция ОписаниеТипаРеквизита(Объект, РеквизитОбъекта)
	
	мдРеквизит = Объект.Ссылка.Метаданные().Реквизиты.Найти(РеквизитОбъекта);
	Если НЕ мдРеквизит = Неопределено тогда
		Возврат мдРеквизит.Тип
	КонецЕсли;	
	
	Для каждого мдСтандартныйРеквизит из Объект.Ссылка.Метаданные().СтандартныеРеквизиты цикл
		Если Не мдСтандартныйРеквизит.Имя = РеквизитОбъекта тогда
			Продолжить;
		КонецЕсли;	
		Возврат мдСтандартныйРеквизит.Тип
	КонецЦикла;

	Возврат Неопределено
	
КонецФункции	

// Проверяет использование контакной информации в справочнике.
// Параметры:
//	ВладелецСвойств - ссылка на элемент справочника.
// Возвращает:
//	Истина - используется, Ложь - нет.
//
Функция ИспользуетсяКонтактнаяИнформация(ВладелецСвойств)
	
	Возврат ВладелецСвойств.Метаданные().ТабличныеЧасти.Найти("КонтактнаяИнформация") <> Неопределено
	
КонецФункции

// Проверяет наличие реквизита в форме.
// Параметры:
//	Форма - управляемая форма;
//	ИмяРеквизита - строка - имя реквизита.
// Возвращает:
//	Истина - реквизит есть, Ложь - нет.
//
Функция ЕстьРеквизитФормы(Форма, ИмяРеквизита)
	
	РеквизитыФормы = Форма.ПолучитьРеквизиты();
	
	Для Каждого Реквизит из РеквизитыФормы цикл
		Если Реквизит.Имя = ИмяРеквизита тогда
			Возврат Истина
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат Ложь
	
КонецФункции

// Проверяет наличие реквизита в форме.
// Параметры:
//	Форма - управляемая форма;
// Возвращает:
//	Истина - форма универсального справочника, Ложь - нет.
//
Функция ЭтоУниверсальныйСправочник(Ссылка)
	
	ИмяСправочника = Ссылка.Метаданные().Имя;
	
	Возврат (ИмяСправочника = "нсиУниверсальныйКлассификатор" ИЛИ ИмяСправочника = "нсиУниверсальныйФункциональныйСправочник");
	
КонецФункции

#КонецОбласти