#Область ПрограммныйИнтерфейс

// Функция возвращает структуру разобранного типа.
//
Функция РазобратьТип1(Тип1) Экспорт
	ст = Новый Структура("Тип1,Длина,Точность");
	
	Поз = Найти(Тип1, "(");
	Если Поз>0 Тогда
		ст.Тип1 = Лев(Тип1, Поз-1);
		Квалификаторы = Сред(Тип1, Поз+1);
		Квалификаторы = Сред(Квалификаторы, 1, СтрДлина(Квалификаторы)-1);
		Поз = Найти(Квалификаторы, ",");
		Если Поз>0 Тогда
			ст.Длина = Число(Лев(Квалификаторы, Поз-1));
			ст.Точность = Число(Сред(Квалификаторы, Поз+1));
		Иначе
			ст.Длина = Число(Квалификаторы);
		КонецЕсли;
	Иначе
		ст.Тип1 = Тип1;
	КонецЕсли;
	
	Возврат ст;
КонецФункции

// Функция возвращает представление переданного типа.
//
Функция ПолучитьПредставлениеТипа(Тип1, Тип2) Экспорт
	Текст = "";
	Если ЗначениеЗаполнено(Тип2) Тогда
		Если Тип1="Хранилище" Тогда
			Текст = "Универсальное хранилище."+Строка(Тип2);
		Иначе
			Текст = Тип1;
			//
			Текст = Текст+".";
			ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(Тип1+"."+Тип2);
			Если ОбъектМетаданных=Неопределено Тогда
				Текст = Текст+"Объект не найден: "+Тип2;
			Иначе
				Текст = Текст+ОбъектМетаданных.Представление();
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если Тип1="ДатаИВремя" Тогда
			Текст = "Дата и время";
		Иначе
			Текст = Тип1;
		КонецЕсли;
	КонецЕсли;
	Возврат Текст;
КонецФункции

// Функция возвращает структуру метаданных универсального хранилища по виду справочника .
//
Функция ПолучитьМетаданные(ВидСправочника) Экспорт
	
	НачатьТранзакцию();
	Блокировка = Новый БлокировкаДанных();
	ЭлементБлокировки = Блокировка.Добавить("Справочник.нсиВидыСправочников");
	ЭлементБлокировки.УстановитьЗначение("Ссылка", ВидСправочника);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	Блокировка.Заблокировать();
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос.УстановитьПараметр("ВидСправочника", ВидСправочника);
	Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Виды.ВидСправочника,
		|	МАКСИМУМ(Права.Просмотр) КАК Просмотр,
		|	МАКСИМУМ(Права.Добавление) КАК Добавление,
		|	МАКСИМУМ(Права.Редактирование) КАК Редактирование,
		|	МАКСИМУМ(Права.ПометкаНаУдаление) КАК ПометкаНаУдаление,
		|	МАКСИМУМ(Права.СнятиеПометкиНаУдаление) КАК СнятиеПометкиНаУдаление,
		|	МАКСИМУМ(Права.Удаление) КАК Удаление,
		|	МАКСИМУМ(Права.УдалениеПомеченных) КАК УдалениеПомеченных
		|ПОМЕСТИТЬ ВТПраваДоступа
		|ИЗ
		|	(ВЫБРАТЬ
		|		&ВидСправочника КАК ВидСправочника
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ
		|		ВЫРАЗИТЬ(Виды.Классификатор КАК Справочник.нсиВидыСправочников)
		|	ИЗ
		|		Справочник.нсиВидыСправочников КАК Виды
		|	ГДЕ
		|		Виды.Ссылка = &ВидСправочника
		|		И Виды.ИспользоватьКлассификацию
		|		И Виды.Классификатор ССЫЛКА Справочник.нсиВидыСправочников
		|
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ
		|		ВЫРАЗИТЬ(ВидыРеквизиты.Тип2 КАК Справочник.нсиВидыСправочников)
		|	ИЗ
		|		Справочник.нсиВидыСправочников.Реквизиты КАК ВидыРеквизиты
		|	ГДЕ
		|		ВидыРеквизиты.Ссылка = &ВидСправочника
		|		И ВидыРеквизиты.Тип2 ССЫЛКА Справочник.нсиВидыСправочников
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ
		|		ВЫРАЗИТЬ(ВидыРеквизиты.Тип2 КАК Справочник.нсиВидыСправочников)
		|	ИЗ
		|		Справочник.нсиВидыСправочников КАК Виды
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.нсиВидыСправочников.Реквизиты КАК ВидыРеквизиты
		|			ПО (ВидыРеквизиты.Ссылка = Виды.Ссылка)
		|	ГДЕ
		|		Виды.ВладелецСправочника = &ВидСправочника
		|		И Виды.ВидСправочника = ЗНАЧЕНИЕ(Перечисление.нсиВидыСправочников.ТабличнаяЧасть)
		|		И ВидыРеквизиты.Тип2 ССЫЛКА Справочник.нсиВидыСправочников) КАК Виды
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.нсиПраваДоступаНаВидыСправочников КАК Права
		|		ПО (Права.ВидСправочника = Виды.ВидСправочника)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставГрупп
		|		ПО (СоставГрупп.ГруппаПользователей = Права.Пользователь)
		|			И (СоставГрупп.Используется)
		|ГДЕ
		|	СоставГрупп.Пользователь = &ТекущийПользователь ИЛИ Права.Пользователь = &ТекущийПользователь
		|
		|СГРУППИРОВАТЬ ПО
		|	Виды.ВидСправочника
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Виды.ВидСправочника
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Виды.ВидСправочника,
		|	Виды.Наименование,
		|	Виды.ТипКода,
		|	Виды.Иерархический,
		|	Виды.ВладелецСправочника,
		|	Виды.ВладелецСправочника.БыстрыйВыбор КАК ВладелецБыстрыйВыбор,
		|	ЕСТЬNULL(ПраваНаКлассификатор.Просмотр, ЛОЖЬ) КАК КлассификаторПравоПросмотр,
		|	Виды.Классификатор.БыстрыйВыбор КАК КлассификаторБыстрыйВыбор,
		|	ЕСТЬNULL(ПраваНаВладельца.Просмотр, ЛОЖЬ) КАК ВладелецПравоПросмотр,
		|	Виды.ПредставлениеОбъекта,
		|	Виды.ДлинаПредставления,
		|	Виды.БыстрыйВыбор,
		|	Виды.ОтборВФормеСписка,
		|	ЕСТЬNULL(ПраваДоступа.Просмотр, ЛОЖЬ) КАК ПраваДоступаПросмотр,
		|	ЕСТЬNULL(ПраваДоступа.Добавление, ЛОЖЬ) КАК ПраваДоступаДобавление,
		|	ЕСТЬNULL(ПраваДоступа.Редактирование, ЛОЖЬ) КАК ПраваДоступаРедактирование,
		|	ЕСТЬNULL(ПраваДоступа.ПометкаНаУдаление, ЛОЖЬ) КАК ПраваДоступаПометкаНаУдаление,
		|	ЕСТЬNULL(ПраваДоступа.СнятиеПометкиНаУдаление, ЛОЖЬ) КАК ПраваДоступаСнятиеПометкиНаУдаление,
		|	ЕСТЬNULL(ПраваДоступа.Удаление, ЛОЖЬ) КАК ПраваДоступаУдаление,
		|	ЕСТЬNULL(ПраваДоступа.УдалениеПомеченных, ЛОЖЬ) КАК ПраваДоступаУдалениеПомеченных,
		|	Виды.ТипНаименования,
		|	Виды.ТипПолногоНаименования,
		|	Виды.ВидИерархии,
		|	Виды.Классификатор,
		|	Виды.ИспользоватьЗаявки,
		|	Виды.ИспользоватьНормализацию,
		|	Виды.ИспользоватьКлассификацию,
		|	Виды.ИспользоватьПолноеНаименование
		|ИЗ
		|	Справочник.нсиВидыСправочников КАК Виды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПраваДоступа КАК ПраваДоступа
		|		ПО (ПраваДоступа.ВидСправочника = Виды.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПраваДоступа КАК ПраваНаВладельца
		|		ПО (ПраваНаВладельца.ВидСправочника = Виды.ВладелецСправочника)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПраваДоступа КАК ПраваНаКлассификатор
		|		ПО (ПраваНаКлассификатор.ВидСправочника = Виды.Классификатор)
		|ГДЕ
		|	Виды.Ссылка = &ВидСправочника
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Виды.Ссылка КАК ВидСправочника,
		|	Виды.Наименование КАК Наименование,
		|	Виды.Имя КАК Имя,
		|	Виды.Пояснение КАК Подсказка
		|ИЗ
		|	Справочник.нсиВидыСправочников КАК Виды
		|ГДЕ
		|	Виды.ВладелецСправочника = &ВидСправочника
		|	И Виды.ВидСправочника = ЗНАЧЕНИЕ(Перечисление.нсиВидыСправочников.ТабличнаяЧасть)
		|	И НЕ Виды.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Виды.Наименование";
	Результаты = Запрос.ВыполнитьПакет();
	Выб = Результаты[1].Выбрать();
	Выб.Следующий();
	
	Ст = Новый Структура(
		"ВидСправочника,Наименование,ДлинаКода,ДлинаНаименования,ДлинаПолногоНаименования,Иерархический,
		|ВидИерархии,ПредставлениеОбъекта,ДлинаПредставления,
		|БыстрыйВыбор,ОтборВФормеСписка,ИспользоватьЗаявки,ИспользоватьНормализацию,
		|ИспользоватьКлассификацию,ИспользоватьПолноеНаименование,Владелец,Классификатор",
		ВидСправочника, 
		Выб.Наименование, 
		РазобратьТип1(Выб.ТипКода).Длина, 
		РазобратьТип1(Выб.ТипНаименования).Длина, 
		РазобратьТип1(Выб.ТипПолногоНаименования).Длина, 
		Выб.Иерархический,
		Выб.ВидИерархии,
		Выб.ПредставлениеОбъекта,
		Выб.ДлинаПредставления,
		Выб.БыстрыйВыбор,
		Выб.ОтборВФормеСписка,
		Выб.ИспользоватьЗаявки,
		Выб.ИспользоватьНормализацию,
		Выб.ИспользоватьКлассификацию,
		Выб.ИспользоватьПолноеНаименование
	);
	
	
	Ст.Вставить("СтандартныеРеквизиты",новый Структура);
	
	стНаименование = Новый Структура(
		"Идентификатор,Наименование,ДляГруппы,Подсказка,ТребоватьЗаполнения,Многострочный",
		Неопределено,"Наименование",Истина,"Наименование",Истина,Ложь
	);
	стНаименование.Вставить("Тип",ПостроитьТип(новый Структура("Тип1,Тип2",Выб.ТипНаименования)));
	стНаименование.Вставить("Тип1С",новый ОписаниеТипов("Строка",,,,новый КвалификаторыСтроки(Ст.ДлинаНаименования)));
	Ст.СтандартныеРеквизиты.Вставить("Наименование",стНаименование);
	
	Если Выб.ИспользоватьПолноеНаименование Тогда 
		
		стПолноеНаименование = Новый Структура(
			"Идентификатор,Наименование,ДляГруппы,Подсказка,ТребоватьЗаполнения,Многострочный",
			Неопределено,"Полное наименование",Истина,"Полное наименование",Истина,Истина
		);
		стПолноеНаименование.Вставить("Тип",ПостроитьТип(новый Структура("Тип1,Тип2",Выб.ТипПолногоНаименования)));
		стПолноеНаименование.Вставить("Тип1С",новый ОписаниеТипов("Строка",,,,новый КвалификаторыСтроки(Ст.ДлинаПолногоНаименования)));
		Ст.СтандартныеРеквизиты.Вставить("ПолноеНаименование",стПолноеНаименование);
	КонецЕсли;
	
	
	Если Ст.ИспользоватьКлассификацию Тогда 
		стКлассификатор = Новый Структура(
			"Идентификатор,Наименование,ДляГруппы,Подсказка,ТребоватьЗаполнения,Многострочный",
			Неопределено,"Класс",Ложь,"",Истина,Ложь
		);
		СтТип = Новый Структура("Тип1,Тип2,БыстрыйВыбор,ПравоПросмотр",
			"Хранилище",
			Выб.Классификатор,
			Выб.КлассификаторБыстрыйВыбор,
			Выб.КлассификаторПравоПросмотр
		);
		Тип1С = Новый ОписаниеТипов("УникальныйИдентификатор");
		стКлассификатор.Вставить("Тип",СтТип);
		стКлассификатор.Вставить("Тип1С");
		Ст.СтандартныеРеквизиты.Вставить("Класс",стКлассификатор);
	КонецЕсли;
	
	СтПрава = Новый Структура();
	Для каждого МДРесурс из Метаданные.РегистрыСведений.нсиПраваДоступаНаВидыСправочников.Ресурсы Цикл
		СтПрава.Вставить(МДРесурс.Имя, Выб["ПраваДоступа"+МДРесурс.Имя]);
	КонецЦикла;
	Ст.Вставить("ПраваДоступа", СтПрава);
	
	Если Ст.ИспользоватьКлассификацию Тогда
		СтТип = Новый Структура(
			"Тип1,Тип2,
			|БыстрыйВыбор,ПравоПросмотр",
			"Хранилище", 
			Выб.Классификатор,
			Выб.КлассификаторБыстрыйВыбор,
			Выб.КлассификаторПравоПросмотр
		);
		Тип1С = Новый ОписаниеТипов("УникальныйИдентификатор");
		Ст.Классификатор = Новый Структура("Тип,Тип1С", СтТип, Тип1С);
		Ст.Вставить("Характеристики");
	КонецЕсли;
	
	
	Ст.Вставить("Реквизиты", ПолучитьМетаданныеРеквизитов(ВидСправочника, Запрос.МенеджерВременныхТаблиц));
	
	ТабличныеЧасти_ = Новый Структура();
	Выб = Результаты[2].Выбрать();
	Пока Выб.Следующий() Цикл
		ДанныеТЧ = Новый Структура("ВидСправочника,Наименование,Подсказка");
		ЗаполнитьЗначенияСвойств(ДанныеТЧ, Выб);
		ДанныеТЧ.Вставить("Реквизиты", ПолучитьМетаданныеРеквизитов(Выб.ВидСправочника, Запрос.МенеджерВременныхТаблиц));
		ТабличныеЧасти_.Вставить(Выб.Имя, ДанныеТЧ);
	КонецЦикла;
	Ст.Вставить("ТабличныеЧасти", ТабличныеЧасти_);
	
	ЗафиксироватьТранзакцию();
	Возврат Ст;
КонецФункции

// Процедура получает имя хранения для ресурса.
//
Процедура ПолучитьИменаХранения(ТипРеквизита, ИмяРегистра, ИмяРесурса) Экспорт
	ИмяРесурса = "Значение";
	Если ТипРеквизита.Тип1="Булево" Тогда
		ИмяРегистра = "нсиХранилищеБулево";
	ИначеЕсли ТипРеквизита.Тип1="Строка" Тогда
		ИмяРегистра = "нсиХранилищеСтрока";
	ИначеЕсли ТипРеквизита.Тип1="Число" Тогда
		ИмяРегистра = "нсиХранилищеЧисло";
	ИначеЕсли ТипРеквизита.Тип1="Дата" или ТипРеквизита.Тип1="Время" или ТипРеквизита.Тип1="ДатаИВремя" Тогда
		ИмяРегистра = "нсиХранилищеДата";
	Иначе
		ИмяРегистра = "нсиХранилищеСсылка";
	КонецЕсли;
КонецПроцедуры

// Функция возвращает пустой уникальный идентификатор.
//
Функция ПолучитьПустойИдентификатор() Экспорт
	Возврат Новый УникальныйИдентификатор(XMLСтрока(Справочники.нсиВидыСправочников.ПустаяСсылка()));
КонецФункции

// Функция возвращает выражение метаданных реквизита.
//
Функция ПолучитьОператорВыражения(МетаданныеРеквизита) Экспорт
	Оператор = "";
	Тип = МетаданныеРеквизита.Тип;
	Если Тип.Тип1="Перечисление" Тогда
		Оператор = "Перечисление."+Тип.Тип2;
	ИначеЕсли Тип.Тип1="Справочник" Тогда
		Оператор = "Справочник."+Тип.Тип2;
	ИначеЕсли Тип.Тип1="Строка" Тогда
		Оператор = "Строка("+Тип.Длина+")";
	ИначеЕсли Тип.Тип1="Число" Тогда
		Оператор = "Число("+Тип.Длина+","+Тип.Точность+")";
	КонецЕсли;
	Возврат Оператор;
КонецФункции

// Функция возвращает представление выражения.
//
Функция ВыражениеПредставления(Тип, ПолеЗначения, ПолеПредставления) Экспорт
	Если не Тип.ПравоПросмотр Тогда
		Возврат """<Недостаточно прав для просмотра>""";
	КонецЕсли;
	Возврат "
	|Выбор
	|	КОГДА "+ПолеЗначения+" = &ПустойИдентификатор ТОГДА """"
	|	КОГДА "+ПолеПредставления+" ЕСТЬ NULL ТОГДА ""<Объект не найден>""
	|	КОГДА "+ПолеПредставления+" = """" ТОГДА ""<>""
	|	ИНАЧЕ ВЫРАЗИТЬ("+ПолеПредставления+" КАК Строка("+Формат(Тип.ДлинаПредставления, "ЧГ=")+"))
	|КОНЕЦ
	|";
КонецФункции

// Процедура записывает реквизит для вида справочника.
//
Процедура ЗаписатьРеквизит(ВидСправочника, Элемент, МетаданныеРеквизита, ЗначениеРеквизита) Экспорт
	Перем ИмяМенеджера, ИмяРесурса;
	ПолучитьИменаХранения(МетаданныеРеквизита.Тип, ИмяМенеджера, ИмяРесурса);
	
	Менеджер = РегистрыСведений[ИмяМенеджера].СоздатьМенеджерЗаписи();
	Менеджер.ВидСправочника = ВидСправочника;
	Менеджер.Элемент = Элемент;
	Менеджер.Реквизит = МетаданныеРеквизита.Идентификатор;
	Менеджер[ИмяРесурса] = ЗначениеРеквизита;
	Менеджер.Записать();
КонецПроцедуры

// Процедура удаляет реквизит для вида справочника.
//
Процедура УдалитьРеквизит(ВидСправочника, Элемент, Имя, пРеквизит) Экспорт
	Перем ИмяМенеджера, ИмяРесурса;
	ПолучитьИменаХранения(пРеквизит.Тип, ИмяМенеджера, ИмяРесурса);
	
	Менеджер = РегистрыСведений[ИмяМенеджера].СоздатьМенеджерЗаписи();
	Менеджер.ВидСправочника = ВидСправочника;
	Менеджер.Элемент = Элемент;
	Менеджер.Реквизит = пРеквизит.Идентификатор;
	Менеджер.Удалить();
КонецПроцедуры

// Функция возвращает объект универсального хранилища.
//
Функция ПолучитьОбъект(пМетаданные, Ссылка) Экспорт
	Ст = Новый Структура;
	
	ТекстПоля = "";
	ТекстСвязи = "";
	Запрос = Новый Запрос();
	
	ЭтоГруппа = Ложь;
	Если Ссылка.Метаданные().реквизиты.Найти("пЭтоГруппа")<>Неопределено Тогда 
		ЭтоГруппа = Ссылка.пЭтоГруппа;
	КонецЕсли;
	
	Для каждого КлючИЗначение Из пМетаданные.Реквизиты Цикл
		ДобавитьПолеРеквизита(КлючИЗначение.Ключ, КлючИЗначение.Значение, Запрос, ТекстПоля, ТекстСвязи, Ст);
	КонецЦикла;
	
	ИмяОсновнойТаблицы = "Справочник."+Ссылка.Метаданные().Имя;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ОсновнаяТаблица.Ссылка КАК Ссылка,
	|	ОсновнаяТаблица.ВерсияДанных КАК ВерсияДанных,
	|"+ТекстПоля+"
	|	ВЫРАЗИТЬ(ОсновнаяТаблица.Код КАК Строка("+пМетаданные.ДлинаКода+")) как Код,
	|	ОсновнаяТаблица.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ "+ИмяОсновнойТаблицы+" КАК ОсновнаяТаблица
	|"+ТекстСвязи+"
	|ГДЕ ОсновнаяТаблица.Владелец = &ВидСправочника
	|	И ОсновнаяТаблица.Ссылка = &Ссылка
	|";
	
	Запрос.УстановитьПараметр("ВидСправочника", пМетаданные.ВидСправочника);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ПустойИдентификатор", нсиУниверсальноеХранилище.ПолучитьПустойИдентификатор());
	
	Если пМетаданные.Свойство("Характеристики") И пМетаданные.Характеристики<>Неопределено Тогда
		ТекстПоляХарактеристик = "";
		ТекстСвязиХарактеристик = "";
		ЗапросХарактеристик = Новый Запрос;
		Для каждого КлючИЗначение Из пМетаданные.Характеристики Цикл
			ДобавитьПолеРеквизита(КлючИЗначение.Ключ, КлючИЗначение.Значение, ЗапросХарактеристик, ТекстПоляХарактеристик, ТекстСвязиХарактеристик, Ст);
		КонецЦикла;
		ЗапросХарактеристик.Текст = "
		|ВЫБРАТЬ
		|	ОсновнаяТаблица.Ссылка КАК Ссылка,
		|	ОсновнаяТаблица.ВерсияДанных КАК ВерсияДанных,
		|"+ТекстПоляХарактеристик+"
		|	ВЫРАЗИТЬ(ОсновнаяТаблица.Код КАК Строка("+пМетаданные.ДлинаКода+")) как Код,
		|	ОсновнаяТаблица.ПометкаУдаления КАК ПометкаУдаления
		|ИЗ "+ИмяОсновнойТаблицы+" КАК ОсновнаяТаблица
		|"+ТекстСвязиХарактеристик+"
		|ГДЕ ОсновнаяТаблица.Владелец = &ВидСправочника
		|	и ОсновнаяТаблица.Ссылка = &Ссылка
		|";
		
		ЗапросХарактеристик.УстановитьПараметр("ВидСправочника", пМетаданные.ВидСправочника);
		ЗапросХарактеристик.УстановитьПараметр("Ссылка", Ссылка);
		ЗапросХарактеристик.УстановитьПараметр("ПустойИдентификатор", нсиУниверсальноеХранилище.ПолучитьПустойИдентификатор());
	КонецЕсли;
	
	
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных();
	ЭлементБлокировки = Блокировка.Добавить("Справочник.нсиВидыСправочников");
	ЭлементБлокировки.УстановитьЗначение("Ссылка", пМетаданные.ВидСправочника);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	ЭлементБлокировки = Блокировка.Добавить(ИмяОсновнойТаблицы);
	ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	Блокировка.Заблокировать();
	
	Выб = Запрос.Выполнить().Выбрать();
	Если Не Выб.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Ст, Выб);
	
	Если пМетаданные.Свойство("Характеристики") И пМетаданные.Характеристики<>Неопределено Тогда
		Выб = ЗапросХарактеристик.Выполнить().Выбрать();
		Если Не Выб.Следующий() Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Ст, Выб);
	КонецЕсли;
	
	ЧитатьТЧ = Истина;
	Если пМетаданные.Иерархический Тогда
		ЧитатьТЧ = не ЭтоГруппа;
	КонецЕсли;
	
	Если ЧитатьТЧ Тогда
		Для каждого ТЧКлючИЗначение из пМетаданные.ТабличныеЧасти Цикл
			ИмяТЧ = ТЧКлючИЗначение.Ключ;
			ТЧ_ = ТЧКлючИЗначение.Значение;
			ТекстПоля = "";
			ТекстСвязи = "";
			Запрос = Новый Запрос();
			
			Для каждого КлючИЗначение Из ТЧ_.Реквизиты Цикл
				ДобавитьПолеРеквизита(КлючИЗначение.Ключ, КлючИЗначение.Значение, Запрос, ТекстПоля, ТекстСвязи, Неопределено);
			КонецЦикла;
			
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	ОсновнаяТаблица.Элемент КАК пСсылка,
			|"+ТекстПоля+"
			|	ВЫРАЗИТЬ(ОсновнаяТаблица.Значение КАК Строка(4)) КАК Код
			|ИЗ
			|	РегистрСведений.нсиХранилищеСтрока КАК ОсновнаяТаблица
			|"+ТекстСвязи+"
			|ГДЕ 
			|	ОсновнаяТаблица.ВидСправочника = &ВидСправочника 
			|	И ОсновнаяТаблица.Реквизит = &РеквизитКод
			|	И ОсновнаяТаблица.ВладелецСсылка = &пСсылка
			|УПОРЯДОЧИТЬ ПО 
			|	ОсновнаяТаблица.Значение
			|";
			
			Запрос.УстановитьПараметр("ВидСправочника", ТЧ_.ВидСправочника);
			Запрос.УстановитьПараметр("РеквизитКод", Справочники.нсиПредопределенныеРеквизиты.Код.УникальныйИдентификатор());
			Запрос.УстановитьПараметр("пСсылка", Ссылка);
			Запрос.УстановитьПараметр("ПустойИдентификатор", нсиУниверсальноеХранилище.ПолучитьПустойИдентификатор());
			
			Ст.Вставить(ИмяТЧ, Запрос.Выполнить().Выгрузить());
		КонецЦикла;
	Иначе
		Для каждого ТЧКлючИЗначение из пМетаданные.ТабличныеЧасти Цикл
			Ст.Вставить(ТЧКлючИЗначение.Ключ, Неопределено);
		КонецЦикла;
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Ст;
КонецФункции

// Процедура записывает объект универсального хранилища.
//
Процедура ЗаписатьОбъект(пМетаданные,Ссылка, Данные, ИдентификаторФормы = Неопределено) Экспорт
	НачатьТранзакцию();
	
	Идентификатор = Ссылка.УникальныйИдентификатор();
	ИмяОсновнойТаблицы = "Справочник."+Ссылка.Метаданные().Имя;;
	
	Блокировка = Новый БлокировкаДанных();
	ЭлементБлокировки = Блокировка.Добавить("Справочник.нсиВидыСправочников");
	ЭлементБлокировки.УстановитьЗначение("Ссылка", пМетаданные.ВидСправочника);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	ЭлементБлокировки = Блокировка.Добавить(ИмяОсновнойТаблицы);
	ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
	Блокировка.Заблокировать();
	
	ЭтоГруппа = Ложь;
	Если Ссылка.Метаданные().Реквизиты.Найти("пЭтоГруппа")<>Неопределено Тогда 
		ЭтоГруппа = Ссылка.пЭтоГруппа;
	КонецЕсли;
	
	Для каждого КлючИЗначение Из пМетаданные.Реквизиты Цикл
		Имя = КлючИЗначение.Ключ;
		пРеквизит = КлючИЗначение.Значение;
		Если (ЭтоГруппа и не пРеквизит.ДляГруппы) Тогда
			Продолжить;
		КонецЕсли;
		ЗаписатьРеквизит(пМетаданные.ВидСправочника, Идентификатор, пРеквизит, Данные[Имя]);
	КонецЦикла;
	
	Если не ЭтоГруппа Тогда
		Для каждого ТЧКлючИЗначение Из пМетаданные.ТабличныеЧасти Цикл
			ИмяТЧ = ТЧКлючИЗначение.Ключ;
			ТЧ_ = ТЧКлючИЗначение.Значение;
			РеквизитКод = Справочники.нсиПредопределенныеРеквизиты.Код.УникальныйИдентификатор();
			
			ИдентификаторыСтрок = Новый Массив();
			Для каждого СтрокаТЧ Из Данные[ИмяТЧ] Цикл
				Если СтрокаТЧ.пСсылка=ПолучитьПустойИдентификатор() Тогда
					СтрокаТЧ.пСсылка = Новый УникальныйИдентификатор();
				КонецЕсли;
				
				Менеджер = РегистрыСведений.нсиХранилищеСтрока.СоздатьМенеджерЗаписи();
				Менеджер.ВидСправочника = ТЧ_.ВидСправочника;
				Менеджер.Элемент = СтрокаТЧ.пСсылка;
				Менеджер.Реквизит = РеквизитКод;
				Менеджер.Значение = СтрокаТЧ.Код;
				Менеджер.ВладелецСсылка = Ссылка;
				Менеджер.Записать();
				
				Для каждого КлючИЗначение Из ТЧ_.Реквизиты Цикл
					ЗаписатьРеквизит(ТЧ_.ВидСправочника, СтрокаТЧ.пСсылка, КлючИЗначение.Значение, СтрокаТЧ[КлючИЗначение.Ключ]);
				КонецЦикла;
				
				ИдентификаторыСтрок.Добавить(СтрокаТЧ.пСсылка);
			КонецЦикла;
			
			Запрос = Новый Запрос();
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОсновнаяТаблица.Элемент КАК пСсылка
			|ИЗ
			|	РегистрСведений.нсиХранилищеСтрока КАК ОсновнаяТаблица
			|ГДЕ
			|	ОсновнаяТаблица.ВидСправочника = &ВидСправочника
			|	И ОсновнаяТаблица.Реквизит = &РеквизитКод
			|	И ОсновнаяТаблица.ВладелецСсылка = &Владелец
			|	И НЕ ОсновнаяТаблица.Элемент В (&ИдентификаторыСтрок)";
			Запрос.УстановитьПараметр("ВидСправочника", ТЧ_.ВидСправочника);
			Запрос.УстановитьПараметр("РеквизитКод", РеквизитКод);
			Запрос.УстановитьПараметр("Владелец", Ссылка);
			Запрос.УстановитьПараметр("ИдентификаторыСтрок", ИдентификаторыСтрок);
			Выб = Запрос.Выполнить().Выбрать();
			Пока Выб.Следующий() Цикл
				Для каждого КлючИЗначение Из ТЧ_.Реквизиты Цикл
					УдалитьРеквизит(ТЧ_.ВидСправочника, Выб.пСсылка, КлючИЗначение.Ключ, КлючИЗначение.Значение);
				КонецЦикла;
				
				Менеджер = РегистрыСведений.нсиХранилищеСтрока.СоздатьМенеджерЗаписи();
				Менеджер.ВидСправочника = ТЧ_.ВидСправочника;
				Менеджер.Элемент = Выб.пСсылка;
				Менеджер.Реквизит = РеквизитКод;
				Менеджер.Удалить();
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
КонецПроцедуры

// Процедура удаляет объект универсального хранилища.
//
Процедура УдалитьОбъект(Ссылка) Экспорт
	
	Идентификатор = Ссылка.УникальныйИдентификатор();
	
	НачатьТранзакцию();
	Блокировка = Новый БлокировкаДанных();
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.нсиХранилищеСтрока");
	ЭлементБлокировки.УстановитьЗначение("ВидСправочника", Ссылка.Владелец);
	ЭлементБлокировки.УстановитьЗначение("Элемент", Идентификатор);
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.нсиХранилищеБулево");
	ЭлементБлокировки.УстановитьЗначение("ВидСправочника", Ссылка.Владелец);
	ЭлементБлокировки.УстановитьЗначение("Элемент", Идентификатор);
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.нсиХранилищеДата");
	ЭлементБлокировки.УстановитьЗначение("ВидСправочника", Ссылка.Владелец);
	ЭлементБлокировки.УстановитьЗначение("Элемент", Идентификатор);
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.нсиХранилищеСсылка");
	ЭлементБлокировки.УстановитьЗначение("ВидСправочника", Ссылка.Владелец);
	ЭлементБлокировки.УстановитьЗначение("Элемент", Идентификатор);
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.нсиХранилищеЧисло");
	ЭлементБлокировки.УстановитьЗначение("ВидСправочника", Ссылка.Владелец);
	ЭлементБлокировки.УстановитьЗначение("Элемент", Идентификатор);
	Блокировка.Заблокировать();
	
	НаборДанных = РегистрыСведений.нсиХранилищеСтрока.СоздатьНаборЗаписей();
	НаборДанных.Отбор.ВидСправочника.Установить(Ссылка.Владелец);
	НаборДанных.Отбор.Элемент.Установить(Идентификатор);
	НаборДанных.Записать();
	
	НаборДанных = РегистрыСведений.нсиХранилищеБулево.СоздатьНаборЗаписей();
	НаборДанных.Отбор.ВидСправочника.Установить(Ссылка.Владелец);
	НаборДанных.Отбор.Элемент.Установить(Идентификатор);
	НаборДанных.Записать();
	
	НаборДанных = РегистрыСведений.нсиХранилищеДата.СоздатьНаборЗаписей();
	НаборДанных.Отбор.ВидСправочника.Установить(Ссылка.Владелец);
	НаборДанных.Отбор.Элемент.Установить(Идентификатор);
	НаборДанных.Записать();
	
	НаборДанных = РегистрыСведений.нсиХранилищеСсылка.СоздатьНаборЗаписей();
	НаборДанных.Отбор.ВидСправочника.Установить(Ссылка.Владелец);
	НаборДанных.Отбор.Элемент.Установить(Идентификатор);
	НаборДанных.Записать();
	
	НаборДанных = РегистрыСведений.нсиХранилищеЧисло.СоздатьНаборЗаписей();
	НаборДанных.Отбор.ВидСправочника.Установить(Ссылка.Владелец);
	НаборДанных.Отбор.Элемент.Установить(Идентификатор);
	НаборДанных.Записать();
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	нсиХранилищеСтрока.Элемент,
		|	нсиХранилищеСтрока.ВидСправочника
		|ИЗ
		|	РегистрСведений.нсиХранилищеСтрока КАК нсиХранилищеСтрока
		|ГДЕ
		|	нсиХранилищеСтрока.ВладелецСсылка = &ВладелецСсылка"
	);
	Запрос.УстановитьПараметр("ВладелецСсылка",Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборДанных = РегистрыСведений.нсиХранилищеСтрока.СоздатьНаборЗаписей();
		НаборДанных.Отбор.ВидСправочника.Установить(Выборка.ВидСправочника);
		НаборДанных.Отбор.Элемент.Установить(Выборка.Элемент);
		НаборДанных.Записать();
		
		НаборДанных = РегистрыСведений.нсиХранилищеБулево.СоздатьНаборЗаписей();
		НаборДанных.Отбор.ВидСправочника.Установить(Выборка.ВидСправочника);
		НаборДанных.Отбор.Элемент.Установить(Выборка.Элемент);
		НаборДанных.Записать();
		
		НаборДанных = РегистрыСведений.нсиХранилищеДата.СоздатьНаборЗаписей();
		НаборДанных.Отбор.ВидСправочника.Установить(Выборка.ВидСправочника);
		НаборДанных.Отбор.Элемент.Установить(Выборка.Элемент);
		НаборДанных.Записать();
		
		НаборДанных = РегистрыСведений.нсиХранилищеСсылка.СоздатьНаборЗаписей();
		НаборДанных.Отбор.ВидСправочника.Установить(Выборка.ВидСправочника);
		НаборДанных.Отбор.Элемент.Установить(Выборка.Элемент);
		НаборДанных.Записать();
		
		НаборДанных = РегистрыСведений.нсиХранилищеЧисло.СоздатьНаборЗаписей();
		НаборДанных.Отбор.ВидСправочника.Установить(Выборка.ВидСправочника);
		НаборДанных.Отбор.Элемент.Установить(Выборка.Элемент);
		НаборДанных.Записать();
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
КонецПроцедуры

// Функция возвращает имя формы для вида справочника.
//
Функция ПолучитьИмяФормы(ВидСправочника) Экспорт
	
	Если ВидСправочника.ВидСправочника = Перечисления.нсиВидыСправочников.ФункциональныйСправочник Тогда 
		Возврат "Справочник.нсиУниверсальныйФункциональныйСправочник.Форма.";
	ИначеЕсли ВидСправочника.ВидСправочника = Перечисления.нсиВидыСправочников.Классификатор Тогда 
		Возврат "Справочник.нсиУниверсальныйКлассификатор.Форма.";
	Иначе
		ВызватьИсключение "Для вида справочника """+ВидСправочника.ВидСправочника+""" не определена форма списка!";
	КонецЕсли;
	
КонецФункции

// Функция определяет наличие данных для вида справочника.
//
Функция ЕстьДанные(ВидСправочника) Экспорт
	Если НЕ ЗначениеЗаполнено(ВидСправочника) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ВидСправочника.ВидСправочника = Перечисления.нсиВидыСправочников.ТабличнаяЧасть Тогда 
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ОсновнаяТаблица.Элемент
			|ИЗ
			|	РегистрСведений.нсиХранилищеСтрока КАК ОсновнаяТаблица
			|ГДЕ
			|	ОсновнаяТаблица.ВидСправочника = &ВидСправочника"
		);
	Иначе
		ИмяТаблицы = нсиУниверсальноеХранилищеПовтИсп.ПолучитьИмяСправочникаХранилища(ВидСправочника);
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ОсновнаяТаблица.Ссылка
			|ИЗ
			|	Справочник."+ИмяТаблицы+" КАК ОсновнаяТаблица
			|ГДЕ
			|	ОсновнаяТаблица.Владелец = &ВидСправочника"
		);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВидСправочника", ВидСправочника);
	Возврат не Запрос.Выполнить().Пустой();
КонецФункции

// Функция возвращает имя по наименованию.
//
Функция ПолучитьИмяПоНаименованию(Наименование) Экспорт
	ТекИмя = "";
	Длина = СтрДлина(Наименование);
	Для Номер = 1 По Длина Цикл
		Символ = Сред(Наименование, Номер, 1);
		Если не ((Символ>="0" и Символ<="9") или (Символ="_")
			или (Символ>="a" и Символ<="z") или (Символ>="A" и Символ<="Z")
			или (Символ>="а" и Символ<="я") или (Символ>="А" и Символ<="Я"))
			Тогда
			Символ = "_";
		КонецЕсли;
		ТекИмя = ТекИмя+Символ;
	КонецЦикла;
	Символ = Лев(ТекИмя, 1);
	Если Символ>="0" и Символ<="9" Тогда
		ТекИмя = "_"+ТекИмя;
	КонецЕсли;
	Возврат ТекИмя;
КонецФункции

// Обработчик события ПередЗаписью модуля объекта универсального справочника.
//
Процедура МодульОбъектаПередЗаписью(Объект,Отказ) Экспорт
	Если Объект.Идентификатор = ПолучитьПустойИдентификатор() Тогда 
		Если Объект.ЭтоНовый() Тогда 
			Если НЕ Объект.ПолучитьСсылкуНового().Пустая() Тогда 
				Объект.Идентификатор = Объект.ПолучитьСсылкуНового().УникальныйИдентификатор();
			Иначе
				Объект.Идентификатор = новый УникальныйИдентификатор;
				Объект.УстановитьСсылкуНового(Справочники[Объект.Метаданные().Имя].ПолучитьСсылку(Объект.Идентификатор));
			КонецЕсли;
		Иначе
			Объект.Идентификатор = Объект.Ссылка.УникальныйИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ОбменДанными.Загрузка Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ Объект.ДополнительныеСвойства.Свойство("пМетаданные") Тогда 
		Объект.ДополнительныеСвойства.Вставить("пМетаданные",нсиУниверсальноеХранилище.ПолучитьМетаданные(Объект.Владелец));
	КонецЕсли;
	
	Если Объект.ДополнительныеСвойства.Свойство("Данные") И НЕ Объект.ДополнительныеСвойства.Свойство("СозданиеИзБП") Тогда 
		//ПроверитьЗаполнение(Объект, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ЭтоНовый() Тогда 
		Если НЕ ЗначениеЗаполнено(Объект.Код) Тогда 
			Объект.УстановитьНовыйКод();
			Если СтрДлина(Объект.Код)>Объект.ДополнительныеСвойства.пМетаданные.ДлинаКода Тогда 
				Объект.Код = Прав(Объект.Код,Объект.ДополнительныеСвойства.пМетаданные.ДлинаКода);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.Владелец.Иерархический 
		И Объект.Владелец.ВидИерархии = Перечисления.нсиВидыИерархииСправочников.ИерархияГруппИЭлементов Тогда 
		Если ЗначениеЗаполнено(Объект.Родитель) И НЕ Объект.Родитель.пЭтоГруппа Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Родителем должна быть группа!",Объект,"Родитель",,Отказ
			);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПривилегированныйРежим() Тогда
		Если НЕ Объект.ЭтоНовый() Тогда 
			Если Объект.ПометкаУдаления И НЕ Объект.Ссылка.ПометкаУдаления 
				И НЕ Объект.ДополнительныеСвойства.пМетаданные.ПраваДоступа.ПометкаНаУдаление Тогда 
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						"Нет права на пометку на удаление!",,,,Отказ
					);
			КонецЕсли;
			
			Если Объект.Ссылка.ПометкаУдаления И НЕ Объект.ПометкаУдаления 
				И НЕ Объект.ДополнительныеСвойства.пМетаданные.ПраваДоступа.СнятиеПометкиНаУдаление Тогда 
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						"Нет права на снятие пометки на удаление!",,,,Отказ
					);
			КонецЕсли;
			
			Если НЕ Отказ И НЕ Объект.ДополнительныеСвойства.пМетаданные.ПраваДоступа.Редактирование Тогда 
				РедактированиеЗапрещено = Истина;
				Если Объект.Владелец.ИспользоватьНормализацию ИЛИ Объект.Владелец.ИспользоватьЗаявки Тогда 
					РегистрыСведений.нсиСтатусыОбработкиСправочников.ОпределитьДоступКФорме(
						Объект.Ссылка, 
						РедактированиеЗапрещено, 
						Объект.ЭтоМакет
					);
				КонецЕсли;
				Если РедактированиеЗапрещено Тогда 
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						"Нет права на изменение!",,,,Отказ
					);
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			Если НЕ Объект.ДополнительныеСвойства.пМетаданные.ПраваДоступа.Добавление Тогда 
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						"Нет прав на добавление!",,,,Отказ
					);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриЗаписи модуля объекта универсального справочника.
//
Процедура МодульОбъектаПриЗаписи(Объект) Экспорт
	Если Объект.ДополнительныеСвойства.Свойство("Данные") Тогда 
		нсиУниверсальноеХранилище.ЗаписатьОбъект(
			Объект.ДополнительныеСвойства.пМетаданные,
			Объект.Ссылка,
			Объект.ДополнительныеСвойства.Данные
		);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПостроитьТип(ДанныеТипа)
	СтТип = РазобратьТип1(ДанныеТипа.Тип1);
	СтТип.Вставить("Тип2", ДанныеТипа.Тип2);
	Если СтТип.Тип1="Хранилище" Тогда
		СтТип.Вставить("ДлинаПредставления", ДанныеТипа.ДлинаПредставления);
		СтТип.Вставить("БыстрыйВыбор", ДанныеТипа.БыстрыйВыбор);
		СтТип.Вставить("ПравоПросмотр", ДанныеТипа.ПравоПросмотр);
	КонецЕсли;
	Возврат СтТип;
КонецФункции

Функция ПолучитьМетаданныеРеквизитов(ВидСправочника, МенеджерВременныхТаблиц)
	Реквизиты_ = Новый Структура();
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыРеквизиты.Идентификатор,
	|	ВидыРеквизиты.Наименование,
	|	ВидыРеквизиты.ДляГруппы,
	|	ВидыРеквизиты.Тип1,
	|	ВидыРеквизиты.Тип2,
	|	ВидыРеквизиты.Тип2.ДлинаПредставления КАК ДлинаПредставления,
	|	ВидыРеквизиты.Тип2.БыстрыйВыбор КАК БыстрыйВыбор,
	|	ЕСТЬNULL(ПраваДоступа.Просмотр, ЛОЖЬ) КАК ПравоПросмотр,
	|	ВидыРеквизиты.Имя,
	|	ВидыРеквизиты.Подсказка,
	|	ВидыРеквизиты.ТребоватьЗаполнения,
	|	ВидыРеквизиты.Многострочный
	|ИЗ
	|	Справочник.нсиВидыСправочников.Реквизиты КАК ВидыРеквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПраваДоступа КАК ПраваДоступа
	|		ПО (ПраваДоступа.ВидСправочника = ВидыРеквизиты.Тип2)
	|ГДЕ
	|	ВидыРеквизиты.Ссылка = &ВидСправочника
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидыРеквизиты.НомерСтроки";
	Запрос.УстановитьПараметр("ВидСправочника", ВидСправочника);
	ВыбРеквизиты = Запрос.Выполнить().Выбрать();
	
	Пока ВыбРеквизиты.Следующий() Цикл
		ДанныеРеквизита = Новый Структура("Идентификатор,Наименование,ДляГруппы,Подсказка,ТребоватьЗаполнения,Многострочный");
		ЗаполнитьЗначенияСвойств(ДанныеРеквизита, ВыбРеквизиты);
		СтТип = ПостроитьТип(ВыбРеквизиты);
		Если СтТип.Тип1="Булево" Тогда
			Тип1С = Новый ОписаниеТипов("Булево");
		ИначеЕсли СтТип.Тип1="Число" Тогда
			Тип1С = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(СтТип.Длина, СтТип.Точность));
		ИначеЕсли СтТип.Тип1="Строка" Тогда
			Тип1С = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(СтТип.Длина));
		ИначеЕсли СтТип.Тип1="Дата" Тогда
			Тип1С = Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата));
		ИначеЕсли СтТип.Тип1="Время" Тогда
			Тип1С = Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Время));
		ИначеЕсли СтТип.Тип1="ДатаИВремя" Тогда
			Тип1С = Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
		ИначеЕсли СтТип.Тип1="Перечисление" Тогда
			Тип1С = Новый ОписаниеТипов("ПеречислениеСсылка."+СтТип.Тип2);
		ИначеЕсли СтТип.Тип1="Справочник" Тогда
			Тип1С = Новый ОписаниеТипов("СправочникСсылка."+СтТип.Тип2);
		ИначеЕсли СтТип.Тип1="Хранилище" Тогда
			Тип1С = Новый ОписаниеТипов("УникальныйИдентификатор");
		Иначе
			ВызватьИсключение "Получение метаданных для неизвестного типа.";
		КонецЕсли;
		ДанныеРеквизита.Вставить("Тип", СтТип);
		ДанныеРеквизита.Вставить("Тип1С", Тип1С);
		Реквизиты_.Вставить(ВыбРеквизиты.Имя, ДанныеРеквизита);
	КонецЦикла;
	Возврат Реквизиты_;
КонецФункции

Процедура ДобавитьПолеРеквизита(Имя, пРеквизит, Запрос, ТекстПоля, ТекстСвязи, Приемник)
	ИмяРегистра = Неопределено;
	ИмяРесурса = Неопределено;
	
	ПолучитьИменаХранения(пРеквизит.Тип, ИмяРегистра, ИмяРесурса);
	
	ТекстСвязи = ТекстСвязи+"
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений."+ИмяРегистра+" КАК Т"+Имя+"
	|	ПО Т"+Имя+".ВидСправочника = &ВидСправочника
	|		И Т"+Имя+".Элемент = "+?(Приемник = Неопределено,"ОсновнаяТаблица.Элемент","ОсновнаяТаблица.Идентификатор")+"
	|		И Т"+Имя+".Реквизит = &Р"+Имя;
	
	Оператор = ПолучитьОператорВыражения(пРеквизит);
	Если ПустаяСтрока(Оператор) Тогда
		ТекстПоля = ТекстПоля+"
		|Т"+Имя+"."+ИмяРесурса+" как "+Имя+",";
	Иначе
		ТекстПоля = ТекстПоля+"
		|ВЫРАЗИТЬ(Т"+Имя+"."+ИмяРесурса+" КАК "+Оператор+") КАК "+Имя+",";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Р"+Имя, пРеквизит.Идентификатор);
	
	Если Приемник<>Неопределено Тогда
		Приемник.Вставить(Имя);
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьРеквизит(Имя, пРеквизит, Данные, Отказ, ИмяТЧ, _ТЧ, ДанныеТЧ)
	Если ЗначениеЗаполнено(Данные[Имя]) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	Сообщение = Новый СообщениеПользователю();
	Если _ТЧ=Неопределено Тогда
		Сообщение.Поле = Имя;
		Сообщение.Текст = "Не заполнен реквизит """+пРеквизит.Наименование+""".";
	Иначе
		Сообщение.Поле = ИмяТЧ+"["+Формат(ДанныеТЧ.Индекс(Данные), "ЧН=; ЧГ=")+"]."+Имя;
		Сообщение.Текст = "Не заполнен реквизит """+пРеквизит.Наименование+""" в табличной части """+_ТЧ.Наименование+""".";
	КонецЕсли;
	Сообщение.Сообщить();
КонецПроцедуры

Процедура ПроверитьЗаполнение(Объект, Отказ) Экспорт 
	Если НЕ Объект.ДополнительныеСвойства.Свойство("Данные") Тогда 
		Возврат;
	КонецЕсли;
	
	Данные = Объект.ДополнительныеСвойства.Данные;
	
	Если НЕ Объект.ДополнительныеСвойства.Свойство("пМетаданные") Тогда 
		Объект.ДополнительныеСвойства.Вставить("пМетаданные",нсиУниверсальноеХранилище.ПолучитьМетаданные(Объект.Владелец));
	КонецЕсли;
	
	пМетаданные = Объект.ДополнительныеСвойства.пМетаданные;
	
	ЭтоГруппа = Ложь;
	Если Объект.Метаданные().Реквизиты.Найти("пЭтоГруппа")<>Неопределено Тогда 
		ЭтоГруппа = Объект.пЭтоГруппа;
	КонецЕсли;
	
	Для каждого КлючИЗначение Из пМетаданные.Реквизиты Цикл
		Имя = КлючИЗначение.Ключ;
		пРеквизит = КлючИЗначение.Значение;
		Если ЭтоГруппа и не пРеквизит.ДляГруппы Тогда
			Продолжить;
		КонецЕсли;
		Если пРеквизит.ТребоватьЗаполнения Тогда
			ПроверитьРеквизит(Имя, пРеквизит, Данные, Отказ, Неопределено, Неопределено, Неопределено);
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЭтоГруппа Тогда
		
		Для каждого ТЧКлючИЗначение Из пМетаданные.ТабличныеЧасти Цикл
			ИмяТЧ = ТЧКлючИЗначение.Ключ;
			ТЧ_ = ТЧКлючИЗначение.Значение;
			СписокПроверки = Новый СписокЗначений();
			Для каждого КлючИЗначение Из ТЧ_.Реквизиты Цикл
				Если КлючИЗначение.Значение.ТребоватьЗаполнения Тогда
					СписокПроверки.Добавить(КлючИЗначение.Значение, КлючИЗначение.Ключ);
				КонецЕсли;
			КонецЦикла;
			Если СписокПроверки.Количество()=0 Тогда
				Продолжить;
			КонецЕсли;
			ДанныеТЧ = Данные[ИмяТЧ];
			Для каждого СтрокаТЧ Из ДанныеТЧ Цикл
				Для каждого ЭлементСписка Из СписокПроверки Цикл
					ПроверитьРеквизит(ЭлементСписка.Представление, ЭлементСписка.Значение, СтрокаТЧ, Отказ, ИмяТЧ, ТЧ_, ДанныеТЧ);
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
