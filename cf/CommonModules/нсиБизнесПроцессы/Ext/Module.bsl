#Область ПрограммныйИнтерфейс

// Функция проверяет занят ли объект бизнес-процессом или захвачен в буфер.
// Параметры: 
//	Объект - ссылка на элемент справочника;
//	Сообщение - переменная, в которой возвращается сообщение о занятости объекта в случае, если он занят.
// Возвращает:
//	Истина - если объект занят обработкой;
//  В параметре Сообщение возвращается текст сообщения о занятости объекта.
//
Функция ОбъектОбрабатывается(Объект, Сообщение) Экспорт
	ОбъектОбрабатывается = Ложь;
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	нсиСтатусыОбработкиСправочников.Пользователь
		|ИЗ
		|	РегистрСведений.нсиСтатусыОбработкиСправочников КАК нсиСтатусыОбработкиСправочников
		|ГДЕ
		|	нсиСтатусыОбработкиСправочников.ОбработкаНачата
		|	И нсиСтатусыОбработкиСправочников.Объект = &Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	нсиИзменениеЭлементаСправочника.Ссылка
		|ИЗ
		|	БизнесПроцесс.нсиИзменениеЭлементаСправочника КАК нсиИзменениеЭлементаСправочника
		|ГДЕ
		|	нсиИзменениеЭлементаСправочника.Стартован
		|	И НЕ нсиИзменениеЭлементаСправочника.Завершен
		|	И НЕ нсиИзменениеЭлементаСправочника.ПометкаУдаления
		|	И (нсиИзменениеЭлементаСправочника.ПредметОригинал = &Объект
		|		ИЛИ нсиИзменениеЭлементаСправочника.Предмет = &Объект
		|	)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	нсиУдалениеЭлементаСправочника.Ссылка
		|ИЗ
		|	БизнесПроцесс.нсиУдалениеЭлементаСправочника КАК нсиУдалениеЭлементаСправочника
		|ГДЕ
		|	нсиУдалениеЭлементаСправочника.Стартован
		|	И НЕ нсиУдалениеЭлементаСправочника.Завершен
		|	И нсиУдалениеЭлементаСправочника.Предмет = &Объект
		|	И НЕ нсиУдалениеЭлементаСправочника.ПометкаУдаления
		|
		|"
	);
	
	Запрос.УстановитьПараметр("Объект",Объект);
	Результат = Запрос.ВыполнитьПакет();
	Если НЕ Результат[0].Пустой() Тогда 
		Выборка = Результат[0].Выбрать();
		Выборка.Следующий();
		Сообщение = "Позиция "+Объект.Код+", "+Строка(Объект)+" захвачена в буфер пользователем "+Строка(Выборка.Пользователь)+".";
		ОбъектОбрабатывается = Истина;
	ИначеЕсли НЕ Результат[1].Пустой() Тогда 
		Выборка = Результат[1].Выбрать();
		Выборка.Следующий();
		Сообщение = "Позиция "+Объект.Код+", "+Строка(Объект)+" участвует в незавершенном бизнес-процессе: "+Символы.ПС+Строка(Выборка.Ссылка)+".";
		ОбъектОбрабатывается = Истина;
	ИначеЕсли Объект.ЭтоМакет Тогда 
		Сообщение = "Позиция "+Объект.Код+", "+Строка(Объект)+" является макетом.";
		ОбъектОбрабатывается = Истина;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ОбъектОбрабатывается;
КонецФункции

// Процедура формирует и отправляет по электронной почте оповещение о создании новой задачи.
// Параметры:
//	Задача - объект задачи.
//
Процедура ОтправитьОповещениеПоЭлектроннойПочте(Задача) Экспорт
		
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыПисьма = Новый Структура;
	
	Если ТипЗнч(Задача.БизнесПроцесс)<>Тип("БизнесПроцессСсылка.Задание") Тогда 
		ПараметрыПисьма.Вставить("Тема", "1С:НСИ Справочник """ + Задача.Бизнеспроцесс.ИмяСправочника + """: поступление заявки на обработку");
	Иначе
		ПараметрыПисьма.Вставить("Тема", "1С:НСИ Задание на изменение вспомогательного справочника");
	КонецЕсли;
	
	ТелоПисьма =
	"<HTML xmlns:o = ""urn:schemas-microsoft-com:office:office""><HEAD>
	|<META content=""text/html; charset=utf-8"" http-equiv=Content-Type><LINK rel=stylesheet type=text/css href=""v8help://service_book/service_style""><BASE href=""v8config://94665124-b22a-4db5-ae89-b64479ae1268/mdobject/idf77eafdc-c93d-42c8-a191-be0156e80e0e/038b5c85-fb1c-4082-9c4c-e69f8928bf3a"">
	|<META name=GENERATOR content=""MSHTML 9.00.8112.16443""></HEAD>
	|<BODY>
   	|<P style=""MARGIN: 0cm 0cm 0pt"" class=MsoPlainText><FONT size=3><FONT face=Calibri>Уважаемый %ФИО%!<o:p></o:p></FONT></FONT></P>
	|<P style=""MARGIN: 0cm 0cm 0pt"" class=MsoPlainText><FONT face=Calibri><FONT size=3>Ваша заявка на %ИмяБП% </FONT><FONT size=4><FONT color=#ff9900><STRONG>%Операция%<o:p></o:p></STRONG></FONT></FONT></FONT></P>
	|<P style=""MARGIN: 0cm 0cm 0pt"" class=MsoPlainText><o:p><FONT size=3 face=Calibri>&nbsp;</FONT></o:p></P>
	|<P style=""MARGIN: 0cm 0cm 0pt"" class=MsoPlainText><FONT size=3><FONT face=Calibri>Заявка в ЕС НСИ №%номер заявки% от %дата и время заявки%<o:p></o:p></FONT></FONT></P>
	|<P style=""MARGIN: 0cm 0cm 0pt"" class=MsoPlainText><o:p><FONT size=3 face=Calibri>&nbsp;</FONT></o:p></P>
	|<P style=""MARGIN: 0cm 0cm 0pt"" class=MsoPlainText><FONT size=3><FONT face=Calibri>""%предмет%""<o:p></o:p></FONT></FONT></P>
 	|<P style=""MARGIN: 0cm 0cm 0pt"" class=MsoPlainText><o:p><FONT size=3 face=Calibri>&nbsp;</FONT></o:p></P>
	|<P style=""MARGIN: 0cm 0cm 0pt"" class=MsoPlainText><FONT size=3><FONT face=Calibri>История согласования:<o:p></o:p></FONT></FONT></P>
	|%история согласования%";
	
	ТекстИстории = Задача.Бизнеспроцесс.РезультатВыполнения;
	ИсторияСогласованияТекст = ОбработатьИсториюЗадачи(ТекстИстории);
	
	ТелоПисьма = СтрЗаменить(ТелоПисьма,"%ФИО%",Строка(Задача.Исполнитель));
	ТелоПисьма = СтрЗаменить(ТелоПисьма,"%предмет%",Задача.Бизнеспроцесс.Наименование);
	
	Если ТипЗнч(Задача.Бизнеспроцесс) = Тип("БизнесПроцессСсылка.Задание") Тогда 
		ТелоПисьма = СтрЗаменить(ТелоПисьма,"%ИмяБП%",Строка(ТипЗнч(Задача.Бизнеспроцесс)));
	Иначе
		ТелоПисьма = СтрЗаменить(ТелоПисьма,"%ИмяБП%",Строка(ТипЗнч(Задача.Бизнеспроцесс)) + " " + Задача.Бизнеспроцесс.ИмяСправочника);
	КонецЕсли;
	
	ТелоПисьма = СтрЗаменить(ТелоПисьма,"%Операция%",?(Задача.ТочкаМаршрута.НаименованиеЗадачи = "Уточнение информации","ВОЗВРАЩЕНА НА УТОЧНЕНИЕ","ПОСТУПИЛА В ОБРАБОТКУ"));
	ТелоПисьма = СтрЗаменить(ТелоПисьма,"%номер заявки%",Задача.Бизнеспроцесс.Номер);
	ТелоПисьма = СтрЗаменить(ТелоПисьма,"%дата и время заявки%",Задача.Бизнеспроцесс.Дата);
	
	ТелоПисьма = СтрЗаменить(ТелоПисьма,"%история согласования%",ИсторияСогласованияТекст);
	
	ПараметрыПисьма.Вставить("ТипТекста", "HTML");
	
    ПараметрыПисьма.Вставить("Тело", ТелоПисьма);
	
	ПочтовыйАдресПолучателя = ПолучитьАдресЭлектроннойПочты(Задача.Исполнитель);
	
//	ITRR Кутья АА если задача распределяется по роли
	Если НЕ ЗначениеЗаполнено(Задача.Исполнитель) 
		И ЗначениеЗаполнено(Задача.РольИсполнителя) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсполнителиЗадач.Исполнитель
		|ИЗ
		|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|ГДЕ
		|	ИсполнителиЗадач.РольИсполнителя = &РольИсполнителя
		|
		|СГРУППИРОВАТЬ ПО
		|	ИсполнителиЗадач.Исполнитель";
		
		Запрос.УстановитьПараметр("РольИсполнителя", Задача.РольИсполнителя);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ПочтовыйАдресПолучателя = ПочтовыйАдресПолучателя + ";"+ПолучитьАдресЭлектроннойПочты(ВыборкаДетальныеЗаписи.Исполнитель)
		КонецЦикла;
		
	КонецЕсли; 
//	ITRR Кутья АА	
	
	Если ПустаяСтрока(ПочтовыйАдресПолучателя) Тогда
//	ITRR Кутья АА добавлена локализация для английского интерфейса
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Бизнес-процессы и задачи. Уведомление о новой задаче'; en = 'Business processes and tasks. Notification of a new task'"), 
			УровеньЖурналаРегистрации.Информация,,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Уведомление не отправлено, так как не указан почтовый адрес у пользователя %1.'; en = 'The notification was not sent because the mailing address of the user is not specified %1.'"), Строка(Задача.Исполнитель)));
		Возврат;
	КонецЕсли;
	ПараметрыПисьма.Вставить("Кому", ПочтовыйАдресПолучателя);
	
	Попытка 
		РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(
			РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись(), ПараметрыПисьма);
		
//	ITRR Кутья АА добавлена локализация для английского интерфейса
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Бизнес-процессы и задачи. Уведомление о новой задаче'; en = 'Business processes and tasks. Notification of a new task'"), 
			УровеньЖурналаРегистрации.Информация,,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Уведомления успешно отправлены на адрес %1.'; en = 'Notifications are successfully sent to %1.'"), ПочтовыйАдресПолучателя));
	Исключение
//	ITRR Кутья АА добавлена локализация для английского интерфейса
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Бизнес-процессы и задачи. Уведомление о новой задаче'; en = 'Business processes and tasks. Notification of a new task'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			   НСтр("ru = 'Ошибка при отправке уведомления о новых задачах: %1'; en = 'Error sending notifications about new tasks: %1'"), 
			   ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Функция преобразует историю задачи из обычного текста в HTML.
// Параметры:
//  ТекстПисьма - строка, содержащая неформатированный текст.
// Возвращает:
//	Строку содержащий текст с HTML разметкой.
//
Функция ОбработатьИсториюЗадачи(ТекстПисьма)
	Если ТекстПисьма = "" Тогда
		Возврат "";
	Иначе
		ВозврТекст = "";
				
		Пока Истина Цикл
			ПозицияПереводаСтроки = Найти(ТекстПисьма, Символы.ПС);

			Если ПозицияПереводаСтроки > 0 Тогда
				ВозврТекст = ВозврТекст + "
				|<P style=""MARGIN: 0cm 0cm 0pt"" class=MsoPlainText><FONT size=3><FONT face=Calibri>" + Сред(ТекстПисьма, 1,ПозицияПереводаСтроки)  + "<o:p></o:p></FONT></FONT></P>";

				ТекстПисьма = Сред(ТекстПисьма, ПозицияПереводаСтроки + 1);
			Иначе
				ВозврТекст = ВозврТекст + "
				|<P style=""MARGIN: 0cm 0cm 0pt"" class=MsoPlainText><FONT size=3><FONT face=Calibri>" + ТекстПисьма + "<o:p></o:p></FONT></FONT></P>";
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Возврат ВозврТекст;
	КонецЕсли;
КонецФункции

// Процедура формирует и отправляет по электронной почте сообщение о завершении бизнес-процесса его автору.
// Параметры:
//	БП - ссылка на бизнес-процесс.
//
Процедура ОтправитьОповещениеОЗавершенииБП(БП) Экспорт
		
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыПисьма = Новый Структура;
	
	Если ТипЗнч(БП)<>Тип("БизнесПроцессСсылка.Задание") Тогда 
		ПараметрыПисьма.Вставить("Тема", "1С:НСИ Справочник """ + БП.ИмяСправочника + """: выполнение заявки "+Строка(БП));
	Иначе
		ПараметрыПисьма.Вставить("Тема", "1С:НСИ Выполнено задание на изменение вспомогательного справочника");
	КонецЕсли;
	
	ТелоПисьма =
	"<HTML xmlns:o = ""urn:schemas-microsoft-com:office:office""><HEAD>
	|<META content=""text/html; charset=utf-8"" http-equiv=Content-Type><LINK rel=stylesheet type=text/css href=""v8help://service_book/service_style""><BASE href=""v8config://94665124-b22a-4db5-ae89-b64479ae1268/mdobject/idf77eafdc-c93d-42c8-a191-be0156e80e0e/038b5c85-fb1c-4082-9c4c-e69f8928bf3a"">
	|<META name=GENERATOR content=""MSHTML 9.00.8112.16443""></HEAD>
	|<BODY>
   	|<P style=""MARGIN: 0cm 0cm 0pt"" class=MsoPlainText><FONT size=3><FONT face=Calibri>Уважаемый %ФИО%!<o:p></o:p></FONT></FONT></P>
	|<P style=""MARGIN: 0cm 0cm 0pt"" class=MsoPlainText><FONT face=Calibri><FONT size=3>Ваша заявка на %ИмяБП% </FONT><FONT size=4>%Операция%</FONT></FONT></P>
	|<P style=""MARGIN: 0cm 0cm 0pt"" class=MsoPlainText><o:p><FONT size=3 face=Calibri>&nbsp;</FONT></o:p></P>
	|<P style=""MARGIN: 0cm 0cm 0pt"" class=MsoPlainText><FONT size=3><FONT face=Calibri>Заявка в ЕС НСИ №%номер заявки% от %дата и время заявки%<o:p></o:p></FONT></FONT></P>
	|<P style=""MARGIN: 0cm 0cm 0pt"" class=MsoPlainText><o:p><FONT size=3 face=Calibri>&nbsp;</FONT></o:p></P>
	|<P style=""MARGIN: 0cm 0cm 0pt"" class=MsoPlainText><FONT size=3><FONT face=Calibri>""%предмет%""<o:p></o:p></FONT></FONT></P>
 	|<P style=""MARGIN: 0cm 0cm 0pt"" class=MsoPlainText><o:p><FONT size=3 face=Calibri>&nbsp;</FONT></o:p></P>
	|<P style=""MARGIN: 0cm 0cm 0pt"" class=MsoPlainText><FONT size=3><FONT face=Calibri>История согласования:<o:p></o:p></FONT></FONT></P>
	|%история согласования%";

	ТекстИстории = БП.РезультатВыполнения;
	ИсторияСогласованияТекст = ОбработатьИсториюЗадачи(ТекстИстории);
	
	ТелоПисьма = СтрЗаменить(ТелоПисьма,"%ФИО%",Строка(БП.Автор));
	ТелоПисьма = СтрЗаменить(ТелоПисьма,"%предмет%",БП.Наименование);
	Если ТипЗнч(БП) = Тип("БизнесПроцессСсылка.Задание") Тогда 
		ТелоПисьма = СтрЗаменить(ТелоПисьма,"%ИмяБП%",Строка(ТипЗнч(БП)));
	Иначе
		ТелоПисьма = СтрЗаменить(ТелоПисьма,"%ИмяБП%",Строка(ТипЗнч(БП)) + " " + БП.ИмяСправочника);
	КонецЕсли;
	
	ТелоПисьма = СтрЗаменить(ТелоПисьма,"%номер заявки%",БП.Номер);
	Если ТипЗнч(БП) = Тип("БизнесПроцессСсылка.Задание") Тогда 
		ТелоПисьма = СтрЗаменить(ТелоПисьма,"%Операция%",?(БП.ОтклонитьЗадание или БП.ОтозватьЗадание,"<FONT color=#ff0000><STRONG>ОТМЕНЕНА<o:p></o:p></STRONG></FONT>","<FONT color=#339966><STRONG>ВЫПОЛНЕНА<o:p></o:p></STRONG></FONT>"));
	ИначеЕсли ТипЗнч(БП) = Тип("БизнесПроцессСсылка.нсиПакетныйВводЭлементовСправочника") Тогда 
		Выполнено = БП.Предметы.Найти(Перечисления.нсиСтатусыОбработкиЗаявок.Обработано,"Статус")<>Неопределено
			ИЛИ БП.Предметы.Найти(Перечисления.нсиСтатусыОбработкиЗаявок.ПроверенаКлассификация,"Статус")<>Неопределено;
		
		ТелоПисьма = СтрЗаменить(ТелоПисьма,"%Операция%",?(НЕ Выполнено,"<FONT color=#ff0000><STRONG>ОТМЕНЕНА<o:p></o:p></STRONG></FONT>","<FONT color=#339966><STRONG>ВЫПОЛНЕНА<o:p></o:p></STRONG></FONT>"));
	Иначе
		ТелоПисьма = СтрЗаменить(ТелоПисьма,"%Операция%",?(БП.ОтклонитьЗаявку или БП.ОтозватьЗаявку,"<FONT color=#ff0000><STRONG>ОТМЕНЕНА<o:p></o:p></STRONG></FONT>","<FONT color=#339966><STRONG>ВЫПОЛНЕНА<o:p></o:p></STRONG></FONT>"));
	КонецЕсли;
	
	ТелоПисьма = СтрЗаменить(ТелоПисьма,"%дата и время заявки%",БП.Дата);
	ТелоПисьма = СтрЗаменить(ТелоПисьма,"%история согласования%",ИсторияСогласованияТекст );
	
	ПараметрыПисьма.Вставить("ТипТекста", "HTML");
    ПараметрыПисьма.Вставить("Тело", ТелоПисьма);
	
	ПочтовыйАдресПолучателя = ПолучитьАдресЭлектроннойПочты(БП.Автор);
	Если ПустаяСтрока(ПочтовыйАдресПолучателя) Тогда
//	ITRR Кутья АА добавлена локализация для английского интерфейса
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Бизнес-процессы и задачи.Уведомление о выполнении заявки'; en = 'Business processes and tasks. Notification of the implementation of the request'"), 
			УровеньЖурналаРегистрации.Информация,,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Уведомление не отправлено, так как не указан почтовый адрес у пользователя %1.'; en = 'The notification was not sent because the mailing address of the user is not specified %1.'"), Строка(БП.Автор)));
		Возврат;
	КонецЕсли;
	ПараметрыПисьма.Вставить("Кому", ПочтовыйАдресПолучателя);
	
	Попытка 
		РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(
			РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись(), ПараметрыПисьма);
		
//	ITRR Кутья АА добавлена локализация для английского интерфейса
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Бизнес-процессы и задачи. Уведомление о выполнении заявки'; en = 'Business processes and tasks. Notification of the implementation of the request'"), 
			УровеньЖурналаРегистрации.Информация,,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Уведомления успешно отправлены на адрес %1.'; en = 'Notifications are successfully sent to %1.'"), ПочтовыйАдресПолучателя));
	Исключение
//	ITRR Кутья АА добавлена локализация для английского интерфейса
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Бизнес-процессы и задачи. Уведомление о выполнении заявки'; en = 'Business processes and tasks. Notification of the implementation of the request'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			   НСтр("ru = 'Ошибка при отправке уведомления о выполнении заявки: %1'; en = 'Error sending notification of the implementation of the request'"), 
			   ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Функция возвращает массив ссылок на элементы справочника Пользователи, содержащий
// ссылки на пользователей, которые могут выполнить задачу.
// Параметры:
//	Задача - ссылка на задачу
// Возвращает:
//	Массив ссылок на элементы справочника Пользователи, содержащий
//	ссылки на пользователей, которые могут выполнить задачу. Пользователи выбираются из
//	регистра сведений ИсполнителиЗадач с отбором по роли и основному объекту адресации.
//
Функция ПолучитьДопустимыхИсполнителей(Задача) Экспорт
	Исполнители = ПолучитьВозможныхИсполнителей(Задача.СпособРаспределения,Задача.РольИсполнителя,Задача.ОсновнойОбъектАдресации);
	Если ЗначениеЗаполнено(Задача.Исполнитель) Тогда 
		Если Исполнители.Найти(Задача.Исполнитель)=Неопределено Тогда 
			Исполнители.Добавить(Задача.Исполнитель);
		КонецЕсли;
	КонецЕсли;
	Возврат Исполнители;
КонецФункции

// Функция возвращает ссылку на календарный график исполнителя.
// Параметры:
//	Исполнитель - ссылка на элемент справочника Пользователи
// Возвращает:
//	Cсылка на календарный график исполнителя.
//
Функция ПолучитьКалендарныйГрафик(Исполнитель) Экспорт
	Запрос = Новый Запрос (
		"ВЫБРАТЬ
		|	Календари.Ссылка
		|ИЗ
		|	Справочник.Календари КАК Календари
		|ГДЕ
		|	НЕ Календари.ПометкаУдаления
		|	И Календари.ТипГрафика = ЗНАЧЕНИЕ(Перечисление.нсиТипыРабочихГрафиков.РабочийГрафикПользователя)
		|	И Календари.ВладелецКалендаря = &Исполнитель
		|"
	);
	Запрос.УстановитьПараметр("Исполнитель",Исполнитель);
	Выборка = Запрос.Выполнить().Выбрать();
	График = Справочники.Календари.ОсновнойКалендарь;
	Если Выборка.Следующий() Тогда 
		График = Выборка.Ссылка;
	КонецЕсли;
	Возврат График;
КонецФункции

// Функция возвращает таблицу временных интервалов, которые соответствуют рабочему времени 
// по данным календарного графика.
// Параметры:
//	График - ссылка на элемент справочника Календари;
//	ДатаНачала - дата, начиная с которой отбираются интервалы;
//	ДатаОкончания - дата, которой заканчивается выборка интервалов;
//	КоличествоИнтервалов - выбираемое количество интервалов.
// Возвращает:
//	Таблица значений с колонками: 
//		ДатаГрафика - дата, на которую приходится интервал.
//		ВидДня - ссылка на перечисление ВидыДнейПроизводственногоКалендаря.
//		ВремяНачала - время начала интервала.
//		ВремяОкончания - время окончания интервала.
//
Функция ПолучитьТаблицуИнтервалов(График,ДатаНачала,ДатаОкончания,КоличествоИнтервалов) Экспорт
	Запрос = Новый Запрос(
		"
		|ВЫБРАТЬ
		|	КалендарныеГрафики.ДатаГрафика,
		|	МАКСИМУМ(ДатаИзмененияРасписания) КАК ДатаИзмененияРасписания
		|ПОМЕСТИТЬ ВТ_ДатыПериодов
		|ИЗ
		|	РегистрСведений.КалендарныеГрафики КалендарныеГрафики
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Календари.ПериодыДействияГрафика ПДГ
		|	ПО КалендарныеГрафики.ДатаГрафика>=ДатаИзмененияРасписания И ПДГ.Ссылка = &График
		|ГДЕ
		|	КалендарныеГрафики.Календарь = &График
		|	И КалендарныеГрафики.ДатаГрафика >= &ДатаНач
		|	И КалендарныеГрафики.ДатаГрафика <= &ДатаКон
		|СГРУППИРОВАТЬ ПО КалендарныеГрафики.ДатаГрафика
		|ИНДЕКСИРОВАТЬ ПО КалендарныеГрафики.ДатаГрафика
		|;
		|ВЫБРАТЬ
		|	КалендарныеГрафики.ДатаГрафика,
		|	МАКСИМУМ(ПДГ.КлючСтроки) КАК КлючСтроки
		|ПОМЕСТИТЬ ВТ_КлючиПериодов
		|ИЗ
		|	РегистрСведений.КалендарныеГрафики КалендарныеГрафики
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДатыПериодов
		|		ПО ВТ_ДатыПериодов.ДатаГрафика = КалендарныеГрафики.ДатаГрафика
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Календари.ПериодыДействияГрафика ПДГ
		|		ПО ПДГ.ДатаИзмененияРасписания=ВТ_ДатыПериодов.ДатаИзмененияРасписания И ПДГ.Ссылка = &График
		|ГДЕ
		|	КалендарныеГрафики.Календарь = &График
		|	И КалендарныеГрафики.ДатаГрафика >= &ДатаНач
		|	И КалендарныеГрафики.ДатаГрафика <= &ДатаКон
		|СГРУППИРОВАТЬ ПО КалендарныеГрафики.ДатаГрафика
		|ИНДЕКСИРОВАТЬ ПО КалендарныеГрафики.ДатаГрафика
		|;
		|
		|ВЫБРАТЬ //КоличествоИнтервалов
		|	КалендарныеГрафики.ДатаГрафика,
		|	ДанныеПроизводственногоКалендаря.ВидДня,
		|	КалендариПериодыГрафика.ВремяНачала,
		|	КалендариПериодыГрафика.ВремяОкончания
		|ИЗ
		|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КлючиПериодов
		|		ПО ВТ_КлючиПериодов.ДатаГрафика = КалендарныеГрафики.ДатаГрафика
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|		ПО КалендарныеГрафики.ДатаГрафика = ДанныеПроизводственногоКалендаря.Дата
		|			И КалендарныеГрафики.Календарь.ПроизводственныйКалендарь = ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Календари.ПериодыГрафика КАК КалендариПериодыГрафика
		|		ПО (КалендариПериодыГрафика.Ссылка = &График) И КалендариПериодыГрафика.КлючСтроки = ВТ_КлючиПериодов.КлючСтроки
		|			И (КалендариПериодыГрафика.ДеньНедели.Порядок + 1 = ДЕНЬНЕДЕЛИ(КалендарныеГрафики.ДатаГрафика))
		|ГДЕ
		|	КалендарныеГрафики.ДеньВключенВГрафик
		|	И КалендарныеГрафики.Календарь = &График
		|	И КалендарныеГрафики.ДатаГрафика >= &ДатаНач
		|	И КалендарныеГрафики.ДатаГрафика <= &ДатаКон
		|
		|УПОРЯДОЧИТЬ ПО
		|	КалендарныеГрафики.ДатаГрафика,
		|	КалендариПериодыГрафика.ВремяНачала"
	);
	Запрос.УстановитьПараметр("График",График);
	Запрос.УстановитьПараметр("ДатаНач",НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаКон",КонецДня(ДатаОкончания)+1);
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"//КоличествоИнтервалов","ПЕРВЫЕ "+Формат(КоличествоИнтервалов,"ЧГ=0"));
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

// Функция определяет дату окончания некоторого процесса путём деления его общей длительности
// на интервалы, соответствующие рабочему времени по календарному графику исполнителя:
// Параметры:
//	ДатаНачала - дата и время начала процесса;
//	Длительность - общая длительность процесса в минутах;
//	Исполнитель - ссылка на элемент справочника Пользователи.
// Возвращает:
//	Дату окончания процесса с учётом того, что работа будет выполняться только в рабочее время
//	по календарному графику исполнителя.
//
Функция ОпределитьДатуОкончанияПоКалендарномуГрафику(ДатаНачала,Длительность,Исполнитель) Экспорт
	График = ПолучитьКалендарныйГрафик(Исполнитель);
	
	ТаблицаИнтервалов = ПолучитьТаблицуИнтервалов(График,ДатаНачала,Дата(2050,1,1),Окр(Длительность/60)+10);
	
	ОстатокВремени = Длительность;
	
	ЙЙ = 0;
	Результат = ДатаНачала;
	Пока ОстатокВремени > 0 И ЙЙ<ТаблицаИнтервалов.Количество() Цикл 
		ДатаНачалаИнтервала = ТаблицаИнтервалов[ЙЙ].ДатаГрафика+(ТаблицаИнтервалов[ЙЙ].ВремяНачала - Дата(1,1,1));
		ДатаКонцаИнтервала = ТаблицаИнтервалов[ЙЙ].ДатаГрафика+(ТаблицаИнтервалов[ЙЙ].ВремяОкончания - Дата(1,1,1));
		
		Если ДатаНачала<=ДатаКонцаИнтервала Тогда 
			Если ДатаНачала>=ДатаНачалаИнтервала И ДатаНачала<=ДатаКонцаИнтервала Тогда 
				ДатаНачалаИнтервала = ДатаНачала;
			КонецЕсли;
			
			Если ДатаНачалаИнтервала>=ДатаНачала Тогда 
				ДлинаИнтервала = (ДатаКонцаИнтервала - ДатаНачалаИнтервала)/60;
				Если ДлинаИнтервала>ОстатокВремени Тогда 
					Результат = ДатаНачалаИнтервала+ОстатокВремени*60;
					ОстатокВремени = 0;
				Иначе
					ОстатокВремени = ОстатокВремени - ДлинаИнтервала;
					Результат = ДатаКонцаИнтервала+ОстатокВремени*60; // если вдруг таблица интервалов неожиданно кончится
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ЙЙ=ЙЙ+1;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Функция определяет длительность рабочего времени в минутах между началом и окончанием процесса
// с учётом календарного графика исполнителя.
// Параметры:
//	ДатаНачала - дата начала процесса;
//	ДатаОкончания - дата окончания процесса;
//	Исполнитель - ссылка на справочник Пользователи.
// Возвращает:
//	Число - длительность рабочего времени в минутах между началом и окончанием процесса
// с учётом календарного графика исполнителя.
//
Функция ОпределитьДлительностьПоГрафику(ДатаНачала,ДатаОкончания,Исполнитель) Экспорт
	График = ПолучитьКалендарныйГрафик(Исполнитель);
	ТаблицаИнтервалов = ПолучитьТаблицуИнтервалов(График,ДатаНачала,ДатаОкончания,1000000);
	
	ЙЙ = 0;
	ТекДата = ДатаНачала;
	Длительность = 0;
	Пока ТекДата<ДатаОкончания И ЙЙ<ТаблицаИнтервалов.Количество() Цикл 
		ДатаНачалаИнтервала = ТаблицаИнтервалов[ЙЙ].ДатаГрафика+(ТаблицаИнтервалов[ЙЙ].ВремяНачала - Дата(1,1,1));
		ДатаКонцаИнтервала = ТаблицаИнтервалов[ЙЙ].ДатаГрафика+(ТаблицаИнтервалов[ЙЙ].ВремяОкончания - Дата(1,1,1));
		
		Если ТекДата<=ДатаКонцаИнтервала Тогда 
			Если ТекДата<ДатаНачалаИнтервала Тогда 
				ТекДата = ДатаНачалаИнтервала;
			КонецЕсли;
			
			Если ДатаОкончания <= ДатаКонцаИнтервала И ДатаОкончания >= ТекДата Тогда 
				Длительность = Длительность + (ДатаОкончания - ТекДата)/60;
				ТекДата = ДатаОкончания;
			ИначеЕсли ДатаОкончания < ТекДата Тогда 
			ИначеЕсли ДатаОкончания>ДатаКонцаИнтервала Тогда 
				Длительность = Длительность + (ДатаКонцаИнтервала - ТекДата)/60;
				ТекДата = ДатаКонцаИнтервала+1;
			КонецЕсли;
		КонецЕсли;
		
		ЙЙ = ЙЙ+1;
	КонецЦикла;
	
	Возврат Длительность;
	
КонецФункции


// Процедура структуру параметров, связанных с этапом бизнес-процесса.
// Параметры:
//	БПОбъект - объект бизнес-процесса;
//	Результат - структура параметров этапа
// Возвращает:
//	Параметры этапа в структуре Результат:
//		НомерЭтапа - число, номер этапа;
//		РольИсполнителя - ссылка на элемент справочника РолиИсполнителей;
//		Исполнитель - ссылка на справочник Пользователи;
//		ОсновнойОбъектАдресации - ссылка на основной объект адресации (узел обмена);
//		ВремяИсполнения	- число, время исполнения в минутах;
//		ВремяОповещения - число, время оповещения в минутах.
//		МножительВремениОбработки - число, на которое умножается время обработки (<>1 для пакетного ввода).
//
Процедура ЗаполнитьПараметрыЭтапа(БПОбъект,Результат,МножительВремениОбработки = 1) Экспорт
	СтрокиЭтапов = БПОбъект.ПрохождениеЭтапов.НайтиСтроки(новый Структура("Шаг,Пройден",Результат.Шаг,Ложь));
	Если СтрокиЭтапов.Количество()>0 Тогда 
		Результат.НомерЭтапа = СтрокиЭтапов[0].НомерЭтапа;
		Результат.РольИсполнителя = СтрокиЭтапов[0].РольИсполнителя;
		Результат.Исполнитель = СтрокиЭтапов[0].Исполнитель;
		Результат.СпособРаспределения = Перечисления.нсиСпособыРаспределенияЗадач.ПустаяСсылка();
		Результат.ОсновнойОбъектАдресации = Справочники.нсиГруппыПользователейБП.ПустаяСсылка();
		
		Если НЕ ЗначениеЗаполнено(Результат.Исполнитель) Тогда 
			Результат.СпособРаспределения = СтрокиЭтапов[0].СпособРаспределения;
			Если СтрокиЭтапов[0].СпособРаспределения = Перечисления.нсиСпособыРаспределенияЗадач.ПоРолиИГруппеПользователейБП
				ИЛИ СтрокиЭтапов[0].СпособРаспределения = Перечисления.нсиСпособыРаспределенияЗадач.ПоГруппеПользователейБП Тогда 
				
				Результат.ОсновнойОбъектАдресации = БПОбъект.ГруппаПользователейБП;
			КонецЕсли;
			
			Если НЕ нсиБизнесПроцессы.ЕстьИсполнители(
						Результат.СпособРаспределения,
						Результат.РольИсполнителя,
						Результат.ОсновнойОбъектАдресации) Тогда 
					
				Результат.СпособРаспределения = Перечисления.нсиСпособыРаспределенияЗадач.ПоРоли;
				Результат.РольИсполнителя = Справочники.РолиИсполнителей.ОтветственныйЗаКонтрольИсполнения;
				Результат.ОсновнойОбъектАдресации = Неопределено;
			КонецЕсли;
			Результат.ВремяИсполнения = СтрокиЭтапов[0].ВремяОжидания;
			Результат.ВремяОповещения = Результат.ВремяИсполнения - СтрокиЭтапов[0].ОповещатьПриОжиданииЗа;
			
			ЕдинственныйИсполнитель = ОпределитьЕдинственногоИсполнителя(Результат.РольИсполнителя);
			Если ЗначениеЗаполнено(ЕдинственныйИсполнитель) Тогда
				Результат.Исполнитель = ЕдинственныйИсполнитель;
			КонецЕсли;
			
		Иначе
			Результат.РольИсполнителя = Справочники.РолиИсполнителей.ПустаяСсылка();
			Результат.ОсновнойОбъектАдресации = Неопределено;
			Результат.ВремяИсполнения = СтрокиЭтапов[0].ВремяОжидания + СтрокиЭтапов[0].ВремяОбработки * МножительВремениОбработки;
			Результат.ВремяОповещения = Результат.ВремяИсполнения - СтрокиЭтапов[0].ОповещатьПриОбработкеЗа;
		КонецЕсли;
		
	Иначе
		Результат.НомерЭтапа = 0;
		Результат.СпособРаспределения = Перечисления.нсиСпособыРаспределенияЗадач.ПоРоли;
		Результат.РольИсполнителя = Справочники.РолиИсполнителей.ОтветственныйЗаКонтрольИсполнения;
		Результат.ОсновнойОбъектАдресации = Справочники.нсиГруппыПользователейБП.ПустаяСсылка();
		Результат.Исполнитель = Справочники.Пользователи.ПустаяСсылка();
		Результат.ВремяИсполнения = 0;
		Результат.ВремяОповещения = 0;
		Результат.ИспользоватьОсновнойОбъектАдресации = Ложь;
	КонецЕсли;
КонецПроцедуры

// Функция возвращает дату начала рабочего дня по основному календарному графику 
// (время начала первого интервала).
// Параметры:
//	Дата - дата, за которую выбираются интервалы.
// Возвращает:
//	Дату и время начала первого интервала рабочего времени на дату.
//
Функция ПолучитьДатуНачалаРабочегоДня(Дата) Экспорт
	ТаблицаИнтервалов = нсиБизнесПроцессы.ПолучитьТаблицуИнтервалов(
		Справочники.Календари.ОсновнойКалендарь,
		НачалоДня(Дата),
		КонецДня(Дата),
		1
	);
	Если ТаблицаИнтервалов.Количество()>0 Тогда 
		Возврат НачалоДня(Дата)+Час(ТаблицаИнтервалов[0].ВремяНачала)*3600+Минута(ТаблицаИнтервалов[0].ВремяНачала)*60+Секунда(ТаблицаИнтервалов[0].ВремяНачала);
	Иначе
		Возврат НачалоДня(Дата);
	КонецЕсли;
КонецФункции

// Функция возвращает строковое представление длительности интервала между ДатаКон и ДатаНач.
// Параметры:
//	ДатаКон - дата и время конца интервала;
//	ДатаНач - дата и время начала интервала.
// Возвращает:
//	Строку, содержащую значение
//	в формате [Количество суток], [Количество часов]:[Количество минут]:[Количество секунд].
//
Функция РазностьДатСтрокой(ДатаКон,ДатаНач) Экспорт
	Секунд = ДатаКон - ДатаНач;
	
	Суток = Цел(Секунд/(24*3600));
	
	Секунд = Секунд - Суток*24*3600;
	
	Часов = Цел(Секунд/3600);
	
	Секунд = Секунд - Часов*3600;
	
	Минут = Цел(Секунд/60);
	
	Секунд = Секунд - Минут*60;
	
	Возврат 
		?(Суток<>0,Строка(Суток)+", ","")+
		Формат(Часов,"ЧЦ=2; ЧН=00; ЧВН=")+":"+
		Формат(Минут,"ЧЦ=2; ЧН=00; ЧВН=")+":"+
		Формат(Секунд,"ЧЦ=2; ЧН=00; ЧВН=");
	
КонецФункции

// Функция возвращает массив пользователей, у которых есть одна из ролей 
// нсиМетодолог, нсиЭксперт, нсиСтаршийЭксперт.
//
Функция ПолучитьВозможныхИсполнителейЗадач() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	МассивПользователей = новый Массив;
	ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	Для Каждого Пользователь Из ПользователиИБ Цикл 
		Если Пользователь.Роли.Содержит(Метаданные.Роли.нсиМетодолог)
			ИЛИ Пользователь.Роли.Содержит(Метаданные.Роли.нсиЭксперт)
			ИЛИ Пользователь.Роли.Содержит(Метаданные.Роли.нсиСтаршийЭксперт)
			ИЛИ Пользователь.Роли.Содержит(Метаданные.Роли.ПолныеПрава)
			 Тогда 
			МассивПользователей.Добавить(Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ",Пользователь.УникальныйИдентификатор));
		КонецЕсли;
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	Возврат	МассивПользователей;
КонецФункции

// Функция формирует новый уникальный номер.
// 	Параметры:
// 		ИмяНумератора - строка, содержит имя нумератора, для которого формируется номер
// 	Возвращает:
//		Число - новый уникальный номер.
//
Функция ПолучитьНовыйНомер(ИмяНумератора) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.нсиНумераторы");
	ЭлементБлокировки.УстановитьЗначение("Имя",ИмяНумератора);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	МЗ = РегистрыСведений.нсиНумераторы.СоздатьМенеджерЗаписи();
	МЗ.Имя = ИмяНумератора;
	МЗ.Прочитать();
	Если МЗ.Выбран() Тогда 
		МЗ.Счетчик = МЗ.Счетчик + 1;
	Иначе
		МЗ.Имя = ИмяНумератора;
		МЗ.Счетчик = 1;
	КонецЕсли;
	МЗ.Записать(Истина);
	ЗафиксироватьТранзакцию();
	УстановитьПривилегированныйРежим(Ложь);
	Возврат МЗ.Счетчик;
КонецФункции

// Функция проверяет выполнение условия.
// 	Параметры:
// 		Отбор - передаваемый отбор.
//		БП    - ссылка на бизнес-процесс.
// 	Возвращает:
//		Истина - проверка выполнена.
//		Ложь   - проверка не выполнена.
//
Функция УсловиеВыполняется(Отбор,БП) Экспорт
	Если НЕ ЗначениеЗаполнено(Отбор) Тогда 
		Возврат Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	
	ТипПредмета = БП.ИмяСправочника;
	ИмяБП = БП.Метаданные().Имя;
	
	Если НЕ ЗначениеЗаполнено(ТипПредмета) Тогда 
		ТекстЗапроса = 
			"ВЫБРАТЬ 
			|	Ссылка КАК БизнесПроцесс 
			|ИЗ 
			|	БизнесПроцесс."+ИмяБП+"
			|ГДЕ Ссылка = &БП";
	Иначе
		Если ТипЗнч(ТипПредмета) = Тип("СправочникСсылка.нсиВидыСправочников") Тогда 
			пМетаданные = нсиУниверсальноеХранилище.ПолучитьМетаданные(ТипПредмета);
			
			ДопСвязи = 
				"ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс."+ИмяБП+" БП 
				|	ПО БП.Предмет = ОсновнаяТаблица.Ссылка";
			
			ТекстЗапроса = нсиУниверсальноеХранилищеФормыСервер.ПолучитьТекстЗапроса(
				пМетаданные,
				"БП.Ссылка КАК БизнесПроцесс",
				ДопСвязи,
				"И БП.Ссылка = &БП"
			);
			
		Иначе
			ТекстЗапроса = 
				"ВЫБРАТЬ   
				|	БП.Ссылка КАК БизнесПроцесс,
				|	ВЫРАЗИТЬ(БП.Предмет КАК Справочник."+ТипПредмета+") КАК Предмет
				|ИЗ 
				|	БизнесПроцесс."+ИмяБП+" БП
				|ГДЕ БП.Ссылка = &БП";
		КонецЕсли;
	КонецЕсли;
		
	// новый источник данных
	ИсточникиДанных 	= СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИсточникиДанных.Имя 				= "ИсточникиДанных1";
	ИсточникиДанных.ТипИсточникаДанных 	= "Local";
	
	// новый запрос по источнику
	НаборДанныхЗапрос 	= СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанныхЗапрос.ИсточникДанных 	= "ИсточникиДанных1";
	НаборДанныхЗапрос.Имя 				= "Запрос";
	НаборДанныхЗапрос.Запрос 			= ТекстЗапроса;
	НаборДанныхЗапрос.АвтоЗаполнениеДоступныхПолей = Истина;
	
    ПолеСсылка = НаборДанныхЗапрос.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
    ПолеСсылка.Заголовок = "БизнесПроцесс";
    ПолеСсылка.ПутьКДанным = "БизнесПроцесс";
    ПолеСсылка.Поле = "БизнесПроцесс";
	
	КомпоновщикНастроек = новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
    НастройкиКомпоновкиДанных = КомпоновщикНастроек.Настройки;
	
	
    ГруппировкаСсылка = НастройкиКомпоновкиДанных.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
    ПолеГруппировки = ГруппировкаСсылка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));    
    ПолеГруппировки.Использование = Истина;
    ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("БизнесПроцесс");
    АвтоПоле = ГруппировкаСсылка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
    АвтоПоле.Использование = Истина;
	
	НастройкиКомпоновкиДанных.ПараметрыДанных.УстановитьЗначениеПараметра("БП",БП);
	Если ТипЗнч(ТипПредмета) = Тип("СправочникСсылка.нсиВидыСправочников") Тогда 
		пМетаданные = нсиУниверсальноеХранилище.ПолучитьМетаданные(ТипПредмета);
		НастройкиКомпоновкиДанных.ПараметрыДанных.УстановитьЗначениеПараметра("ВидСправочника",ТипПредмета);
		Для каждого КлючИЗначение Из пМетаданные.Реквизиты Цикл
			Имя = КлючИЗначение.Ключ;
			пРеквизит = КлючИЗначение.Значение;
			
			пРеквизит = КлючИЗначение.Значение;
			НастройкиКомпоновкиДанных.ПараметрыДанных.УстановитьЗначениеПараметра("Р"+Имя, пРеквизит.Идентификатор);
		КонецЦикла;
		
	КонецЕсли;
	
	нсиСохранениеНастроекСписков.ДесериализоватьОтбор(Отбор, НастройкиКомпоновкиДанных.Отбор);
	
	КомпоновщикМакета   		= Новый КомпоновщикМакетаКомпоновкиДанных;
	ПроцессорКомпоновкиДанных 	= Новый ПроцессорКомпоновкиДанных;
	ПроцессорВывода             = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТаблицаРезультата   		= Новый ТаблицаЗначений;    
	
	МакетКомпоновкиДанных         = КомпоновщикМакета.Выполнить(
			СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных,,,
			Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);     
	ПроцессорВывода.УстановитьОбъект(ТаблицаРезультата);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		
	Возврат ТаблицаРезультата.Количество()>0;
	
КонецФункции

// Функция возвращает настройки бизнес-процесса.
// 	Параметры:
// 		ИмяСправочника - имя справочника.
//		ИмяБП    - имя бизнес-процесса.
//		Предмет  - ссылка на предмет.
//		Автор    - ссылка на пользователя, создающего бизнес-процесс.
// 	Возвращает:
//		Массив настроек бизнес-процесса.
//
Функция ПолучитьНастройкиБП(ИмяСправочника,ИмяБП,Предмет,Автор) Экспорт
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	нсиНастройкиБПДляСправочников.НастройкаБП,
		|	нсиНастройкиБПДляСправочников.ОтборПредметов
		|ИЗ
		|	РегистрСведений.нсиНастройкиБПДляСправочников КАК нсиНастройкиБПДляСправочников
		|ГДЕ
		|	нсиНастройкиБПДляСправочников.Использовать
		|	И нсиНастройкиБПДляСправочников.НастройкаБП.ИмяБП = &ИмяБП
		|	И нсиНастройкиБПДляСправочников.ИмяСправочника = &ИмяСправочника
		|	И (
		|		нсиНастройкиБПДляСправочников.Заявитель = &Заявитель
		|		ИЛИ нсиНастройкиБПДляСправочников.Заявитель В (
		|			НЕОПРЕДЕЛЕНО,
		|			ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка),
		|			ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ПустаяСсылка),
		|			ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ВсеПользователи)
		|		)
		|		ИЛИ нсиНастройкиБПДляСправочников.Заявитель В (
		|			ВЫБРАТЬ Ссылка
		|			ИЗ Справочник.ГруппыПользователей.Состав
		|			ГДЕ Пользователь = &Заявитель
		|				И НЕ Ссылка.ПометкаУдаления
		|		)
		|	)
		|"
	);
	Запрос.УстановитьПараметр("ИмяСправочника",ИмяСправочника);
	Запрос.УстановитьПараметр("ИмяБП",ИмяБП);
	Запрос.УстановитьПараметр("Заявитель",Автор);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат = новый Массив;
	Пока Выборка.Следующий() Цикл
		Если Выборка.ОтборПредметов.Пустая() 
			ИЛИ Предмет = Неопределено
			ИЛИ ВыполняетсяУсловиеДляПредмета(Предмет,Выборка.ОтборПредметов) Тогда 
			
			Результат.Добавить(Выборка.НастройкаБП);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Функция проверяет выполнение условия для предмета.
// 	Параметры:
// 		Предмет - ссылка на предмет.
//		УсловиеВыборки    - передаваемый отбор.
// 	Возвращает:
//		Истина - проверка выполнена.
//		Ложь   - проверка не выполнена.
//
Функция ВыполняетсяУсловиеДляПредмета(Предмет,УсловиеВыборки) Экспорт
	нсиСравнениеДанных = нсиЗащитаКонфигурацииСервер.ПолучитьОбработку_нсиСравнениеДанных();
	Если нсиСравнениеДанных = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;	
	
	НастройкаКомпоновщика 		= УсловиеВыборки.НастройкаКомпоновщика.Получить();
	ПараметрыНеточногоПоиска 	= УсловиеВыборки.ПараметрыНеточногоПоиска.Получить();
	ПараметрыНеточногоПоиска.Очистить();
	
	нсиРаботаСФормами.ОтборВСпискеПоЗначению(
		НастройкаКомпоновщика.Отбор.Элементы, "Ссылка", Предмет, 
		ВидСравненияКомпоновкиДанных.Равно, Истина
	);
	
	Если ТипЗнч(Предмет) = Тип("СправочникСсылка.нсиУниверсальныйФункциональныйСправочник")
		ИЛИ ТипЗнч(Предмет) = Тип("СправочникСсылка.нсиУниверсальныйКлассификатор") Тогда 
		МассивСсылок = нсиСравнениеДанных.НайтиДанные(
			Предмет.Владелец, 
			НастройкаКомпоновщика, 
			ПараметрыНеточногоПоиска
		);
	Иначе
		МассивСсылок = нсиСравнениеДанных.НайтиДанные(
			Предмет.Метаданные().Имя, 
			НастройкаКомпоновщика, 
			ПараметрыНеточногоПоиска);
	КонецЕсли;
		
	Возврат МассивСсылок.Количество()>0;
	
КонецФункции

// Функция возвращает группу пользователей бизнес-процессов по умолчанию.
// 	Параметры:
// 		Пользователь - ссылка на пользователя
// 	Возвращает:
//		Группа пользователей бизнес-процессов по умолчанию.
//
Функция ПолучитьГруппуПользователейБППоУмолчанию(Пользователь) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Запрос = новый Запрос(
		"ВЫБРАТЬ
		|	нсиСоответствиеПользователейИГруппПользователейБП.ГруппаПользователейБП
		|ИЗ
		|	РегистрСведений.нсиСоответствиеПользователейИГруппПользователейБП КАК нсиСоответствиеПользователейИГруппПользователейБП
		|ГДЕ
		|	нсиСоответствиеПользователейИГруппПользователейБП.Пользователь = &Пользователь
		|	И нсиСоответствиеПользователейИГруппПользователейБП.ИспользоватьПоУмолчанию"
	);
	Запрос.УстановитьПараметр("Пользователь",Пользователь);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.ГруппаПользователейБП;
	Иначе
		Возврат Справочники.нсиГруппыПользователейБП.ПустаяСсылка();
	КонецЕсли;
КонецФункции

// Функция возвращает группу пользователей бизнес-процессов.
// 	Параметры:
// 		Пользователь - ссылка на пользователя
// 	Возвращает:
//		Группа пользователей бизнес-процессов.
//
Функция ПолучитьГруппыПользователейБП(Пользователь) Экспорт
	Запрос = новый Запрос(
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.нсиГруппыПользователейБП.Основная) КАК ГруппаПользователейБП
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	нсиСоответствиеПользователейИГруппПользователейБП.ГруппаПользователейБП
		|ИЗ
		|	РегистрСведений.нсиСоответствиеПользователейИГруппПользователейБП КАК нсиСоответствиеПользователейИГруппПользователейБП
		|ГДЕ
		|	нсиСоответствиеПользователейИГруппПользователейБП.Пользователь = &Пользователь"
	);
	Запрос.УстановитьПараметр("Пользователь",Пользователь);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ГруппаПользователейБП");
КонецФункции

// Функция проверяет наличие исполнителей для этапа бизнес-процесса.
// 	Параметры:
// 		СпособРаспределения - способ распределения.
// 		РольИсполнителя - функциональная роль пользователя.
// 		ОсновнойОбъектАдресации - группа пользователей бизнес-процессов.
// 	Возвращает:
//		Истина - исполнители есть.
//		Ложь - исполнители не найдены.
//
Функция ЕстьИсполнители(СпособРаспределения,РольИсполнителя,ОсновнойОбъектАдресации) Экспорт
	Возврат ПолучитьВозможныхИсполнителей(СпособРаспределения,РольИсполнителя,ОсновнойОбъектАдресации).Количество()>0
КонецФункции

// Функция возвращает исполнителей.
// 	Параметры:
// 		СпособРаспределения - способ распределения.
// 		РольИсполнителя - функциональная роль пользователя.
// 		ОсновнойОбъектАдресации - группа пользователей бизнес-процессов.
// 	Возвращает:
//		Массив исполнителей.
//
Функция ПолучитьВозможныхИсполнителей(СпособРаспределения,РольИсполнителя,ОсновнойОбъектАдресации) Экспорт
	Запрос = новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсполнителиЗадач.Исполнитель
		|ИЗ
		|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|ГДЕ
		|	(&СпособРаспределения = ЗНАЧЕНИЕ(Перечисление.нсиСпособыРаспределенияЗадач.ПоРоли)
		|		И РольИсполнителя = &РольИсполнителя)
		|	ИЛИ
		|	(&СпособРаспределения = ЗНАЧЕНИЕ(Перечисление.нсиСпособыРаспределенияЗадач.ПоРолиИГруппеПользователейБП)
		|		И РольИсполнителя = &РольИсполнителя И ОсновнойОбъектАдресации = &ОсновнойОбъектАдресации)
		|	ИЛИ
		|	(&СпособРаспределения = ЗНАЧЕНИЕ(Перечисление.нсиСпособыРаспределенияЗадач.ПоГруппеПользователейБП)
		|		И ОсновнойОбъектАдресации = &ОсновнойОбъектАдресации)
		|"
	);
	Запрос.УстановитьПараметр("СпособРаспределения",СпособРаспределения);
	Запрос.УстановитьПараметр("РольИсполнителя",РольИсполнителя);
	Запрос.УстановитьПараметр("ОсновнойОбъектАдресации",ОсновнойОбъектАдресации);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Исполнитель");
КонецФункции

// Функция проверяет возможность выполнения бизнес-процесса на этапах шага обработки.
// 	Параметры:
// 		БП - ссылка на бизнес-процесс.
// 	Возвращает:
//		Истина - условия не выполняются.
//		Ложь   - условия выполнены.
//
Функция НеВыполняютсяУсловияНаВсехЭтапахОбработки(БП) Экспорт
	ЭтапыОбработки = БП.ПрохождениеЭтапов.НайтиСтроки(новый Структура("Шаг",Перечисления.нсиШагиБП.Обработка));
	УсловиеВыполняется = Ложь;
	Для Каждого Строка ИЗ ЭтапыОбработки Цикл 
		Если нсиБизнесПроцессы.УсловиеВыполняется(Строка.УсловиеВыполнения,БП) Тогда 
			УсловиеВыполняется = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат НЕ УсловиеВыполняется;
КонецФункции

// Возвращает адрес электронной почты пользователя ПользовательСсылка.
//
// Параметры
//  ПользовательСсылка  – СправочникСсылка.Пользователи
//
// Возвращаемое значение:
//   Строка   – адрес электронной почты.
//
Функция ПолучитьАдресЭлектроннойПочты(ПользовательСсылка) Экспорт

	Результат = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ПользовательСсылка, 
		Справочники.ВидыКонтактнойИнформации.EmailПользователя);
	Возврат Результат;
	
КонецФункции 

// Получить структуру с описанием формы выполнения задачи.
//
// Параметры
//  ЗадачаСсылка  – ЗадачаСсылка.ЗадачаИсполнителя – задача
//
// Возвращаемое значение:
//   Структура   – структуру с описанием формы выполнения задачи.
//                 В ключе. 
//
Функция ПолучитьФормуВыполненияЗадачи(Знач ЗадачаСсылка) Экспорт
	
	Если ТипЗнч(ЗадачаСсылка) <> Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		  НСтр("ru = 'Неправильный тип параметра ЗадачаСсылка (передан: %1; ожидается: %2)'"),
		  ТипЗнч(ЗадачаСсылка), "ЗадачаСсылка.ЗадачаИсполнителя");
		
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
	Реквизиты = нсиОбщегоНазначения.ПолучитьЗначенияРеквизитов(ЗадачаСсылка, "БизнесПроцесс,ТочкаМаршрута");
	Если Реквизиты.БизнесПроцесс = Неопределено ИЛИ Реквизиты.БизнесПроцесс.Пустая() Тогда
		Возврат Новый Структура();
	КонецЕсли;
	
	ТипБизнесПроцесса = Метаданные.НайтиПоТипу(ТипЗнч(Реквизиты.БизнесПроцесс));
	ПараметрыФормы = БизнесПроцессы[ТипБизнесПроцесса.Имя].ФормаВыполненияЗадачи(ЗадачаСсылка,
		Реквизиты.ТочкаМаршрута);
	Возврат ПараметрыФормы;
	
КонецФункции

// Осуществляет пометку удаления бизнес-процессов.
//
Функция ПометитьНаУдалениеБизнесПроцессы(ВыделенныеСтроки) Экспорт
	Количество = 0;
	Для Каждого СтрокаТаблицы Из ВыделенныеСтроки Цикл
		БизнесПроцессСсылка = СтрокаТаблицы.БизнесПроцесс;
		Если БизнесПроцессСсылка = Неопределено ИЛИ БизнесПроцессСсылка.Пустая() Тогда
			Продолжить;
		КонецЕсли;	
		БизнесПроцессОбъект = БизнесПроцессСсылка.ПолучитьОбъект();
		БизнесПроцессОбъект.УстановитьПометкуУдаления(НЕ БизнесПроцессОбъект.ПометкаУдаления);
		Количество = Количество + 1;
	КонецЦикла;
	Возврат ?(Количество = 1, ВыделенныеСтроки[0].БизнесПроцесс, Неопределено);
КонецФункции

// Вызывается для получения вспомогательных бизнес-процессов 
// СписокБизнесПроцессов.
// 
// Параметры
//  БП       - бизнес-процесс.
//
Функция НайтиВспомогательныеПроцессы(БП) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("БП",БП);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.БизнесПроцесс
		|ПОМЕСТИТЬ НезавершенныеБП
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	(НЕ ЗадачаИсполнителя.БизнесПроцесс.Завершен)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НезавершенныеБП.БизнесПроцесс
		|ИЗ
		|	НезавершенныеБП КАК НезавершенныеБП
		|ГДЕ
		|	НезавершенныеБП.БизнесПроцесс.ВедущаяЗадача В
		|			(ВЫБРАТЬ
		|				Задача.ЗадачаИсполнителя.Ссылка
		|			ИЗ
		|				Задача.ЗадачаИсполнителя
		|			ГДЕ
		|				Задача.ЗадачаИсполнителя.БизнесПроцесс = &БП)";

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		УстановитьПривилегированныйРежим(Ложь);
		Возврат Истина;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	Возврат Ложь;
	
КонецФункции

// Проверяет, находится ли в ячейке отчета ссылка на задачу и в параметре
// ЗначениеРасшифровки возвращает значение расшифровки.
//
Функция ЭтоЗадачаИсполнителю(Знач Расшифровка, Знач ДанныеРасшифровкиОтчета, ЗначениеРасшифровки) Экспорт
	
	ДанныеРасшифровкиОбъект = ПолучитьИзВременногоХранилища(ДанныеРасшифровкиОтчета);
	ЗначениеРасшифровки = ДанныеРасшифровкиОбъект.Элементы[Расшифровка].ПолучитьПоля()[0].Значение;
	Возврат ТипЗнч(ЗначениеРасшифровки) = Тип("ЗадачаСсылка.ЗадачаИсполнителя");
	
КонецФункции

// Заполняет доступный текущему пользователю перечень справочников при создании заявок.
//
Процедура ЗаполнитьСписокДоступныхСправочников(СписокВыбора) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	нсиДоступностьОперацийПоТипамОбъектов.ТипОбъекта
		|ИЗ
		|	РегистрСведений.нсиДоступностьОперацийПоТипамОбъектов КАК нсиДоступностьОперацийПоТипамОбъектов
		|ГДЕ
		|	нсиДоступностьОперацийПоТипамОбъектов.ИспользоватьЗаявки"
	);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Мтд = Метаданные.Справочники.Найти(СтрЗаменить(Выборка.ТипОбъекта,"Справочник.",""));
		Если Мтд <> Неопределено
			И ПравоДоступа("Редактирование",Мтд,ПользовательИБ) Тогда
			
			СписокВыбора.Добавить(Мтд.Имя,Мтд.Синоним);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	нсиВидыСправочников.Ссылка,
		|	нсиВидыСправочников.Наименование
		|ИЗ
		|	Справочник.нсиВидыСправочников КАК нсиВидыСправочников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.нсиПраваДоступаНаВидыСправочников КАК нсиПраваДоступаНаВидыСправочников
		|		ПО нсиВидыСправочников.Ссылка = нсиПраваДоступаНаВидыСправочников.ВидСправочника
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
		|		ПО (нсиПраваДоступаНаВидыСправочников.Пользователь = СоставыГруппПользователей.ГруппаПользователей)
		|ГДЕ
		|	НЕ нсиВидыСправочников.ПометкаУдаления
		|	И нсиВидыСправочников.ИспользоватьЗаявки
		|	И СоставыГруппПользователей.Используется
		|	И нсиПраваДоступаНаВидыСправочников.Просмотр
		|	И СоставыГруппПользователей.Пользователь = &Пользователь
		|	И нсиВидыСправочников.ВидСправочника В(
		|		ЗНАЧЕНИЕ(Перечисление.нсиВидыСправочников.ФункциональныйСправочник),
		|		ЗНАЧЕНИЕ(Перечисление.нсиВидыСправочников.Классификатор)
		|	)"
	);
	Запрос.УстановитьПараметр("Пользователь",ПараметрыСеанса.ТекущийПользователь);
	Выборка = запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокВыбора.Добавить(Выборка.Ссылка,Выборка.Наименование);
	КонецЦикла;
	
	СписокВыбора.СортироватьПоПредставлению();
	
КонецПроцедуры

// Заполняет перечень справочников при создании заявок.
//
Процедура ЗаполнитьСписокСправочниковВедущихсяПоЗаявкам(СписокВыбора) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	Для Каждого Справочник Из Метаданные.Справочники Цикл
		Если Справочник.Реквизиты.Найти("ЭтоМакет")<>Неопределено
			И Справочник.Имя <> "нсиУниверсальныйФункциональныйСправочник"
			И Справочник.Имя <> "нсиУниверсальныйКлассификатор" Тогда
			
			СписокВыбора.Добавить(Справочник.Имя,Справочник.Синоним);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	нсиВидыСправочников.Ссылка,
		|	нсиВидыСправочников.Наименование
		|ИЗ
		|	Справочник.нсиВидыСправочников КАК нсиВидыСправочников
		|ГДЕ
		|	НЕ нсиВидыСправочников.ПометкаУдаления
		|	И нсиВидыСправочников.ИспользоватьЗаявки
		|	И нсиВидыСправочников.ВидСправочника В(
		|		ЗНАЧЕНИЕ(Перечисление.нсиВидыСправочников.ФункциональныйСправочник),
		|		ЗНАЧЕНИЕ(Перечисление.нсиВидыСправочников.Классификатор)
		|	)"
	);
	Выборка = запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокВыбора.Добавить(Выборка.Ссылка,Выборка.Наименование);
	КонецЦикла;
	
	СписокВыбора.СортироватьПоПредставлению();
	
КонецПроцедуры

// Вызывается при создании формы списка задач на сервере.
//
// Параметры
//  УсловноеОформление - УсловноеОформление - условное оформление списка задач
//
Процедура УстановитьОформлениеЗадач(Знач СписокЗадачИлиЕгоУсловноеОформление) Экспорт

	Если ТипЗнч(СписокЗадачИлиЕгоУсловноеОформление) = Тип("ДинамическийСписок") Тогда
		УсловноеОформлениеСпискаЗадач = СписокЗадачИлиЕгоУсловноеОформление.КомпоновщикНастроек.Настройки.УсловноеОформление;
		УсловноеОформлениеСпискаЗадач.ИдентификаторПользовательскойНастройки = "ОсновноеОформление";
	Иначе
		УсловноеОформлениеСпискаЗадач = СписокЗадачИлиЕгоУсловноеОформление;
	КонецЕсли;
	
	// Удаление предустановленных элементов оформления.
	Предустановленные = Новый Массив;
	Элементы = УсловноеОформлениеСпискаЗадач.Элементы;
	Для каждого ЭлементУсловногоОформления Из Элементы Цикл
		Если ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
			Предустановленные.Добавить(ЭлементУсловногоОформления);
		КонецЕсли;
	КонецЦикла;
	Для каждого ЭлементУсловногоОформления Из Предустановленные Цикл
		Элементы.Удалить(ЭлементУсловногоОформления);
	КонецЦикла;
	
	// установка оформления для просроченных задач
	ЭлементУсловногоОформления = УсловноеОформлениеСпискаЗадач.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СрокИсполнения");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СрокИсполнения");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбораДанных.ПравоеЗначение = ТекущаяДата();
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Выполнена");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("BackColor");
	ЭлементЦветаОформления.Значение =  Метаданные.ЭлементыСтиля.ПросроченнаяЗадачаФон.Значение; 
	ЭлементЦветаОформления.Использование = Истина;
	
	// задачи с истекшим сроком оповещения
	ЭлементУсловногоОформления = УсловноеОформлениеСпискаЗадач.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СрокОповещения");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СрокОповещения");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбораДанных.ПравоеЗначение = ТекущаяДата();
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Выполнена");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СрокИсполнения");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ЭлементОтбораДанных.ПравоеЗначение = ТекущаяДата();
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("BackColor");
	ЭлементЦветаОформления.Значение =  Метаданные.ЭлементыСтиля.ПросроченнаяЗадачаФонОповещения.Значение; 
	ЭлементЦветаОформления.Использование = Истина;
	
	// установка оформления для выполненных задач
	ЭлементУсловногоОформления = УсловноеОформлениеСпискаЗадач.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Выполнена");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение = Метаданные.ЭлементыСтиля.ВыполненнаяЗадача.Значение; 
	ЭлементЦветаОформления.Использование = Истина;
	
КонецПроцедуры

// Возвращает описание предмета в виде текстовой строки.
// 
// Параметры:
//  СсылкаНаПредмет  - ссылка на справочник.
//
// Возвращаемое значение:
//   Строка.
// 
Функция ПредметСтрокой(СсылкаНаПредмет) Экспорт
	
	Результат = "";
	
	Если СсылкаНаПредмет = Неопределено Или СсылкаНаПредмет.Пустая() Тогда
//	ITRR Кутья АА локализация
		Результат = НСтр("ru = 'не задан'; en = 'not specified'");
	ИначеЕсли ТипЗнч(СсылкаНаПредмет) = Тип("СправочникСсылка.нсиУниверсальныйФункциональныйСправочник")
		ИЛИ ТипЗнч(СсылкаНаПредмет) = Тип("СправочникСсылка.нсиУниверсальныйКлассификатор") Тогда 
		
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1 (%2)", 
			Строка(СсылкаНаПредмет), 
			Строка(СсылкаНаПредмет.Владелец)
		);
	Иначе	
		ПредставлениеОбъекта = СсылкаНаПредмет.Метаданные().ПредставлениеОбъекта;
		Если ПустаяСтрока(ПредставлениеОбъекта) Тогда
			ПредставлениеОбъекта = СсылкаНаПредмет.Метаданные().Представление();
		КонецЕсли;
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1 (%2)", 
			Строка(СсылкаНаПредмет), 
			ПредставлениеОбъекта
		);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Осуществляет перенаправление задач.
//
Функция ПеренаправитьЗадачи(Знач МассивЗадач, Знач ИнфоОПеренаправлении, Знач ТолькоПроверка = Ложь,
	МассивПеренаправленныхЗадач = Неопределено, ПричинаОтказа = "") Экспорт
	
	// Перенаправление задач доступно всем, кто имеет права на их изменение.
	Если ПравоДоступа("Изменение", Метаданные.Задачи.ЗадачаИсполнителя)	Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Результат = Истина;
	Для Каждого Задача Из МассивЗадач Цикл
		
		ЗадачаВыполнена = нсиОбщегоНазначения.ПолучитьЗначениеРеквизита(Задача.Ссылка, "Выполнена");
		Если ЗадачаВыполнена Тогда
			Результат = Ложь;
			ПричинаОтказа = "Задача "+Строка(Задача)+" выполнена!";
			Если ТолькоПроверка Тогда
				Прервать;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если НЕ РольДоступна("ПолныеПрава") И НЕ РольДоступна("нсиСтаршийЭксперт") Тогда 
			
			Если ЗначениеЗаполнено(Задача.Ссылка.Исполнитель)
				И Задача.Ссылка.Исполнитель<>ПараметрыСеанса.ТекущийПользователь Тогда 
				
				Результат = Ложь;
				Если ТолькоПроверка Тогда
					ПричинаОтказа = "Задача "+Строка(Задача)+": можно перенаправить только свою задачу!";
					Прервать;
				КонецЕсли;
			КонецЕсли;
			
			Если ИнфоОПеренаправлении<>Неопределено Тогда 
				Если НЕ ЗначениеЗаполнено(Задача.Ссылка.Исполнитель) Тогда 
					ДопустимыеИсполнители = нсиБизнеспроцессы.ПолучитьДопустимыхИсполнителей(Задача);
					Если ДопустимыеИсполнители.Найти(ПараметрыСеанса.ТекущийПользователь) = Неопределено Тогда 
						Результат = Ложь;
						ПричинаОтказа = "Задача "+Строка(Задача)+": задачу нельзя перенаправить пользователю "+ИнфоОПеренаправлении.Исполнитель+"!";
						Если ТолькоПроверка Тогда
							Прервать;
						Иначе
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ПричинаОтказа);
							Продолжить;
						КонецЕсли;
					КонецЕсли;		
				КонецЕсли;
			
				Если НЕ ЗначениеЗаполнено(Задача.Ссылка.Исполнитель)
					И ИнфоОПеренаправлении.Исполнитель<>ПараметрыСеанса.ТекущийПользователь Тогда 
					
					Результат = Ложь;
					ПричинаОтказа = "Задача "+Строка(Задача)+": задачу можно взять на обработку только себе!";
					Если ТолькоПроверка Тогда
						Прервать;
					Иначе
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ПричинаОтказа);
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИнфоОПеренаправлении<>Неопределено Тогда 
			Если Задача.Ссылка.Исполнитель=ИнфоОПеренаправлении.Исполнитель
				И ИнфоОПеренаправлении.Исполнитель=ПараметрыСеанса.ТекущийПользователь Тогда 
				
				Результат = Ложь;
//	ITRR Кутья АА локализация				
//				ПричинаОтказа = "Задача "+Строка(Задача)+": задача уже у Вас в обработке!";
				ПричинаОтказа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Задача %1: задача уже у Вас в обработке!'; en = 'Task %1: the task is already in your processing!'"), 
					Строка(Задача));
				
				Если ТолькоПроверка Тогда
					Прервать;
				Иначе
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ПричинаОтказа);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ТолькоПроверка Тогда
			Продолжить;
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(МассивПеренаправленныхЗадач) Тогда
			МассивПеренаправленныхЗадач = Новый Массив();
		КонецЕсли;
		
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Задача.ЗадачаИсполнителя");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Задача.Ссылка);
			Если ЗначениеЗаполнено(Задача.БизнесПроцесс) Тогда 
				ЭлементБлокировки = Блокировка.Добавить("БизнесПроцесс."+Задача.БизнесПроцесс.Метаданные().Имя);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Задача.БизнесПроцесс);
			КонецЕсли;
			Блокировка.Заблокировать();
		
			ЗадачаОбъект = Задача.Ссылка.ПолучитьОбъект();
			мРезультатВыполнения = ЗадачаОбъект.РезультатВыполнения;
			ЗадачаОбъект.РезультатВыполнения = ИнфоОПеренаправлении.Комментарий;
			Если ЗначениеЗаполнено(ИнфоОПеренаправлении.Исполнитель) И 
				ИнфоОПеренаправлении.Исполнитель = ПараметрыСеанса.ТекущийПользователь Тогда 
				
				ЗадачаОбъект.Результат = Перечисления.нсиРезультатыВыполненияЗадач.ВзятаВОбработку;
			Иначе
				ЗадачаОбъект.Результат = Перечисления.нсиРезультатыВыполненияЗадач.Перенаправлена;
			КонецЕсли;
			
			ЗадачаОбъект.ДатаИсполнения = ТекущаяДата();
			
			ЗадачаОбъект.ДлительностьИсполнения = 
				нсиБизнесПроцессы.ОпределитьДлительностьПоГрафику(
					ЗадачаОбъект.ДатаНачала,
					ЗадачаОбъект.ДатаИсполнения,
					ЗадачаОбъект.Исполнитель
			);
			
			ЗадачаОбъект.Записать();
					
			ЗадачаОбъект.РезультатВыполнения = мРезультатВыполнения;
			
			НоваяЗадача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
			НоваяЗадача.Заполнить(ЗадачаОбъект);
			НоваяЗадача.ДатаИсполнения = Дата(1,1,1);
			НоваяЗадача.СрокИсполнения = ТекущаяДата();
			НоваяЗадача.СрокОповещения = ТекущаяДата();
			НоваяЗадача.ДлительностьИсполнения = 0;
			ЗаполнитьЗначенияСвойств(НоваяЗадача, ИнфоОПеренаправлении, 
				"Исполнитель,
				|РольИсполнителя,
				|ОсновнойОбъектАдресации,
				|ДополнительныйОбъектАдресации,
				|СпособРаспределения"
			);
			ЗаполнитьЗначенияСвойств(НоваяЗадача, ЗадачаОбъект, 
				"Дата,
				|ШагБП,
				|НомерЭтапаБП,
				|Важность"
			);
			
			Если ЗначениеЗаполнено(НоваяЗадача.ОсновнойОбъектАдресации) Тогда 
				НоваяЗадача.ИспользоватьОсновнойОбъектАдресации = Истина;
			КонецЕсли;

			Если ЗначениеЗаполнено(НоваяЗадача.Исполнитель) Тогда 
				НоваяЗадача.РольИсполнителя = Справочники.РолиИсполнителей.ПустаяСсылка();
				НоваяЗадача.ОсновнойОбъектАдресации = Неопределено;
				НоваяЗадача.СпособРаспределения = Перечисления.нсиСпособыРаспределенияЗадач.ПустаяСсылка();
			КонецЕсли;
			
			НоваяЗадача.ДатаНачала = ТекущаяДата();
			Если ЗначениеЗаполнено(НоваяЗадача.БизнесПроцесс) Тогда 
				БП = НоваяЗадача.БизнесПроцесс;
				Если
					ТипЗнч(БП) = Тип("БизнесПроцессСсылка.нсиВводНовогоЭлементаСправочника")
					ИЛИ ТипЗнч(БП) = Тип("БизнесПроцессСсылка.нсиИзменениеЭлементаСправочника")
					ИЛИ ТипЗнч(БП) = Тип("БизнесПроцессСсылка.нсиУдалениеЭлементаСправочника")
					ИЛИ ТипЗнч(БП) = Тип("БизнесПроцессСсылка.нсиПакетныйВводЭлементовСправочника")
				Тогда
				
					МножительВремениОбработки = 1;
					Если ТипЗнч(БП) = Тип("БизнесПроцессСсылка.нсиПакетныйВводЭлементовСправочника") Тогда 
						СтрокиОтозвано = БП.Предметы.НайтиСтроки(Новый Структура("Статус",Перечисления.нсиСтатусыОбработкиЗаявок.Отозвано));
						СтрокиПроверено = БП.Предметы.НайтиСтроки(Новый Структура("Статус",Перечисления.нсиСтатусыОбработкиЗаявок.ПроверенаКлассификация));
						
						Если НоваяЗадача.ТочкаМаршрута = БизнесПроцессы.нсиПакетныйВводЭлементовСправочника.ТочкиМаршрута.НазначениеОтветственного Тогда 
							МножительВремениОбработки = БП.Предметы.Количество() - СтрокиОтозвано.Количество();
						ИначеЕсли НоваяЗадача.ТочкаМаршрута = БизнесПроцессы.нсиПакетныйВводЭлементовСправочника.ТочкиМаршрута.ОбработкаИнформации Тогда 
							МножительВремениОбработки = БП.Предметы.Количество() - СтрокиОтозвано.Количество()-СтрокиПроверено.Количество();
						ИначеЕсли НоваяЗадача.ТочкаМаршрута = БизнесПроцессы.нсиПакетныйВводЭлементовСправочника.ТочкиМаршрута.КонтрольИсполнения Тогда 
							МножительВремениОбработки = БП.Предметы.Количество() - СтрокиОтозвано.Количество();
						КонецЕсли;
						МножительВремениОбработки = Макс(МножительВремениОбработки,1);
					КонецЕсли;
				
				
					СтрокиЭтапов = БП.ПрохождениеЭтапов.НайтиСтроки(новый Структура("Шаг,НомерЭтапа",НоваяЗадача.ШагБП,НоваяЗадача.НомерЭтапаБП));
					Если СтрокиЭтапов.Количество()>0 Тогда 
						ВремяИсполнения = СтрокиЭтапов[0].ВремяОжидания;
						ВремяОповещения = СтрокиЭтапов[0].ВремяОжидания - СтрокиЭтапов[0].ОповещатьПриОжиданииЗа;
						Если ЗначениеЗаполнено(НоваяЗадача.Исполнитель) Тогда 
							ВремяИсполнения = СтрокиЭтапов[0].ВремяОбработки * МножительВремениОбработки;
							ВремяОповещения = ВремяИсполнения - СтрокиЭтапов[0].ОповещатьПриОбработкеЗа;
						КонецЕсли;
						НоваяЗадача.СрокИсполнения = 
							нсиБизнесПроцессы.ОпределитьДатуОкончанияПоКалендарномуГрафику(
							НоваяЗадача.ДатаНачала,
							ВремяИсполнения,
							НоваяЗадача.Исполнитель
						);
						НоваяЗадача.СрокОповещения = 
							нсиБизнесПроцессы.ОпределитьДатуОкончанияПоКалендарномуГрафику(
							НоваяЗадача.ДатаНачала,
							ВремяОповещения,
							НоваяЗадача.Исполнитель
						);
					Иначе
						НоваяЗадача.СрокИсполнения = НоваяЗадача.ДатаНачала;
						НоваяЗадача.СрокОповещения = НоваяЗадача.ДатаНачала;
					КонецЕсли;
				ИначеЕсли ТипЗнч(БП) = Тип("БизнесПроцессСсылка.Задание") Тогда 
					НоваяЗадача.СрокИсполнения = БП.СрокИсполнения;
					НоваяЗадача.СрокОповещения = БП.СрокИсполнения;
				КонецЕсли;
			КонецЕсли;

			
			НоваяЗадача.Записать();
		
			нсиБизнесПроцессы.ОтправитьОповещениеПоЭлектроннойПочте(НоваяЗадача);
			
			Если ЗначениеЗаполнено(НоваяЗадача.Предмет) Тогда 
				Если ТипЗнч(НоваяЗадача.БизнесПроцесс) = Тип("БизнесПроцессСсылка.нсиВводНовогоЭлементаСправочника") Тогда 
					РегистрыСведений.нсиСтатусыОбработкиСправочников.УстановитьСтатусСправочника(НоваяЗадача.Предмет,
						Новый Структура("Пользователь", НоваяЗадача.Исполнитель));
				КонецЕсли;
				
				Если ТипЗнч(НоваяЗадача.БизнесПроцесс) = Тип("БизнесПроцессСсылка.нсиИзменениеЭлементаСправочника")
					Или ТипЗнч(НоваяЗадача.БизнесПроцесс) = Тип("БизнесПроцессСсылка.нсиУдалениеЭлементаСправочника")
					Тогда 
						РегистрыСведений.нсиСтатусыОбработкиСправочников.УстановитьСтатусСправочника(НоваяЗадача.Предмет,
							Новый Структура("Пользователь", НоваяЗадача.Исполнитель));
					КонецЕсли;
			КонецЕсли;
				
			Если ТипЗнч(НоваяЗадача.БизнесПроцесс) = Тип("БизнесПроцессСсылка.нсиПакетныйВводЭлементовСправочника") Тогда 
				Для Каждого Строка Из НоваяЗадача.БизнесПроцесс.Предметы Цикл 
					РегистрыСведений.нсиСтатусыОбработкиСправочников.УстановитьСтатусСправочника(Строка.Предмет,
						Новый Структура("Пользователь", НоваяЗадача.Исполнитель));
				КонецЦикла;
			КонецЕсли;
			
			МассивПеренаправленныхЗадач.Добавить(НоваяЗадача.Ссылка);
			
			ЗадачаОбъект.РезультатВыполнения = ИнфоОПеренаправлении.Комментарий; 
			ЗадачаОбъект.Выполнена = Ложь;
			ЗадачаОбъект.ВыполнитьЗадачу();
			
			ЗаблокироватьДанныеДляРедактирования(Задача.Ссылка.БизнесПроцесс);
			Если ЗначениеЗаполнено(Задача.Ссылка.БизнесПроцесс) Тогда 
				ПроцессОбъект = Задача.Ссылка.БизнесПроцесс.ПолучитьОбъект();
				
				Если ИнфоОПеренаправлении.Исполнитель = ПараметрыСеанса.ТекущийПользователь Тогда 
					ПроцессОбъект.РезультатВыполнения =
//	ITRR Кутья АА локализация				
//						Строка(ТекущаяДата())+", "+ПараметрыСеанса.ТекущийПользователь+" взял(а) задачу в обработку."+
						Строка(ТекущаяДата())+", "+ПараметрыСеанса.ТекущийПользователь+НСтр("ru = ' взял(а) задачу в обработку.'; en = ' took the task in the processing.'")+
						Символы.ПС+ПроцессОбъект.РезультатВыполнения;
				Иначе 
					ПроцессОбъект.РезультатВыполнения = 
						Строка(ТекущаяДата())+", "+ПараметрыСеанса.ТекущийПользователь+" перенаправил(а) задачу:"+
							?(ЗначениеЗаполнено(ИнфоОПеренаправлении.РольИсполнителя),Символы.ПС+"     Роль исполнителя: "+ИнфоОПеренаправлении.РольИсполнителя,"")+
							?(ЗначениеЗаполнено(ИнфоОПеренаправлении.ОсновнойОбъектАдресации),Символы.ПС+"     Группа пользователей БП: "+ИнфоОПеренаправлении.ОсновнойОбъектАдресации,"")+
							?(ЗначениеЗаполнено(ИнфоОПеренаправлении.Исполнитель),Символы.ПС+"     Исполнитель: "+ИнфоОПеренаправлении.Исполнитель,"")+
							Символы.ПС+ИнфоОПеренаправлении.Комментарий+
							Символы.ПС+ПроцессОбъект.РезультатВыполнения;
				КонецЕсли;
				
				ПроцессОбъект.Исполнитель = ИнфоОПеренаправлении.Исполнитель;
				
				Если ТипЗнч(Задача.Ссылка.БизнесПроцесс)<>Тип("БизнесПроцессСсылка.Задание") Тогда 
					СтрокиЭтапов = ПроцессОбъект.ПрохождениеЭтапов.НайтиСтроки(новый Структура("Шаг,НомерЭтапа",ЗадачаОбъект.ШагБП,ЗадачаОбъект.НомерЭтапаБП));
					Если СтрокиЭтапов.Количество()>0 Тогда 
						СтрокиЭтапов[0].Исполнитель = ИнфоОПеренаправлении.Исполнитель; 
					КонецЕсли;
				Иначе
					Если Задача.ТочкаМаршрута  = БизнесПроцессы.Задание.ТочкиМаршрута.ОбработкаЗадания Тогда 
						ПроцессОбъект.Выполняющий = ИнфоОПеренаправлении.Исполнитель;
					КонецЕсли;
				КонецЕсли;
				
				ПроцессОбъект.Записать();
			КонецЕсли;
			
			ПриПеренаправленииЗадачи(ЗадачаОбъект, НоваяЗадача);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
//	ITRR Кутья АА локализация				
//			ТекстСообщения = "При перенаправлении задачи "+ЗадачаОбъект+" произошла ошибка :"+ОписаниеОшибки();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'При перенаправлении задачи %1 произошла ошибка : %2'; en = 'An error occurred: %2 while redirecting the task %1'"), 
					ЗадачаОбъект,ОписаниеОшибки());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецПопытки;
		
		
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Процедура ПриПеренаправленииЗадачи(ЗадачаОбъект, НоваяЗадачаОбъект) 
	
	Если ЗадачаОбъект.БизнесПроцесс = Неопределено ИЛИ ЗадачаОбъект.БизнесПроцесс.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ТипБизнесПроцесса = Метаданные.НайтиПоТипу(ТипЗнч(ЗадачаОбъект.БизнесПроцесс));
	Попытка
		БизнесПроцессы[ТипБизнесПроцесса.Имя].ПриПеренаправленииЗадачи(ЗадачаОбъект.Ссылка, НоваяЗадачаОбъект.Ссылка);
	Исключение
		// метод не определен
	КонецПопытки;
	
КонецПроцедуры

// Выбрать список исполнителей, назначенных на указанную роль.
//
// Результат:
//    Массив - массив элементов справочника Пользователи.
//
Функция ИсполнителиРоли(РольСсылка, ОсновнойОбъектАдресации = Неопределено,
	ДополнительныйОбъектАдресации = Неопределено) Экспорт
	
	РезультатЗапроса = ВыбратьИсполнителейРоли(РольСсылка, ОсновнойОбъектАдресации,
		ДополнительныйОбъектАдресации);
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Исполнитель");	
	
КонецФункции

// Есть ли хотя бы один исполнитель, назначенный на указанную роль.
//
// Результат:
//   Булево.
//
Функция ЕстьИсполнителиРоли(РольСсылка, ОсновнойОбъектАдресации = Неопределено,
	ДополнительныйОбъектАдресации = Неопределено) Экспорт
	
	РезультатЗапроса = ВыбратьИсполнителейРоли(РольСсылка, ОсновнойОбъектАдресации,
		ДополнительныйОбъектАдресации);
	Возврат НЕ РезультатЗапроса.Пустой();	
	
КонецФункции

// Возвращает результат запроса по исполнителям.
//
Функция ВыбратьИсполнителейРоли(РольСсылка, ОсновнойОбъектАдресации = Неопределено,
	ДополнительныйОбъектАдресации = Неопределено)
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
	   |	ИсполнителиЗадач.Исполнитель
	   |ИЗ
	   |	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
	   |ГДЕ
	   |	ИсполнителиЗадач.РольИсполнителя = &РольИсполнителя";
	Если ОсновнойОбъектАдресации <> Неопределено Тогда  
		ТекстЗапроса = ТекстЗапроса +
	   		"	И ИсполнителиЗадач.ОсновнойОбъектАдресации = &ОсновнойОбъектАдресации";
	КонецЕсли;		
	Если ДополнительныйОбъектАдресации <> Неопределено Тогда  
		ТекстЗапроса = ТекстЗапроса +
		 	"	И ИсполнителиЗадач.ДополнительныйОбъектАдресации = &ДополнительныйОбъектАдресации";
	КонецЕсли;		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("РольИсполнителя", РольСсылка);
	Запрос.Параметры.Вставить("ОсновнойОбъектАдресации", ОсновнойОбъектАдресации);
	Запрос.Параметры.Вставить("ДополнительныйОбъектАдресации", ДополнительныйОбъектАдресации);
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса;
	
КонецФункции

// Функция возвращает исполнителя, если он у текущей роли один.
//
// Результат:
//   Исполнитель - Справочник.Пользователи - единственный исполнитель.
//
Функция ОпределитьЕдинственногоИсполнителя(РольИсполнителя)
	
	Исполнитель = Справочники.Пользователи.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ИсполнителиЗадач.Исполнитель КАК Исполнитель
	               |ИЗ
	               |	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
	               |ГДЕ
	               |	ИсполнителиЗадач.РольИсполнителя = &РольИсполнителя";
	Запрос.УстановитьПараметр("РольИсполнителя", РольИсполнителя);
	
	рез = Запрос.Выполнить();
	Если Не рез.Пустой() Тогда
		
		Выборка = рез.Выбрать();
		Если Выборка.Количество() < 2 Тогда
			Выборка.Следующий();
			Исполнитель = Выборка.Исполнитель;
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат Исполнитель;
	
КонецФункции	

#КонецОбласти
