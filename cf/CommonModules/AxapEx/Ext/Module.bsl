//SYNC Axapta MRP
Процедура Exchange_MDM_to_AxaptaMRP() Экспорт
	ВыполнитьОбмен();
КонецПроцедуры

//ОСНОВНЫЕ
Процедура ВыполнитьОбмен() 

	Узел = ПланыОбмена.Обмен_MDM_AX.ПолучитьУзелОбменаAX();
	
	Если НЕ ЗначениеЗаполнено(Узел) Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоСтрокПакета = 40;
	
	Обмены = Справочники.Обмены;
	
	ОбъектыОбмена = Новый Массив;
	ОбъектыОбмена.Добавить(Обмены.ПолучитьНастройку("AXCUST"));
	ОбъектыОбмена.Добавить(Обмены.ПолучитьНастройку("AXVEND"));
	ОбъектыОбмена.Добавить(Обмены.ПолучитьНастройку("AXVENDAGR"));
	ОбъектыОбмена.Добавить(Обмены.ПолучитьНастройку("AXITEM"));
	ОбъектыОбмена.Добавить(Обмены.ПолучитьНастройку("AXUNITCONV"));
	ОбъектыОбмена.Добавить(Обмены.ПолучитьНастройку("AXITEMSPEC"));
	ОбъектыОбмена.Добавить(Обмены.ПолучитьНастройку("AXVENDITEM"));
	
	ПеременныеWS = Обмены.ПолучитьНастройку("AX");
	
	Для каждого ОбъектОбмена Из ОбъектыОбмена Цикл
		
		Выполнять = Ложь;
		Если ОбъектОбмена.Свойство("Выполнять", Выполнять) Тогда
			Если НЕ Выполнять Тогда
				Продолжить;
			КонецЕсли; 
		Иначе	
			Продолжить;
		КонецЕсли;
		
		errorDescription = "";
		Если ОбъектОбмена.Свойство("error", errorDescription) Тогда
			ЗаписатьСведенияВЖурналОбмена(ОбъектОбмена.НастройкаОбмена, errorDescription, Истина); //лог
			Продолжить;
		КонецЕсли;
		
		// 1. Получение данных для отправки
		Если ОбъектОбмена.Ключ = "Клиенты" Тогда
			Данные = СобратьДанные(ОбъектОбмена.Ключ, Узел);
			ДанныеПоПоставщикам = СобратьДанные("Поставщики", Узел);
		ИначеЕсли ОбъектОбмена.Ключ = "Поставщики" Тогда
			Данные = ДанныеПоПоставщикам;
		Иначе
			Данные = СобратьДанные(ОбъектОбмена.Ключ, Узел);
		КонецЕсли; 
		
		MSSessionID = Строка(Новый УникальныйИдентификатор);
		
		ЗаписатьСведенияВЖурналОбмена(ОбъектОбмена.НастройкаОбмена, "MS Session ID " + MSSessionID); //лог
		ЗаписатьСведенияВЖурналОбмена(ОбъектОбмена.НастройкаОбмена, "Количество отправляемых данных: "+Данные.Количество()); //лог
		
		Если Данные.Количество() = 0 Тогда
			//Отправка пустого пакета через веб-сервис
			ОтправитьПакетДанных(Данные, ПеременныеWS, ОбъектОбмена, 0, 0, MSSessionID, 1, ОбъектОбмена.НастройкаОбмена);
			Продолжить;
		КонецЕсли; 
		
		КоличествоСтрокОстаток = Данные.Количество();
		ОтправленоПакетов = 0;
		
		//Цикл для разделения массива данных на пакеты
		Пока КоличествоСтрокОстаток > 0 Цикл
			
			КоличествоСтрокДляОтправки = Мин(КоличествоСтрокОстаток, КоличествоСтрокПакета);
			
			// 2. Получение пакета данных
			ПакетДанных = ПолучитьПакетДанных(Данные, КоличествоСтрокДляОтправки, ОтправленоПакетов*КоличествоСтрокПакета);
			
			// 3. Отправка пакета через веб-сервис
			//Сообщить("Отправка пакета "+Число(ОтправленоПакетов+1)+" из "+КоличествоСтрокДляОтправки+" элементов", СтатусСообщения.Информация);
			Ответ = ОтправитьПакетДанных(ПакетДанных, ПеременныеWS, ОбъектОбмена, Данные.Количество(), КоличествоСтрокДляОтправки, MSSessionID, ОтправленоПакетов+1, ОбъектОбмена.НастройкаОбмена);
			
			Если НЕ Ответ = Неопределено Тогда
				
				Если Ответ.Answer = 0 Тогда
				//	Сообщить("Пакет "+Число(ОтправленоПакетов+1)+" успешно отправлен.", СтатусСообщения.Информация);
				Иначе
					ЗаписатьСведенияВЖурналОбмена(ОбъектОбмена.НастройкаОбмена, "Ошибка при получении данных на стороне AX. Код ошибки "+Ответ.Answer, Истина); //лог
				КонецЕсли; 
				// 4. Удаление регистрации отправленных объектов
				УдалитьРегистрациюИзмененийУзла(ПакетДанных, Ответ, Узел, ОбъектОбмена.НастройкаОбмена);
				
			КонецЕсли; 
			
			ОтправленоПакетов = ОтправленоПакетов+1;
			КоличествоСтрокОстаток = КоличествоСтрокОстаток-КоличествоСтрокДляОтправки;
			
		КонецЦикла; 
	КонецЦикла; 

КонецПроцедуры // ВыполнитьОбмен()

Функция ПолучитьПакетДанных(Данные, КоличествоСтрокДляОтправки, НачальныйИндексСтроки)

	ПакетДанных = Данные.Скопировать();
	ПакетДанных.Очистить();
	
	Для н = 0 По КоличествоСтрокДляОтправки-1 Цикл
	
		НоваяСтрока = ПакетДанных.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Данные[НачальныйИндексСтроки+н]);
	
	КонецЦикла;
	
	Возврат ПакетДанных;

КонецФункции // ПолучитьПакетДанных()

Функция ОтправитьПакетДанных(ПакетДанных, ПеременныеWS, ПараметрыWS, Total_cnt, Current_cnt, MSSessionID, TransId, НастройкаОбмена)

	Ответ = Неопределено;
	
	Попытка
		WSОпределение = Новый WSОпределения(ПараметрыWS.МестоположениеWSDL);
	Исключение
		ЗаписатьСведенияВЖурналОбмена(НастройкаОбмена, ОписаниеОшибки(), Истина); //лог
		Возврат Ответ;
	КонецПопытки;
	
	WSФабрикаXDTO = WSОпределение.ФабрикаXDTO;
	
	ArrayOfLine = WSФабрикаXDTO.Создать(WSФабрикаXDTO.Тип(ПеременныеWS.URIПространстваИмен, ПараметрыWS.ArrayOfLine));
	
	Для каждого СтрокаПакета Из ПакетДанных Цикл
		
		Line = WSФабрикаXDTO.Создать(WSФабрикаXDTO.Тип(ПеременныеWS.URIПространстваИмен, ПараметрыWS.Line)); 
		ЗаполнитьЗначенияСвойств(Line, СтрокаПакета);
		ArrayOfLine[ПараметрыWS.Line].Добавить(Line);
	
	КонецЦикла;
	
	Header = WSФабрикаXDTO.Создать(WSФабрикаXDTO.Тип(ПеременныеWS.URIПространстваИмен, ПараметрыWS.Header)); 
	Header.MSSessionID = MSSessionID;
	Header.Total_cnt = Total_cnt;
	Header.Current_cnt = Current_cnt;
	Header.TransId = TransId;
	Header.Empty = ?(Total_cnt > 0, "No", "Yes");
	Header.dataContractLines = ArrayOfLine;
	
	Прокси = Новый WSПрокси(WSОпределение, ПеременныеWS.URIПространстваИменСервиса, ПеременныеWS.ИмяСервиса, ПараметрыWS.ИмяТочкиПодключения);
	Прокси.Пользователь = ПеременныеWS.Пользователь;
	Прокси.Пароль = ПеременныеWS.Пароль;
	
	Попытка
		Ответ = Прокси.importData(Header);
	Исключение
		ЗаписатьСведенияВЖурналОбмена(НастройкаОбмена, ОписаниеОшибки(), Истина); //лог
		Возврат Ответ;
	КонецПопытки;
	
	Возврат Ответ;

КонецФункции // ОтправитьПакетДанных()
 
Процедура УдалитьРегистрациюИзмененийУзла(ПакетДанных, Ответ, Узел, НастройкаОбмена)

	Если Ответ.Answer = 0 Тогда
		
		Для каждого СтрокаПакетаДанных Из ПакетДанных Цикл
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, СтрокаПакетаДанных.Ссылка);
		КонецЦикла; 
		
	Иначе
		
		СтрокиСОшибками = Новый СписокЗначений;
		Для каждого Значение Из Ответ.dataContractLinesAnswer.NV_ESIDataContractLineAnswer Цикл
			Если Значение.LineId > 0 Тогда
				СтрокиСОшибками.Добавить(Значение.LineId);
				
				Отбор = Новый Структура;
				Отбор.Вставить("LineId",Значение.LineId);
				МассивСтрок = ПакетДанных.НайтиСтроки(Отбор);
				Для каждого СтрокаПакета Из МассивСтрок Цикл
					ЗаписатьСведенияВЖурналОбмена(НастройкаОбмена, Значение.Data, Истина, СтрокаПакета.Ссылка); //лог
				КонецЦикла; 
			КонецЕсли; 
		КонецЦикла; 
		
		Для каждого СтрокаПакетаДанных Из ПакетДанных Цикл
			
			Если СтрокиСОшибками.НайтиПоЗначению(СтрокаПакетаДанных.LineID) = Неопределено Тогда
				ПланыОбмена.УдалитьРегистрациюИзменений(Узел, СтрокаПакетаДанных.Ссылка);
			КонецЕсли; 
			
		КонецЦикла; 
	КонецЕсли; 

КонецПроцедуры // УдалитьРегистрациюИзменений()

Функция ПолучитьИзмененныеОбъекты(Узел, ОбъектМетаданных)
	
	МассивОбъектов = Новый Массив;
	Выборка = ПланыОбмена.ВыбратьИзменения(Узел, 1, ОбъектМетаданных);
	Пока Выборка.Следующий() Цикл                                           
		ОбъектВыборки = Выборка.Получить();
		МассивОбъектов.Добавить(ОбъектВыборки.Ссылка);
	КонецЦикла;
	
	Возврат МассивОбъектов;
	
КонецФункции // ()

//СБОРКА ДАННЫХ
Функция СобратьДанные(ОбъектОбмена, Узел)

	Данные = Новый ТаблицаЗначений;
	
	Если ОбъектОбмена = "Клиенты" Тогда
		МассивОбъектов = ПолучитьИзмененныеОбъекты(Узел, Метаданные.Справочники.нсиКонтрагенты);
		Если МассивОбъектов.Количество() Тогда
			Данные = СобратьДанныеПоКлиентам(Узел, МассивОбъектов);
		КонецЕсли; 
	ИначеЕсли ОбъектОбмена = "Поставщики" Тогда
		МассивОбъектов = ПолучитьИзмененныеОбъекты(Узел, Метаданные.Справочники.нсиКонтрагенты);
		Если МассивОбъектов.Количество() Тогда
			Данные = СобратьДанныеПоПоставщикам(Узел, МассивОбъектов);
		КонецЕсли; 
	ИначеЕсли ОбъектОбмена = "ДоговорыПоставщиков" Тогда
		МассивОбъектов = ПолучитьИзмененныеОбъекты(Узел, Метаданные.Справочники.ДоговорыКонтрагентов);
		Если МассивОбъектов.Количество() Тогда
			Данные = СобратьДанныеПоДоговорамПоставщиков(Узел, МассивОбъектов);
		КонецЕсли; 
	ИначеЕсли ОбъектОбмена = "Номенклатура" Тогда
		МассивОбъектов = ПолучитьИзмененныеОбъекты(Узел, Метаданные.Справочники.нсиМТР);
		Если МассивОбъектов.Количество() Тогда
			Данные = СобратьДанныеПоНоменклатуре(Узел, МассивОбъектов);
		КонецЕсли; 
	ИначеЕсли ОбъектОбмена = "ЕдиницыИзмерения" Тогда
		МассивОбъектов = ПолучитьИзмененныеОбъекты(Узел, Метаданные.Справочники.ЕдиницыИзмерения);
		Если МассивОбъектов.Количество() Тогда
			Данные = СобратьДанныеПоЕдиницамИзмерения(Узел, МассивОбъектов);
		КонецЕсли; 
	ИначеЕсли ОбъектОбмена = "Спецификации" Тогда
		МассивОбъектов = ПолучитьИзмененныеОбъекты(Узел, Метаданные.Справочники.СпецификацииНоменклатуры);
		Если МассивОбъектов.Количество() Тогда
			Данные = СобратьДанныеПоСпецификациям(Узел, МассивОбъектов);
		КонецЕсли; 
	ИначеЕсли ОбъектОбмена = "ПоставщикиНоменклатуры" Тогда
		МассивОбъектов = ПолучитьИзмененныеОбъекты(Узел, Метаданные.Справочники.ПоставщикиТМЦ);
		Если МассивОбъектов.Количество() Тогда
			Данные = СобратьДанныеПоПоставщикамНоменклатуры(Узел, МассивОбъектов);
		КонецЕсли; 
	КонецЕсли;
	
	Данные.Колонки.Добавить("LineID");
	Для н=1 По Данные.Количество() Цикл
		Данные[н-1].LineID = н;
	КонецЦикла; 
	
	Возврат Данные;

КонецФункции // СобратьДанные()
 
Функция СобратьДанныеПоКлиентам(Узел, МассивОбъектов)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	нсиКонтрагенты.Код КАК Cust_ID,
		|	нсиКонтрагенты.ПолноеНаименование КАК Cust_Name,
		|	нсиКонтрагенты.Наименование КАК Cust_NameShrt,
		|	ВЫБОР
		|		КОГДА нсиКонтрагенты.ВходитВХолдинг
		|			ТОГДА ""Yes""
		|		ИНАЧЕ ""No""
		|	КОНЕЦ КАК InterComp,
		|	нсиКонтрагенты.Ссылка,
		|	нсиКонтрагенты.ИНН КАК INN,
		|	нсиКонтрагенты.КПП КАК KPP,
		|	нсиКонтрагенты.Код,
		|	нсиКонтрагенты.Наименование
		|ИЗ
		|	Справочник.нсиКонтрагенты КАК нсиКонтрагенты
		|ГДЕ
		|	нсиКонтрагенты.Ссылка В(&МассивОбъектов)
		|	И нсиКонтрагенты.Покупатель = ИСТИНА";
	
	Запрос.УстановитьПараметр("Узел", Узел);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	ТаблицаДанных.Колонки.Добавить("Cust_Code");
	
	Для каждого СтрокаТаблицы Из ТаблицаДанных Цикл
	
		СтрокаТаблицы.Cust_Code = Строка(СтрокаТаблицы.Ссылка.УникальныйИдентификатор());
	
	КонецЦикла;
	
	Возврат ТаблицаДанных;

КонецФункции // СобратьДанныеПоКлиентам()

Функция СобратьДанныеПоПоставщикам(Узел, МассивОбъектов)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	нсиКонтрагенты.Код КАК Vendor_ID,
		|	нсиКонтрагенты.ПолноеНаименование КАК Vend_Name,
		|	нсиКонтрагенты.Наименование КАК Vend_NameShrt,
		|	ВЫБОР
		|		КОГДА нсиКонтрагенты.СтатусМСФО = 0
		|			ТОГДА ""No""
		|		ИНАЧЕ ""Yes""
		|	КОНЕЦ КАК InterComp,
		|	нсиКонтрагенты.Ссылка,
		|	нсиКонтрагенты.НаименованиеEN КАК Vend_NameEng,
		|	ВЫБОР
		|		КОГДА нсиКонтрагенты.Нерезидент
		|			ТОГДА ""Yes""
		|		ИНАЧЕ ""No""
		|	КОНЕЦ КАК Foreign,
		|	нсиКонтрагенты.КодыSAPКредитор.(
		|		КредиторКодSAP,
		|		НомерСтроки
		|	),
		|	нсиКонтрагенты.ИНН КАК INN,
		|	нсиКонтрагенты.КПП КАК KPP,
		|	ЕСТЬNULL(нсиКонтрагенты.Страна.Код, """") КАК Country,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(КонтактнаяИнформацияАдрес.Представление КАК СТРОКА(200)), """") КАК Address,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(КонтактнаяИнформацияТелефон.Представление КАК СТРОКА(50)), """") КАК Phone,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(КонтактнаяИнформацияФакс.Представление КАК СТРОКА(50)), """") КАК Fax,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(КонтактнаяИнформацияEmail.Представление КАК СТРОКА(50)), """") КАК Email,
		|	нсиКонтрагенты.Код,
		|	нсиКонтрагенты.Наименование
		|ИЗ
		|	Справочник.нсиКонтрагенты КАК нсиКонтрагенты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформацияАдрес
		|		ПО ((ВЫРАЗИТЬ(КонтактнаяИнформацияАдрес.Объект КАК Справочник.нсиКонтрагенты)) = нсиКонтрагенты.Ссылка)
		|			И (КонтактнаяИнформацияАдрес.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
		|			И (КонтактнаяИнформацияАдрес.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформацияТелефон
		|		ПО ((ВЫРАЗИТЬ(КонтактнаяИнформацияТелефон.Объект КАК Справочник.нсиКонтрагенты)) = нсиКонтрагенты.Ссылка)
		|			И (КонтактнаяИнформацияТелефон.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
		|			И (КонтактнаяИнформацияТелефон.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформацияФакс
		|		ПО (нсиКонтрагенты.Ссылка = (ВЫРАЗИТЬ(КонтактнаяИнформацияФакс.Объект КАК Справочник.нсиКонтрагенты)))
		|			И (КонтактнаяИнформацияФакс.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Факс))
		|			И (КонтактнаяИнформацияФакс.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФаксКонтрагента))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформацияEmail
		|		ПО (нсиКонтрагенты.Ссылка = (ВЫРАЗИТЬ(КонтактнаяИнформацияEmail.Объект КАК Справочник.нсиКонтрагенты)))
		|			И (КонтактнаяИнформацияEmail.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
		|			И (КонтактнаяИнформацияEmail.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОбменаДокументами))
		|ГДЕ
		|	нсиКонтрагенты.Ссылка В(&МассивОбъектов)
		|	И нсиКонтрагенты.Поставщик = ИСТИНА";
	
	Запрос.УстановитьПараметр("Узел", Узел);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	ТаблицаДанных.Колонки.Добавить("Vendor");
	ТаблицаДанных.Колонки.Добавить("Vendor_SAP");
	
	Для каждого СтрокаТаблицы Из ТаблицаДанных Цикл
	
		СтрокаТаблицы.Vendor = Строка(СтрокаТаблицы.Ссылка.УникальныйИдентификатор());
		Vendor_SAP = "";
		Для каждого СтрокаКодовSAP Из СтрокаТаблицы.КодыSAPКредитор Цикл
			Vendor_SAP = Vendor_SAP+СтрокаКодовSAP.КредиторКодSAP+?(СтрокаКодовSAP.НомерСтроки<СтрокаТаблицы.КодыSAPКредитор.Количество(),",","");
		КонецЦикла; 
		СтрокаТаблицы.Vendor_SAP = Vendor_SAP;
		
	КонецЦикла;
	
	Возврат ТаблицаДанных;

КонецФункции // СобратьДанныеПоКлиентам()
 
Функция СобратьДанныеПоДоговорамПоставщиков(Узел, МассивОбъектов)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Номер КАК Agreem_Num,
		|	ДоговорыКонтрагентов.Наименование КАК Agreem_Name,
		|	ДоговорыКонтрагентов.Ссылка,
		|	ДоговорыКонтрагентов.Владелец,
		|	ЕСТЬNULL(ДоговорыКонтрагентов.ВалютаВзаиморасчетов.Код, """") КАК Currency,
		|	ДоговорыКонтрагентов.ДатаДоговора КАК Agreem_Date,
		|	ДоговорыКонтрагентов.ДатаНачалаДействия КАК DateFrom,
		|	ДоговорыКонтрагентов.ДатаОкончанияДействия КАК DateTo,
		|	ЕСТЬNULL(ДоговорыКонтрагентов.Incoterms.Код, """") КАК IncotermsКод,
		|	ДоговорыКонтрагентов.УсловиеПлатежа,
		|	ЕСТЬNULL(ДоговорыКонтрагентов.IncotermsМесто.Наименование, """") КАК IncotermsМестоНаименование,
		|	ЕСТЬNULL(ДоговорыКонтрагентов.IncotermsМесто.НаименованиеEN, """") КАК IncotermsМестоНаименованиеEN,
		|	ДоговорыКонтрагентов.Код,
		|	ДоговорыКонтрагентов.Код КАК Agreem_MDM,
		|	ДоговорыКонтрагентов.Наименование
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Ссылка В(&МассивОбъектов)";
	
	Запрос.УстановитьПараметр("Узел", Узел);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	ТаблицаДанных.Колонки.Добавить("VendAgreem");
	ТаблицаДанных.Колонки.Добавить("Vendor_Code");
	ТаблицаДанных.Колонки.Добавить("DeliveryTerm_RUS");
	ТаблицаДанных.Колонки.Добавить("DeliveryTerm_ENG");
	ТаблицаДанных.Колонки.Добавить("PaymTerm");
	
	Для каждого СтрокаТаблицы Из ТаблицаДанных Цикл
	
		СтрокаТаблицы.VendAgreem = Строка(СтрокаТаблицы.Ссылка.УникальныйИдентификатор());
		СтрокаТаблицы.Vendor_Code = Строка(СтрокаТаблицы.Владелец.УникальныйИдентификатор());
		СтрокаТаблицы.PaymTerm = Строка(СтрокаТаблицы.УсловиеПлатежа.УникальныйИдентификатор());
		
		СтрокаТаблицы.DeliveryTerm_RUS = СтрокаТаблицы.IncotermsКод+" "+СтрокаТаблицы.IncotermsМестоНаименование;
		СтрокаТаблицы.DeliveryTerm_ENG = СтрокаТаблицы.IncotermsКод+" "+СтрокаТаблицы.IncotermsМестоНаименованиеEN;
	
	КонецЦикла;
	
	Возврат ТаблицаДанных;

КонецФункции // СобратьДанныеПоКлиентам()

Функция СобратьДанныеПоНоменклатуре(Узел, МассивОбъектов)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	нсиМТР.Код КАК SKU_ID,
		|	нсиМТР.НаименованиеПолное КАК SKU_ShortName,
		|	нсиМТР.Наименование КАК SKU_NameRus,
		|	нсиМТР.КраткийТекстSAP КАК SKU_ShortNameSAP,
		|	нсиМТР.Ссылка,
		|	нсиМТР.LocalBrand,
		|	ЕСТЬNULL(нсиМТР.LocalBrand.Наименование, """") КАК BrandName,
		|	ЕСТЬNULL(нсиМТР.КодТНВЭД.Код, """") КАК TNVED,
		|	нсиМТР.Артикул КАК SKU_1C,
		|	ЕСТЬNULL(нсиМТР.БазоваяЕдиницаИзмерения.Код, """") КАК UnitOKEIPurch,
		|	ЕСТЬNULL(нсиМТР.БазоваяЕдиницаИзмерения.Код, """") КАК UnitOKEISale,
		|	ЕСТЬNULL(нсиМТР.БазоваяЕдиницаИзмерения.Код, """") КАК UnitOKEI,
		|	нсиМТР.СрокГодностиВДнях КАК BestBefore,
		|	ВЫБОР
		|		КОГДА нсиМТР.LocalMaterialType.ГотоваяПродукция
		|			ТОГДА ЕСТЬNULL(БазоваяЕИ_ТЧ.ОбъемМ3, 0)
		|		ИНАЧЕ ЕСТЬNULL(БазоваяЕИ.ОбъемМ3, 0)
		|	КОНЕЦ КАК Volume,
		|	ЕСТЬNULL(нсиМТР.LocalAlcoholContent.AlcoholContentNumber, 0) КАК PercAlc,
		|	ВЫБОР
		|		КОГДА нсиМТР.LocalMaterialType.ГотоваяПродукция
		|			ТОГДА ЕСТЬNULL(БазоваяЕИ_ТЧ.Вес, 0)
		|		ИНАЧЕ ЕСТЬNULL(БазоваяЕИ.Вес, 0)
		|	КОНЕЦ КАК Brutto,
		|	ВЫБОР
		|		КОГДА нсиМТР.LocalMaterialType.ГотоваяПродукция
		|			ТОГДА ЕСТЬNULL(ВидУпаковкиЕИ_ТЧ.Коэффициент, 0)
		|		ИНАЧЕ ЕСТЬNULL(нсиМТР.ВидУпаковки.Коэффициент, 0)
		|	КОНЕЦ КАК MultiPurch,
		|	ВЫБОР
		|		КОГДА нсиМТР.LocalMaterialType.ГотоваяПродукция
		|			ТОГДА ЕСТЬNULL(ВидУпаковкиЕИ_ТЧ.Коэффициент, 0)
		|		ИНАЧЕ ЕСТЬNULL(нсиМТР.ВидУпаковки.Коэффициент, 0)
		|	КОНЕЦ КАК MultiProd,
		|	ЕСТЬNULL(нсиМТР.СтранаПроисхождения.Код, """") КАК Country,
		|	ВЫБОР
		|		КОГДА нсиМТР.LocalMaterialType.ГотоваяПродукция
		|			ТОГДА ЕСТЬNULL(ВидУпаковкиЕИ_ТЧ.Коэффициент, 0)
		|		ИНАЧЕ ЕСТЬNULL(нсиМТР.ВидУпаковки.Коэффициент, 0)
		|	КОНЕЦ КАК MultiBox,
		|	ЕСТЬNULL(нсиМТР.LocalVolume.SizeNumber, 0) КАК BottleVol,
		|	нсиМТР.КодаSAP.(
		|		НомерСтроки,
		|		Код
		|	),
		|	ЕСТЬNULL(нсиМТР.LocalMaterialType.ГруппаДляПланирования, ЗНАЧЕНИЕ(Справочник.ГруппыДляПланирования.ПустаяСсылка)) КАК ГруппаДляПланирования,
		|	нсиМТР.ГруппаОборачиваемости,
		|	нсиМТР.КодSAP,
		|	нсиМТР.Код,
		|	нсиМТР.Наименование,
		|	нсиМТР.НаименованиеEN КАК SKU_NameEng,
		|	нсиМТР.LocalMaterialType
		|ИЗ
		|	Справочник.нсиМТР КАК нсиМТР
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения.ЕдиницыПроизводителей КАК БазоваяЕИ_ТЧ
		|		ПО нсиМТР.ОсновнойПроизводитель = БазоваяЕИ_ТЧ.Производитель
		|			И нсиМТР.БазоваяЕдиницаИзмерения = БазоваяЕИ_ТЧ.Ссылка.ЕдиницаПоКлассификатору
		|			И нсиМТР.Ссылка = БазоваяЕИ_ТЧ.Ссылка.Владелец
		|			И (ЕСТЬNULL(нсиМТР.LocalMaterialType.ГотоваяПродукция, ЛОЖЬ))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения.ЕдиницыПроизводителей КАК ВидУпаковкиЕИ_ТЧ
		|		ПО нсиМТР.ВидУпаковки = ВидУпаковкиЕИ_ТЧ.Ссылка
		|			И нсиМТР.ОсновнойПроизводитель = ВидУпаковкиЕИ_ТЧ.Производитель
		|			И (ЕСТЬNULL(нсиМТР.LocalMaterialType.ГотоваяПродукция, ЛОЖЬ))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК БазоваяЕИ
		|		ПО нсиМТР.БазоваяЕдиницаИзмерения = БазоваяЕИ.ЕдиницаПоКлассификатору
		|			И нсиМТР.Ссылка = БазоваяЕИ.Владелец
		|			И (НЕ ЕСТЬNULL(нсиМТР.LocalMaterialType.ГотоваяПродукция, ЛОЖЬ))
		|ГДЕ
		|	нсиМТР.Ссылка В(&МассивОбъектов)";
	
	Запрос.УстановитьПараметр("Узел", Узел);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	ТаблицаДанных.Колонки.Добавить("SKU");
	ТаблицаДанных.Колонки.Добавить("Brand");
	ТаблицаДанных.Колонки.Добавить("SKU_SAP");
	ТаблицаДанных.Колонки.Добавить("MaterialGroup");
	ТаблицаДанных.Колонки.Добавить("MaterialView");
	ТаблицаДанных.Колонки.Добавить("ABCDE");
	
	Для каждого СтрокаТаблицы Из ТаблицаДанных Цикл
	
		СтрокаТаблицы.SKU = Строка(СтрокаТаблицы.Ссылка.УникальныйИдентификатор());
		СтрокаТаблицы.Brand = Строка(СтрокаТаблицы.LocalBrand.УникальныйИдентификатор());
		СтрокаТаблицы.MaterialGroup = Строка(СтрокаТаблицы.ГруппаДляПланирования.УникальныйИдентификатор());
		СтрокаТаблицы.MaterialView = Строка(СтрокаТаблицы.LocalMaterialType.УникальныйИдентификатор());
		SKU_SAP = ?(СтрокаТаблицы.КодSAP = "","",СтрокаТаблицы.КодSAP+",");
		Для каждого СтрокаКодовSAP Из СтрокаТаблицы.КодаSAP Цикл
			SKU_SAP = SKU_SAP+СтрокаКодовSAP.Код+",";
		КонецЦикла;
		SKU_SAP = Лев(SKU_SAP,СтрДлина(SKU_SAP)-1);
		СтрокаТаблицы.SKU_SAP = SKU_SAP;
		
		ЗначениеПеречисления = СтрокаТаблицы.ГруппаОборачиваемости;
		Если ЗначениеЗаполнено(ЗначениеПеречисления) Тогда
			ИмяПеречисления = СтрокаТаблицы.ГруппаОборачиваемости.Метаданные().Имя;
			ИндексЗначенияПеречисления = Перечисления[ИмяПеречисления].Индекс(ЗначениеПеречисления);
			ИмяЗначенияПеречисления = Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
		Иначе
			ИмяЗначенияПеречисления = "";
		КонецЕсли; 
		СтрокаТаблицы.ABCDE = ИмяЗначенияПеречисления;
		
	КонецЦикла;
	
	Возврат ТаблицаДанных;

КонецФункции // СобратьДанныеПоКлиентам()

Функция СобратьДанныеПоЕдиницамИзмерения(Узел, МассивОбъектов)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕдиницыИзмерения.Ссылка,
		|	ЕдиницыИзмерения.Владелец,
		|	ВЫБОР
		|		КОГДА ЕдиницыИзмерения.ПометкаУдаления
		|			ТОГДА ""Yes""
		|		ИНАЧЕ ""No""
		|	КОНЕЦ КАК ToDelete,
		|	ЕСТЬNULL(ЕдиницыИзмерения.Владелец.БазоваяЕдиницаИзмерения.Код, """") КАК FromUnit,
		|	ЕСТЬNULL(ЕдиницыИзмерения.ЕдиницаПоКлассификатору.Код, """") КАК ToUnit,
		|	ВЫБОР
		|		КОГДА ЕдиницыИзмерения.Владелец.LocalMaterialType.ГотоваяПродукция
		|			ТОГДА ЕСТЬNULL(ЕдиницыИзмеренияЕдиницыПроизводителей.Коэффициент, 0)
		|		ИНАЧЕ ЕдиницыИзмерения.Коэффициент
		|	КОНЕЦ КАК Qty,
		|	ЕдиницыИзмерения.Код,
		|	ЕдиницыИзмерения.Наименование
		|ИЗ
		|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения.ЕдиницыПроизводителей КАК ЕдиницыИзмеренияЕдиницыПроизводителей
		|		ПО (ЕдиницыИзмеренияЕдиницыПроизводителей.Ссылка = ЕдиницыИзмерения.Ссылка)
		|			И (ЕдиницыИзмеренияЕдиницыПроизводителей.Производитель = ЕдиницыИзмерения.Владелец.ОсновнойПроизводитель)
		|ГДЕ
		|	ЕдиницыИзмерения.Ссылка В(&МассивОбъектов)
		|	И НЕ ЕдиницыИзмерения.ЕдиницаПоКлассификатору = ЕдиницыИзмерения.Владелец.БазоваяЕдиницаИзмерения";
	
	Запрос.УстановитьПараметр("Узел", Узел);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	ТаблицаДанных.Колонки.Добавить("SKU");
	
	Для каждого СтрокаТаблицы Из ТаблицаДанных Цикл
	
		СтрокаТаблицы.SKU = Строка(СтрокаТаблицы.Владелец.УникальныйИдентификатор());
	
	КонецЦикла;
	
	Возврат ТаблицаДанных;

КонецФункции // СобратьДанныеПоКлиентам()

Функция СобратьДанныеПоСпецификациям(Узел, МассивОбъектов)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СпецификацииНоменклатурыИсходныеКомплектующие.Ссылка,
		|	СпецификацииНоменклатурыИсходныеКомплектующие.Номенклатура КАК Комплектующая,
		|	СпецификацииНоменклатурыИсходныеКомплектующие.Количество КАК Qty,
		|	ЕСТЬNULL(СпецификацииНоменклатурыИсходныеКомплектующие.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код, """") КАК UnitOKEI,
		|	ВЫБОР
		|		КОГДА СпецификацииНоменклатурыИсходныеКомплектующие.Ссылка.Активная
		|			ТОГДА ""Yes""
		|		ИНАЧЕ ""No""
		|	КОНЕЦ КАК Active,
		|	СпецификацииНоменклатурыИсходныеКомплектующие.Ссылка.Склад КАК Склад,
		|	СпецификацииНоменклатурыИсходныеКомплектующие.Ссылка.Код КАК SpecMDM,
		|	СпецификацииНоменклатурыИсходныеКомплектующие.Ссылка.Наименование КАК SpecName,
		|	СпецификацииНоменклатурыИсходныеКомплектующие.Ссылка.Номенклатура КАК Продукция,
		|	СпецификацииНоменклатурыИсходныеКомплектующие.Ссылка.ДатаНачалаДействия КАК DateFrom,
		|	СпецификацииНоменклатурыИсходныеКомплектующие.Ссылка.ДатаОкончанияДействия КАК DateTo,
		|	ЕСТЬNULL(СпецификацииНоменклатурыИсходныеКомплектующие.Ссылка.Склад.Завод, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Завод,
		|	ВЫБОР
		|		КОГДА СпецификацииНоменклатурыИсходныеКомплектующие.Ссылка.ТипСпецификации = ЗНАЧЕНИЕ(Перечисление.ТипыСпецификаций.Базовая)
		|			ТОГДА ""Yes""
		|		ИНАЧЕ ""No""
		|	КОНЕЦ КАК Base,
		|	СпецификацииНоменклатурыИсходныеКомплектующие.Ссылка.ТочкаМаршрута,
		|	ЕСТЬNULL(СпецификацииНоменклатурыИсходныеКомплектующие.Ссылка.ТочкаМаршрута.Код, """") КАК ProdLine_ID,
		|	СпецификацииНоменклатурыИсходныеКомплектующие.Ссылка.Код,
		|	СпецификацииНоменклатурыИсходныеКомплектующие.Номенклатура.Наименование КАК Наименование,
		|	СпецификацииНоменклатурыВыходныеИзделия.Количество КАК MultyProd
		|ИЗ
		|	Справочник.СпецификацииНоменклатуры.ИсходныеКомплектующие КАК СпецификацииНоменклатурыИсходныеКомплектующие
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СпецификацииНоменклатуры.ВыходныеИзделия КАК СпецификацииНоменклатурыВыходныеИзделия
		|		ПО СпецификацииНоменклатурыИсходныеКомплектующие.Ссылка = СпецификацииНоменклатурыВыходныеИзделия.Ссылка
		|ГДЕ
		|	СпецификацииНоменклатурыИсходныеКомплектующие.Ссылка В(&МассивОбъектов)";
	
	Запрос.УстановитьПараметр("Узел", Узел);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	ТаблицаДанных.Колонки.Добавить("Spec");
	ТаблицаДанных.Колонки.Добавить("SKU_comp");
	ТаблицаДанных.Колонки.Добавить("SKU");
	ТаблицаДанных.Колонки.Добавить("LocationID");
	ТаблицаДанных.Колонки.Добавить("BU");
	ТаблицаДанных.Колонки.Добавить("ProdLine");
	
	Для каждого СтрокаТаблицы Из ТаблицаДанных Цикл
	
		СтрокаТаблицы.Spec = Строка(СтрокаТаблицы.Ссылка.УникальныйИдентификатор());
		СтрокаТаблицы.SKU_comp = Строка(СтрокаТаблицы.Комплектующая.УникальныйИдентификатор());
		СтрокаТаблицы.SKU = Строка(СтрокаТаблицы.Продукция.УникальныйИдентификатор());
		СтрокаТаблицы.LocationID = Строка(СтрокаТаблицы.Склад.УникальныйИдентификатор());
		СтрокаТаблицы.BU = Строка(СтрокаТаблицы.Завод.УникальныйИдентификатор());
		СтрокаТаблицы.ProdLine = Строка(СтрокаТаблицы.ТочкаМаршрута.УникальныйИдентификатор());
	
	КонецЦикла;
	
	Возврат ТаблицаДанных;

КонецФункции // СобратьДанныеПоКлиентам()

Функция СобратьДанныеПоПоставщикамНоменклатуры(Узел, МассивОбъектов)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоставщикиТМЦ.Ссылка,
		|	ПоставщикиТМЦ.Владелец,
		|	ПоставщикиТМЦ.Склад,
		|	ПоставщикиТМЦ.Поставщик,
		|	ВЫБОР
		|		КОГДА ПоставщикиТМЦ.ОсновнойПоставщик
		|			ТОГДА ""Yes""
		|		ИНАЧЕ ""No""
		|	КОНЕЦ КАК MainVendor,
		|	ЕСТЬNULL(нсиКонтрагентыОсновныеДоговораКонтрагентов.ДоговорКонтрагента, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК ОсновнойДоговор,
		|	ПоставщикиТМЦ.Код,
		|	ПоставщикиТМЦ.Представление КАК Наименование
		|ИЗ
		|	Справочник.ПоставщикиТМЦ КАК ПоставщикиТМЦ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.нсиКонтрагенты.ОсновныеДоговораКонтрагентов КАК нсиКонтрагентыОсновныеДоговораКонтрагентов
		|		ПО ПоставщикиТМЦ.Организация = нсиКонтрагентыОсновныеДоговораКонтрагентов.ДоговорКонтрагента.Организация
		|			И ПоставщикиТМЦ.Поставщик = нсиКонтрагентыОсновныеДоговораКонтрагентов.ДоговорКонтрагента.Владелец
		|ГДЕ
		|	ПоставщикиТМЦ.Ссылка В(&МассивОбъектов)";
	
	Запрос.УстановитьПараметр("Узел", Узел);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	ТаблицаДанных.Колонки.Добавить("SKU");
	ТаблицаДанных.Колонки.Добавить("Vendor");
	ТаблицаДанных.Колонки.Добавить("VendAgreem");
	ТаблицаДанных.Колонки.Добавить("LocationId");
	
	Для каждого СтрокаТаблицы Из ТаблицаДанных Цикл
	
		СтрокаТаблицы.SKU = Строка(СтрокаТаблицы.Владелец.УникальныйИдентификатор());
		СтрокаТаблицы.Vendor = Строка(СтрокаТаблицы.Поставщик.УникальныйИдентификатор());
		СтрокаТаблицы.VendAgreem = Строка(СтрокаТаблицы.ОсновнойДоговор.УникальныйИдентификатор());
		СтрокаТаблицы.LocationId = Строка(СтрокаТаблицы.Склад.УникальныйИдентификатор());
		
	КонецЦикла;
	
	Возврат ТаблицаДанных;

КонецФункции // СобратьДанныеПоКлиентам()
 
Процедура ЗаписатьСведенияВЖурналОбмена(ТипДанныхОбмена, СообщениеОбмена, ОшибкаОбмена = Ложь, Данные = Неопределено)

	ЖурналОбменаMDM = РегистрыСведений.ЖурналОбменаAX.СоздатьМенеджерЗаписи();
	ЖурналОбменаMDM.Период = ТекущаяДата();
	ЖурналОбменаMDM.ТипДанныхОбмена = ТипДанныхОбмена;
	ЖурналОбменаMDM.Данные = Данные;
	ЖурналОбменаMDM.СообщениеОбмена = СообщениеОбмена;
	ЖурналОбменаMDM.ОшибкаОбмена = ОшибкаОбмена;
	ЖурналОбменаMDM.Записать();
	
КонецПроцедуры // ЗаписатьСведенияВЖурналОбмена()
//SYNC Axapta MRP

