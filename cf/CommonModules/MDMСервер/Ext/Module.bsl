//КОНТАКТНАЯ ИНФОРМАЦИЯ
Процедура ЗаписатьКИУПП(СтруктураКИ, ВидКИ, ВладелецКИ) Экспорт

	МенеджерЗаписи = РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Тип = ВидКИ.Тип;
	МенеджерЗаписи.Вид = ВидКИ;
	МенеджерЗаписи.Объект = ВладелецКИ;
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтруктураКИ);
	МенеджерЗаписи.Записать();

КонецПроцедуры // ЗаписатьАдресУППНаСервере()

Функция ПолучитьСтруктуруКИУПП() Экспорт 

	НаборЗаписей = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
	КолонкиРС = НаборЗаписей.ВыгрузитьКолонки();
	
	СтруктураКИ = Новый Структура;
	Для каждого КолонкаРС Из КолонкиРС.Колонки Цикл
		СтруктураКИ.Вставить(КолонкаРС.Имя);
	КонецЦикла;
	
	Возврат СтруктураКИ;
	
КонецФункции // ПолучитьСтруктуруКИУПП()

//УЧАСТНИКИ ОБМЕНА
Процедура ЗаполнитьУчастниковОбмена(Форма) Экспорт 
	
	Ключ = Форма.Параметры.Ключ;
	
	ПараметрыВыбора = Новый Структура;
	Если Форма.Параметры.Свойство("ПараметрыВыбора", ПараметрыВыбора) 
		И ПараметрыВыбора.Количество()
		И НЕ ПараметрыВыбора.Свойство("Родитель") Тогда
		КонтейнерВладельца = Форма.Параметры.ПараметрыВыбора;
	Иначе	
		КонтейнерВладельца = Форма.Объект;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Обмен_МДМ_УПП.Ссылка КАК УзелОбмена,
		|	ЕСТЬNULL(УчастникиОбмена.ОбъектОбмена, &ОбъектОбмена) КАК ОбъектОбмена,
		|	ЕСТЬNULL(УчастникиОбмена.Обмен, ЛОЖЬ) КАК Обмен,
		|	ЕСТЬNULL(УчастникиОбменаВладелец.Обмен, ЛОЖЬ) КАК ОбменВладелец
		|ИЗ
		|	ПланОбмена.Обмен_МДМ_УПП КАК Обмен_МДМ_УПП
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчастникиОбмена КАК УчастникиОбмена
		|		ПО (УчастникиОбмена.УзелОбмена = Обмен_МДМ_УПП.Ссылка)
		|			И (УчастникиОбмена.ОбъектОбмена = &ОбъектОбмена)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчастникиОбмена КАК УчастникиОбменаВладелец
		|		ПО (&ДобавитьОбменВладельца)
		|			И (УчастникиОбменаВладелец.УзелОбмена = Обмен_МДМ_УПП.Ссылка)
		|			И (УчастникиОбменаВладелец.ОбъектОбмена = &Владелец)
		|ГДЕ
		|	Обмен_МДМ_УПП.ЭтотУзел = ЛОЖЬ
		|	И Обмен_МДМ_УПП.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Обмен_МДМ_УПП.Организация.Код";
	
	Запрос.УстановитьПараметр("ОбъектОбмена", Ключ);
	Если ТипЗнч(Ключ) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		Запрос.УстановитьПараметр("Владелец", КонтейнерВладельца.Владелец);
		Запрос.УстановитьПараметр("ДобавитьОбменВладельца", Истина);
	ИначеЕсли ТипЗнч(Ключ) = Тип("СправочникСсылка.СпецификацииНоменклатуры") Тогда
		Запрос.УстановитьПараметр("Владелец", КонтейнерВладельца.Номенклатура);
		Запрос.УстановитьПараметр("ДобавитьОбменВладельца", Истина);
	Иначе
		Запрос.УстановитьПараметр("Владелец", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		Запрос.УстановитьПараметр("ДобавитьОбменВладельца", Ложь);
	КонецЕсли; 
	Форма.УчастникиОбмена.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры // ЗаполнитьНаборЗаписейНаСервере()

Процедура ЗаписатьУчастниковОбмена(Форма) Экспорт 

	Ключ = Форма.Параметры.Ключ;
	Если НЕ Ключ.Пустая() Тогда
	
		УчастникиОбменаНЗ = РегистрыСведений.УчастникиОбмена.СоздатьНаборЗаписей();
		УчастникиОбменаНЗ.Отбор.ОбъектОбмена.Установить(Ключ);
		Если Форма.УчастникиОбмена.Количество() Тогда
			Если НЕ ЗначениеЗаполнено(Форма.УчастникиОбмена[0].ОбъектОбмена) Тогда
				Для н=0 По Форма.УчастникиОбмена.Количество()-1 Цикл
					Форма.УчастникиОбмена[н].ОбъектОбмена = Ключ;
				КонецЦикла; 
			КонецЕсли; 
		КонецЕсли; 
		
		Отбор = Новый Структура;
		Отбор.Вставить("ОбъектОбмена", Ключ);
		СтрокиКоллекции = Форма.УчастникиОбмена.НайтиСтроки(Отбор);
		Для каждого СтрокаКоллекции Из СтрокиКоллекции Цикл
			НоваяЗапись = УчастникиОбменаНЗ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись,СтрокаКоллекции,"ОбъектОбмена,УзелОбмена,Обмен");
		КонецЦикла;
		УчастникиОбменаНЗ.Записать();
	
	КонецЕсли; 

КонецПроцедуры
 
Процедура УстановитьУсловноеОформление(Форма) Экспорт 

	Ключ = Форма.Параметры.Ключ;
	Элементы = Форма.Элементы;
	Элементы.УчастникиОбменаОбменВладелец.Видимость = Ложь;
	УсловноеОформление = Форма.УсловноеОформление;
	
	ОбъектОбмена = Ключ;
	Если ТипЗнч(ОбъектОбмена) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
		ИЛИ ТипЗнч(ОбъектОбмена) = Тип("СправочникСсылка.СпецификацииНоменклатуры") Тогда
		
		УзелSAP = ПланыОбмена.Обмен_МДМ_УПП.УзелSAP();
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();            
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УчастникиОбмена.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УчастникиОбмена.УзелОбмена");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = УзелSAP;
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(128, 128, 128));
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();            
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УчастникиОбмена.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УчастникиОбмена.ОбменВладелец");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(128, 128, 128));
		
		Элементы.УчастникиОбменаОбменВладелец.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДоступностьУчастниковОбмена(Форма) Экспорт 

	Если Форма.Параметры.Ключ.Пустая() Тогда
		Форма.Элементы.Страницы.ТекущаяСтраница = Форма.Элементы.ГруппаУчастникиОбмена;
	КонецЕсли; 
	
	Форма.Элементы.ДекорацияУчастникиНедоступны.Видимость = Форма.Параметры.Ключ.Пустая();
	Форма.Элементы.УчастникиОбмена.Доступность = НЕ Форма.Параметры.Ключ.Пустая();
	
КонецПроцедуры
 
//СЛУЖЕБНЫЕ
Функция interface(Ссылка) Экспорт 

	Возврат Справочники[Ссылка.Метаданные().Имя];

КонецФункции // Interface()

Процедура ПроверитьСвязанныйСправочник(Ссылка, ИмяСправочника, ИмяРеквизита, ПроверяемыеРеквизиты) Экспорт

	Выборка = Справочники[ИмяСправочника].Выбрать(,Ссылка);
	Если Выборка.Следующий() Тогда
		ПроверяемыеРеквизиты.Добавить(ИмяРеквизита);
	КонецЕсли; 
	
КонецПроцедуры

Функция КодироватьСтрокуВUTF8(СтрокаURL) Экспорт 
	
	Возврат КодироватьСтроку(СтрокаURL,СпособКодированияСтроки.URLВКодировкеURL);
	
КонецФункции // ПреобразоватьСтрокуВUTF8()

Функция ПолучитьПараметрыПодключенияWS(МассивБаз) Экспорт

	//получим нужные нам строки подключений
	wsСсылка="http://xdto.rusalcohol.local/UT_W_2014/ws/ConnectionParametersWS.1cws?wsdl";
	wsПользователь="webRusalco";
	wsПароль="webRusalco123";
	
	Определение=Новый WSОпределения(wsСсылка,wsПользователь,wsПароль);
	Прокси=Новый WSПрокси(Определение,"http://www.roust.com/ConnectionParametersWS","ConnectionParametersWS","ConnectionParametersWSSoap");
	Прокси.Пользователь="webRusalco";
	Прокси.Пароль="webRusalco123";
	
	ПараметрыХДТО=СериализаторXDTO.ЗаписатьXDTO(МассивБаз);
	ПолученныеПараметры=Прокси.GetValueTable(ПараметрыХДТО);
	
	Возврат СериализаторXDTO.ПрочитатьXDTO(ПолученныеПараметры);

КонецФункции // ПолучитьПараметрыПодключения()
 
Функция НайтиОбъектПоGUID(DataType, GUID) Экспорт 

	ОтветСтруктура = Новый Структура;
	
	ТипДанных = ПолучитьТипДанных(DataType);
	ОбъектМетаданных = Метаданные.Справочники.Найти(ТипДанных);
	Если ОбъектМетаданных = Неопределено Тогда
		ОтветСтруктура.Вставить("error", "Тип данных не найден "+ТипДанных);
		Возврат СериализаторXDTO.ЗаписатьXDTO(ОтветСтруктура);
	КонецЕсли;
	
	СсылкаGUID = Справочники[ТипДанных].ПолучитьСсылку(GUID);
	
	Если ОбщегоНазначения.СсылкаСуществует(СсылкаGUID) Тогда
		
		ОтветСтруктура.Вставить("НаименованиеMDM", СсылкаGUID.Наименование);
		ОтветСтруктура.Вставить("КодMDM", СсылкаGUID.Код);
		ОтветСтруктура.Вставить("ПолнаяСинхронизацияMDM_MDM", СсылкаGUID.ПолнаяСинхронизацияMDM);
		ОтветСтруктура.Вставить("GUID_MDM", Строка(GUID));
		
		Владельцы = ОбъектМетаданных.Владельцы;
		Если Владельцы.Количество() Тогда  
			ОтветСтруктура.Вставить("ВладелецGUID", Строка(СсылкаGUID.Владелец.УникальныйИдентификатор()));
		КонецЕсли;
	Иначе
		ОтветСтруктура.Вставить("error", "Элемент с таким GUID не найден");
	КонецЕсли;
	
	Возврат СериализаторXDTO.ЗаписатьXDTO(ОтветСтруктура);

КонецФункции // НайтиОбъектПоGUID()

Функция СоздатьОбъектMDM(DataType, Description, IsFolder, OwnerGUID, OwnerDataType) Экспорт 
	
	ОтветСтруктура = Новый Структура;
	
	ТипДанных = ПолучитьТипДанных(DataType);
	ОбъектМетаданных = Метаданные.Справочники.Найти(ТипДанных);
	Если ОбъектМетаданных = Неопределено Тогда
		ОтветСтруктура.Вставить("error", "Тип данных не найден "+ТипДанных);
		Возврат СериализаторXDTO.ЗаписатьXDTO(ОтветСтруктура);
	КонецЕсли;
	
	Владельцы = ОбъектМетаданных.Владельцы;
	
	Если Владельцы.Количество() Тогда
		Если ЗначениеЗаполнено(OwnerGUID)
			И ЗначениеЗаполнено(OwnerDataType) Тогда
			
			ТипДанныхВладелец = ПолучитьТипДанных(OwnerDataType);
			ОбъектМетаданныхВладелец = Метаданные.Справочники.Найти(ТипДанныхВладелец);
			Если ОбъектМетаданныхВладелец = Неопределено Тогда
				ОтветСтруктура.Вставить("error", "Тип данных владельца не найден "+ТипДанныхВладелец);
				Возврат СериализаторXDTO.ЗаписатьXDTO(ОтветСтруктура);
			Иначе
				ВладелецСсылка = Справочники[ТипДанныхВладелец].ПолучитьСсылку(OwnerGUID);
				Если НЕ ОбщегоНазначения.СсылкаСуществует(ВладелецСсылка) Тогда
					ОтветСтруктура.Вставить("error", "Не найден владелец по GUID "+OwnerGUID);
					Возврат СериализаторXDTO.ЗаписатьXDTO(ОтветСтруктура);
				КонецЕсли; 
			КонецЕсли;
		Иначе
			ОтветСтруктура.Вставить("error", "Не заполнены данные по владельцу");
			Возврат СериализаторXDTO.ЗаписатьXDTO(ОтветСтруктура);
		КонецЕсли; 
	КонецЕсли;
	
	Если IsFolder Тогда
		Объект = Справочники[ТипДанных].СоздатьГруппу();
	Иначе
		Объект = Справочники[ТипДанных].СоздатьЭлемент();
	КонецЕсли; 
	
	Если Владельцы.Количество() Тогда
		Объект.Владелец = ВладелецСсылка;
	КонецЕсли;
	
	Объект.УстановитьНовыйКод();
	
	Объект.Наименование = Description;
	
	Попытка
		Объект.Записать();
		
		ОтветСтруктура.Вставить("GUID_MDM", Строка(Объект.Ссылка.УникальныйИдентификатор()));
		ОтветСтруктура.Вставить("НаименованиеMDM", Объект.Наименование);
		ОтветСтруктура.Вставить("КодMDM", Объект.Код);
		ОтветСтруктура.Вставить("ПолнаяСинхронизацияMDM_MDM", Объект.ПолнаяСинхронизацияMDM);
		
	Исключение
		ОтветСтруктура.Вставить("error", ОписаниеОшибки());
	КонецПопытки;
	
	Возврат СериализаторXDTO.ЗаписатьXDTO(ОтветСтруктура);

КонецФункции // СоздатьОбъектMDM()

Функция ПолучитьТипДанных(DataType)

	ОтличающиесяТипы = ПолучитьСоответствиеОтличающихсяТиповУПП_MDM();
	
	ТипДанных = Неопределено;
	Если НЕ ОтличающиесяТипы.Свойство(DataType, ТипДанных) Тогда
		ТипДанных = DataType;
	КонецЕсли;
	
	Возврат ТипДанных;

КонецФункции // ПолучитьТипДанных()
 
Функция ПолучитьСоответствиеОтличающихсяТиповУПП_MDM() Экспорт 

	СоответствиеТипов = Новый Структура;
	
	СоответствиеТипов.Вставить("Контрагенты", "нсиКонтрагенты");
	СоответствиеТипов.Вставить("Номенклатура", "нсиМТР");
	СоответствиеТипов.Вставить("БанковскиеСчета", "нсиБанковскиеСчета");
	
	Возврат СоответствиеТипов;

КонецФункции // ПолучитьСоответствиеТиповУПП_MDM()
