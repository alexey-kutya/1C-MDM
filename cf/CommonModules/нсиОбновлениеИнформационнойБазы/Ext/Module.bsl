////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы демонстрационной конфигурации (БиблиотекаСтандартныхПодсистемДемо).
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// См. описание в общем модуле ОбновлениеИнформационнойБазыБСП.
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя = "УправлениеНСИ";
	Описание.Версия = "2.0.1.9";
	
	// Требуется библиотека стандартных подсистем.
	Описание.ТребуемыеПодсистемы.Добавить("СтандартныеПодсистемы");
	Описание.ДобавлятьОбработчикиСлужебныхСобытий = Истина;
	Описание.ОсновнойСерверныйМодуль = "нсиОбновлениеИнформационнойБазы";
КонецПроцедуры


// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
//
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	
	// СЕРВЕРНЫЕ ОБРАБОТЧИКИ.
	СерверныеОбработчики["СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления"].Добавить(
		"нсиОбновлениеИнформационнойБазы");
		
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре.
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.РежимВыполнения     = "Монопольно";
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	// Обработчики, выполняемые при каждом обновлении ИБ.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.УправлениеОбработчиками = Истина;
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "нсиОбновлениеИнформационнойБазы.ВыполнятьВсегдаПриСменеВерсии";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Процедура = "нсиОбновлениеИнформационнойБазы.ОбработчикСОшибкой";
	Обработчик.РежимВыполнения = "Монопольно";
	
	// Обработчики, выполняемые при заполнении пустой ИБ.
	//
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "нсиОбновлениеИнформационнойБазы.ПервыйЗапуск";
	
	// Обработчики, выполняемые при заполнении пустой ИБ и при переходе на новую версию.
	//
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.4.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "нсиОбновлениеИнформационнойБазы.ОбновитьПредопределенныеВидыКонтактнойИнформации";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.Приоритет = 1;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.2";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "нсиОбновлениеИнформационнойБазы.ПерейтиНаВерсию_2_0_1_2";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.Приоритет = 1;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.3";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "нсиОбновлениеИнформационнойБазы.ПерейтиНаВерсию_2_0_1_3";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.Приоритет = 1;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.4";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "нсиОбновлениеИнформационнойБазы.ПерейтиНаВерсию_2_0_1_4";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.Приоритет = 1;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.5";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "нсиОбновлениеИнформационнойБазы.ПерейтиНаВерсию_2_0_1_5";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.Приоритет = 1;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.8";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "нсиОбновлениеИнформационнойБазы.ПерейтиНаВерсию_2_0_1_8";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.Приоритет = 1;
	
КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - если установить Истина, то будет выведена форма
//                                с описанием обновлений. По умолчанию, Истина.
//                                Возвращаемое значение.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	МакетИзменений = ПолучитьОбщийМакет("нсиОписаниеИзменений");
	Макет.Вывести(МакетИзменений);
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//                                           или "*", если нужно выполнять при переходе с любой конфигурации.
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы
//                                           ПредыдущееИмяКонфигурации.
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации = "БиблиотекаСтандартныхПодсистемДемоБазовая";
	Обработчик.Процедура = "_ДемоОбновлениеИнформационнойБазыБСП.ПерейтиСБазовойВерсииНаПРОФ";
	
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует
//        указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, 
	Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
	Если ПредыдущееИмяКонфигурации = "ПредыдущееИмяКонфигурацииБазовая" Тогда
		Параметры.ВерсияКонфигурации = ПредыдущаяВерсияКонфигурации;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Заполнение пустой ИБ

// Демонстрирует процедуру-обработчик обновления и первоначального заполнения
// данных ИБ, которая выполняется однократно при переходе на версию 1.0.0.0.
//
Процедура ПервыйЗапуск() Экспорт
	
	// Код для первоначального заполнения информационной базы.
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обновление ИБ

// Демонстрирует процедуру-обработчик обновления данных ИБ, 
// которая выполняется каждый раз при смене версии конфигурации.
//
Процедура ВыполнятьВсегдаПриСменеВерсии(Параметры = Неопределено) Экспорт
	
	// Проверка необходимости обновления критичных общих данных.
	ТребуетсяОбновитьКритичныеОбщиеДанные = Ложь;
	// Конец Проверка необходимости обновления критичных общих данных.
	Если ТребуетсяОбновитьКритичныеОбщиеДанные Тогда
		Если Параметры <> Неопределено И НЕ Параметры.МонопольныйРежим Тогда
			Параметры.МонопольныйРежим = Истина;
			Возврат;
		КонецЕсли;
		// Код обновления критичных общих данных.
	КонецЕсли;
	
КонецПроцедуры

// Демо-пример установки значений реквизитов предопределенных элементов справочника.
// РолиИсполнителей.
//
Процедура ИнициализироватьРолиИсполнителей() Экспорт
		
КонецПроцедуры

// Процедура выполняет заполнение справочника Валюты для новой области данных.
//
Процедура ВыполнитьПервоначальноеЗаполнениеВалют() Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		СписокВалют = Новый Массив; 
		СписокВалют.Добавить("840");
		СписокВалют.Добавить("643");
		СписокВалют.Добавить("978");
		Ссылки = РаботаСКурсамиВалют.ДобавитьВалютыПоКоду(СписокВалют);
	КонецЕсли;

КонецПроцедуры

// Конвертация имен разделов на ссылки справочника ИОМ 
// для подсистемы "Дополнительные отчеты и обработки".
//
Процедура ОбновитьДополнительныеОбработки_2_0_1_5() Экспорт
	СоответствиеИменКомандРазделам = Новый Соответствие;
	
	СоответствиеИменКомандРазделам.Вставить(
		"_ДемоДополнительныеОбработкиРабочийСтол", 
		ДополнительныеОтчетыИОбработкиКлиентСервер.ИдентификаторРабочегоСтола());
	
	СоответствиеИменКомандРазделам.Вставить(
		"_ДемоДополнительныеОбработкиАдминистрирование", 
		Метаданные.Подсистемы.Администрирование);
	
	СоответствиеИменКомандРазделам.Вставить(
		"_ДемоДополнительныеОтчетыРабочийСтол", 
		ДополнительныеОтчетыИОбработкиКлиентСервер.ИдентификаторРабочегоСтола());
	
	СоответствиеИменКомандРазделам.Вставить(
		"_ДемоДополнительныеОтчетыАдминистрирование", 
		Метаданные.Подсистемы.Администрирование);
		
	ДополнительныеОтчетыИОбработки.ЗаменитьИменаРазделовНаИдентификаторы(СоответствиеИменКомандРазделам);
КонецПроцедуры

// Обновляет значения реквизитов предопределенных видов контактной информации.
Процедура ОбновитьПредопределенныеВидыКонтактнойИнформации() Экспорт
	
	Если Не ЗначениеЗаполнено(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.ТелефонПользователя")) Тогда 
		Об = Справочники.ВидыКонтактнойИнформации.СоздатьЭлемент();
		Об.ИмяПредопределенныхДанных = "ТелефонПользователя";
		Об.Наименование = Об.ИмяПредопределенныхДанных;
		Об.Записать();
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.EmailПользователя")) Тогда 
		Об = Справочники.ВидыКонтактнойИнформации.СоздатьЭлемент();
		Об.ИмяПредопределенныхДанных = "EmailПользователя";
		Об.Наименование = Об.ИмяПредопределенныхДанных;
		Об.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Тестовый обработчик, предназначенный для имитации ошибки при обновлении.
//
Процедура ОбработчикСОшибкой(Параметр=Неопределено) Экспорт 
	
	ИмитироватьОшибку = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ОбновлениеИБ", "ИмитироватьОшибкуПриОбновлении", , ИмяПользователя());
	Если ИмитироватьОшибку = Истина Тогда
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ОбновлениеИБ",
			"ИмитироватьОшибкуПриОбновлении", Ложь, ИмяПользователя());
		ТекстСообщения = НСтр("ru = 'Процедура ОбработчикСОшибкой выполнилась с ошибкой.'");
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,,
			ТекстСообщения);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

// Заполнить значение констант ИспользоватьНесколькоОрганизаций и _ДемоОсновнаяОрганизация.
// 
Процедура ЗаполнитьКонстантыДляОрганизаций() Экспорт
	
	Константы.ИспользоватьНесколькоОрганизаций.Установить(Справочники.Организации.КоличествоОрганизаций() > 1);
	
КонецПроцедуры

// Обновляет значения реквизитов предопределенных ключевых операций.
Процедура ОбновитьПредопределенныеКлючевыеОперации() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КлючевыеОперации.Ссылка,
	               |	КлючевыеОперации.ИмяПредопределенныхДанных
	               |ИЗ
	               |	Справочник.КлючевыеОперации КАК КлючевыеОперации
	               |ГДЕ
	               |	КлючевыеОперации.Имя = """"
	               |	И КлючевыеОперации.Предопределенный";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		КлючеваяОперация = Выборка.Ссылка.ПолучитьОбъект();
		КлючеваяОперация.Имя = Выборка.ИмяПредопределенныхДанных;
		КлючеваяОперация.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Заполнить реквизит ГруппаДоступа у справочников содержащих группы значений доступа,
// в данном случае у справочников _ДемоГруппыДоступаНоменклатуры, _ДемоГруппыДоступаПартнеров,
// чтобы использовать ограничение доступа этих справочников.
Процедура ЗаполнитьРеквизитГруппаДоступаУСправочниковГруппЗначенийДоступа() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	_ДемоГруппыДоступаНоменклатуры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник._ДемоГруппыДоступаНоменклатуры КАК _ДемоГруппыДоступаНоменклатуры
	|ГДЕ
	|	_ДемоГруппыДоступаНоменклатуры.ГруппаДоступа <> _ДемоГруппыДоступаНоменклатуры.Ссылка
	|	И НЕ _ДемоГруппыДоступаНоменклатуры.ЭтоГруппа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	_ДемоГруппыДоступаПартнеров.Ссылка
	|ИЗ
	|	Справочник._ДемоГруппыДоступаПартнеров КАК _ДемоГруппыДоступаПартнеров
	|ГДЕ
	|	_ДемоГруппыДоступаПартнеров.ГруппаДоступа <> _ДемоГруппыДоступаПартнеров.Ссылка
	|	И НЕ _ДемоГруппыДоступаПартнеров.ЭтоГруппа";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.ГруппаДоступа = Объект.Ссылка;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
	КонецЦикла;
	
КонецПроцедуры

// Пример обработчиков отложенного обновления.

// Восстанавливает движения проведенных документов.
//
Процедура ВосстановитьДвиженияДокументов(Параметры) Экспорт
	
	Запрос = Новый Запрос(" 
		|ВЫБРАТЬ ПЕРВЫЕ 100
		|	ПорцияДляОбработки.Ссылка          КАК Ссылка,
		|	ПорцияДляОбработки.РегистрДвижений КАК РегистрДвижений
		|ИЗ (
		|
		|	ВЫБРАТЬ ПЕРВЫЕ 100
		|		Документы.Ссылка  КАК Ссылка,
		|		""_ДемоОсновной"" КАК РегистрДвижений
		|	ИЗ
		|		Документ._ДемоПоступлениеТоваров КАК Документы,
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		Документ._ДемоПоступлениеТоваров.Товары КАК ИсточникДвижений
		|	ПО 
		|		ИсточникДвижений.Ссылка = Документы.Ссылка
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрБухгалтерии._ДемоОсновной КАК Движения
		|	ПО 
		|		Движения.Регистратор ССЫЛКА Документ._ДемоПоступлениеТоваров
		|		И Документы.Ссылка = Движения.Регистратор
		|	ГДЕ
		|		Документы.Проведен
		|	СГРУППИРОВАТЬ ПО
		|		Документы.Ссылка
		|	ИМЕЮЩИЕ
		|		КОЛИЧЕСТВО(Движения.Регистратор) = 0
		|
		|	ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 100
		|		Документы.Ссылка  КАК Ссылка,
		|		""_ДемоОсновной"" КАК РегистрДвижений
		|	ИЗ
		|		Документ._ДемоРеализацияТоваров КАК Документы,
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		Документ._ДемоРеализацияТоваров.Товары КАК ИсточникДвижений
		|	ПО 
		|		ИсточникДвижений.Ссылка = Документы.Ссылка
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрБухгалтерии._ДемоОсновной КАК Движения
		|	ПО 
		|		Движения.Регистратор ССЫЛКА Документ._ДемоРеализацияТоваров
		|		И Документы.Ссылка = Движения.Регистратор
		|	ГДЕ
		|		Документы.Проведен
		|	СГРУППИРОВАТЬ ПО
		|		Документы.Ссылка
		|	ИМЕЮЩИЕ
		|		КОЛИЧЕСТВО(Движения.Регистратор) = 0
		|
		|	ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ПЕРВЫЕ 100
		|		Документы.Ссылка            КАК Ссылка,
		|		""_ДемоОсновныеНачисления"" КАК РегистрДвижений
		|	ИЗ
		|		Документ._ДемоНачислениеЗарплаты КАК Документы,
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		Документ._ДемоНачислениеЗарплаты.Зарплата КАК ИсточникДвижений
		|	ПО 
		|		ИсточникДвижений.Ссылка = Документы.Ссылка
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрРасчета._ДемоОсновныеНачисления КАК Движения
		|	ПО 
		|		Движения.Регистратор ССЫЛКА Документ._ДемоНачислениеЗарплаты
		|		И Документы.Ссылка = Движения.Регистратор
		|	ГДЕ
		|		Документы.Проведен
		|	СГРУППИРОВАТЬ ПО
		|		Документы.Ссылка
		|	ИМЕЮЩИЕ
		|		КОЛИЧЕСТВО(Движения.Регистратор) = 0
		|
		|) КАК ПорцияДляОбработки
		|");
		
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	КоличествоОшибок = 0;
	Обработано       = 0;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекущийДокумент = Выборка.Ссылка;
		Попытка
			ВосстановитьДвиженияДокумента(ТекущийДокумент, Выборка.РегистрДвижений);
			Обработано = Обработано + 1;
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось восстановить движения документа %1 по причине %2'"), 
					ТекущийДокумент, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				ТекущийДокумент.Метаданные(), ТекущийДокумент, ТекстСообщения);
				
			КоличествоОшибок = КоличествоОшибок + 1;
		КонецПопытки;
	КонецЦикла;
	
	Если Обработано = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре ""ВосстановитьДвиженияДокументов"" не удалось обработать некоторые документы (пропущены): %1'"), 
				КоличествоОшибок);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Процедура ""ВосстановитьДвиженияДокументов"" обработала очередную порцию документов: 100'"));
	
КонецПроцедуры

// Перепроводит один документ, если тот еще не обработан.
//
Процедура ВосстановитьДвиженияДокумента(Знач ТекущийДокумент, Знач РегистрДвижений)
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить( ТекущийДокумент.Метаданные().ПолноеИмя() );
	ЭлементБлокировки.УстановитьЗначение("Ссылка", ТекущийДокумент);
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		
		ДокументОбъект = ТекущийДокумент.ПолучитьОбъект();
		Если ДокументОбъект <> Неопределено И ДокументОбъект.Движения[РегистрДвижений].Количество() = 0 Тогда
			// Не удален и все еще нет движений.
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Тестовые обработчики отложенного обновления.

// Тестовый обработчик отложенного обновления.
//
Процедура ТестированиеОтложенногоОбновления(Параметры) Экспорт
	
	ИмитироватьОшибку = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ОтложенноеОбновлениеИБ", "ИмитироватьОшибку");
	Если ИмитироватьОшибку = Истина Тогда
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ОтложенноеОбновлениеИБ", "ИмитироватьОшибку", Ложь);
		ВызватьИсключение НСтр("ru = 'Процедура ТестированиеОтложенногоОбновления завершилась с ошибкой.'");
	КонецЕсли;
	
КонецПроцедуры

// Пример перехода с конфигурации с именем "БиблиотекаСтандартныхПодсистемДемоБазовая".
// 
Процедура ПерейтиСБазовойВерсииНаПРОФ() Экспорт
	
	ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Выполнен обработчик перехода ПерейтиСБазовойВерсииНаПРОФ'", Метаданные.ОсновнойЯзык.КодЯзыка));
	
КонецПроцедуры

// Переход на версию 2.0.1.2
//
Процедура ПерейтиНаВерсию_2_0_1_2() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ГруппыЗначенийДоступа.ЗначениеДоступа,
		|	ГруппыЗначенийДоступа.ГруппаЗначенийДоступа,
		|	ГруппыЗначенийДоступа.ГруппаДанных
		|ИЗ
		|	РегистрСведений.ГруппыЗначенийДоступа КАК ГруппыЗначенийДоступа"
	);
	Набор = РегистрыСведений.ГруппыЗначенийДоступа.СоздатьНаборЗаписей();
	Набор.Загрузить(Запрос.Выполнить().Выгрузить());
	Набор.Записать();
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	НазначениеДополнительныхОбработок.ОбъектНазначения,
		|	НазначениеДополнительныхОбработок.ТипФормы,
		|	МАКСИМУМ(НазначениеДополнительныхОбработок.ИспользоватьЗаполнениеОбъекта) КАК ИспользоватьЗаполнениеОбъекта,
		|	МАКСИМУМ(НазначениеДополнительныхОбработок.ИспользоватьОтчеты) КАК ИспользоватьОтчеты,
		|	МАКСИМУМ(НазначениеДополнительныхОбработок.ИспользоватьСозданиеСвязанныхОбъектов) КАК ИспользоватьСозданиеСвязанныхОбъектов
		|ИЗ
		|	РегистрСведений.НазначениеДополнительныхОбработок КАК НазначениеДополнительныхОбработок
		|
		|СГРУППИРОВАТЬ ПО
		|	НазначениеДополнительныхОбработок.ОбъектНазначения,
		|	НазначениеДополнительныхОбработок.ТипФормы"
	);
	Набор = РегистрыСведений.НазначениеДополнительныхОбработок.СоздатьНаборЗаписей();
	Набор.Загрузить(Запрос.Выполнить().Выгрузить());
	Набор.Записать();
	
	ОбновитьПредопределенныеВидыКонтактнойИнформацииКонтрагентов();
	
	ЗафиксироватьТранзакцию();
	
	ОбновитьСтруктуруУниверсальногоХранилища_2_0_1_2();
	
КонецПроцедуры

// Переход на версию 2.0.1.3
//
Процедура ПерейтиНаВерсию_2_0_1_3() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	нсиКлассификаторПродукции.Ссылка КАК Объект
		|ИЗ
		|	Справочник.нсиКлассификаторПродукции КАК нсиКлассификаторПродукции
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.нсиСтатусыОбработкиСправочников КАК нсиСтатусыОбработкиСправочников
		|		ПО нсиКлассификаторПродукции.Ссылка = нсиСтатусыОбработкиСправочников.Объект
		|ГДЕ
		|	нсиСтатусыОбработкиСправочников.Объект ЕСТЬ NULL ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выгрузить();
	
	МЗ = РегистрыСведений.нсиСтатусыОбработкиСправочников.СоздатьНаборЗаписей();
	МЗ.Загрузить(РезультатЗапроса.Выгрузить());
	МЗ.Записать(Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	нсиКлассификаторУслуг.Ссылка КАК Объект
		|ИЗ
		|	Справочник.нсиКлассификаторУслуг КАК нсиКлассификаторУслуг
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.нсиСтатусыОбработкиСправочников КАК нсиСтатусыОбработкиСправочников
		|		ПО нсиКлассификаторУслуг.Ссылка = нсиСтатусыОбработкиСправочников.Объект
		|ГДЕ
		|	нсиСтатусыОбработкиСправочников.Объект ЕСТЬ NULL ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выгрузить();
	
	МЗ = РегистрыСведений.нсиСтатусыОбработкиСправочников.СоздатьНаборЗаписей();
	МЗ.Загрузить(РезультатЗапроса.Выгрузить());
	МЗ.Записать(Ложь);
	
КонецПроцедуры

// Переход на версию 2.0.1.4
//
Процедура ПерейтиНаВерсию_2_0_1_4() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого Справочник Из Метаданные.Справочники Цикл
		Если Метаданные.ОпределяемыеТипы.нсиСправочникиВедущиесяПоЗаявкам.Тип.СодержитТип(Тип("СправочникСсылка."+Справочник.Имя)) 
			И Справочник.Имя <> "нсиУниверсальныйФункциональныйСправочник"
			И Справочник.Имя <> "нсиУниверсальныйКлассификатор" Тогда
			
			МЗ = РегистрыСведений.нсиДоступностьОперацийПоТипамОбъектов.СоздатьМенеджерЗаписи();
			МЗ.ТипОбъекта = "Справочник."+Справочник.Имя;
			Если Справочник.Имя = "нсиКлассификаторПродукции"
				Или Справочник.Имя = "нсиКлассификаторУслуг" Тогда 
				
				МЗ.ИспользоватьРучнуюОбработкуСправочников = Истина;
				МЗ.ИспользоватьБуфер = Ложь;
				МЗ.ИспользоватьЗаявки = Ложь;
			Иначе
				МЗ.ИспользоватьРучнуюОбработкуСправочников = Ложь;
				МЗ.ИспользоватьБуфер = Истина;
				МЗ.ИспользоватьЗаявки = Истина;
			КонецЕсли;
			МЗ.Записать();
		КонецЕсли;
	КонецЦикла;
	
	
КонецПроцедуры

// Переход на версию 2.0.1.5
//
Процедура ПерейтиНаВерсию_2_0_1_5() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	нсиИзменениеЭлементаСправочника.Ссылка,
	|	нсиИзменениеЭлементаСправочника.Предмет,
	|	нсиИзменениеЭлементаСправочника.ПредметОригинал
	|ИЗ
	|	БизнесПроцесс.нсиИзменениеЭлементаСправочника КАК нсиИзменениеЭлементаСправочника
	|ГДЕ
	|	нсиИзменениеЭлементаСправочника.Предмет.ЭтоМакет = ИСТИНА";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.ПредметОригинал) тогда
			Продолжить;
		КонецЕсли;	
		
		НачатьТранзакцию();
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.нсиСтатусыОбработкиСправочников");
		ЭлементБлокировки.УстановитьЗначение("Объект", Выборка.Предмет);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать(); 
		
		МенеджерЗаписи = РегистрыСведений.нсиСтатусыОбработкиСправочников.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Объект = Выборка.Предмет;
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() 
			И Не ЗначениеЗаполнено(МенеджерЗаписи.ИзменяемыйОбъект) тогда
			МенеджерЗаписи.ИзменяемыйОбъект = Выборка.ПредметОригинал;	
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	КонецЦикла;
	
КонецПроцедуры

// Переход на версию 2.0.1.8
//
Процедура ПерейтиНаВерсию_2_0_1_8() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	нсиБанковскиеСчета.Ссылка
		|ИЗ
		|	Справочник.нсиБанковскиеСчета КАК нсиБанковскиеСчета
		|ГДЕ
		|	нсиБанковскиеСчета.ТипПозиции = &ТипПозиции
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	нсиДоговорыСПокупателями.Ссылка
		|ИЗ
		|	Справочник.нсиДоговорыСПокупателями КАК нсиДоговорыСПокупателями
		|ГДЕ
		|	нсиДоговорыСПокупателями.ТипПозиции = &ТипПозиции
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	нсиДоговорыСПоставщиками.Ссылка
		|ИЗ
		|	Справочник.нсиДоговорыСПоставщиками КАК нсиДоговорыСПоставщиками
		|ГДЕ
		|	нсиДоговорыСПоставщиками.ТипПозиции = &ТипПозиции
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	нсиКонтрагенты.Ссылка
		|ИЗ
		|	Справочник.нсиКонтрагенты КАК нсиКонтрагенты
		|ГДЕ
		|	нсиКонтрагенты.ТипПозиции = &ТипПозиции
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	нсиМТР.Ссылка
		|ИЗ
		|	Справочник.нсиМТР КАК нсиМТР
		|ГДЕ
		|	нсиМТР.ТипПозиции = &ТипПозиции
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	нсиУниверсальныйФункциональныйСправочник.Ссылка
		|ИЗ
		|	Справочник.нсиУниверсальныйФункциональныйСправочник КАК нсиУниверсальныйФункциональныйСправочник
		|ГДЕ
		|	нсиУниверсальныйФункциональныйСправочник.ТипПозиции = &ТипПозиции
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	нсиУслуги.Ссылка
		|ИЗ
		|	Справочник.нсиУслуги КАК нсиУслуги
		|ГДЕ
		|	нсиУслуги.ТипПозиции = &ТипПозиции";
	
	Запрос.УстановитьПараметр("ТипПозиции", Перечисления.нсиТипыПозицийСправочников.Удалить_ОдиночнаяПозиция);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Объект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		
		Объект.ОбменДанными.Загрузка = Истина;
		Объект.ТипПозиции = Перечисления.нсиТипыПозицийСправочников.ЭталоннаяПозиция;
		
		Объект.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Обновляет структуру универсального хранилища при переходе на релиз 2.0.1.2
//
Процедура ОбновитьСтруктуруУниверсальногоХранилища_2_0_1_2()
	
	Выборка = Справочники.нсиВидыСправочников.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ВидСправочника = Перечисления.нсиВидыСправочников.ТабличнаяЧасть Тогда 
			Продолжить;
		КонецЕсли;
		НачатьТранзакцию();
		Попытка
			ВидСправочникаОбъект = Выборка.ПолучитьОбъект();
			Если НЕ ЗначениеЗаполнено(ВидСправочникаОбъект.ВидСправочника) Тогда 
				ВидСправочникаОбъект.ВидСправочника = Перечисления.нсиВидыСправочников.ФункциональныйСправочник;
			КонецЕсли;
			
			Если ВидСправочникаОбъект.Иерархический	И НЕ ЗначениеЗаполнено(ВидСправочникаОбъект.ВидИерархии) Тогда 
				ВидСправочникаОбъект.ВидИерархии = Перечисления.нсиВидыИерархииСправочников.ИерархияГруппИЭлементов;
			КонецЕсли;
			
			РеквизитыКУдалению = Новый Массив;
			Для Каждого Строка Из ВидСправочникаОбъект.Реквизиты Цикл
				Если ЗначениеЗаполнено(Строка.Предопределенный) Тогда 
					РеквизитыКУдалению.Добавить(Строка);
					Если Строка.Предопределенный = Справочники.нсиПредопределенныеРеквизиты.Наименование Тогда 
						ВидСправочникаОбъект.ТипНаименования = Строка.Тип1;
					ИначеЕсли Строка.Предопределенный = Справочники.нсиПредопределенныеРеквизиты.УдалитьТипПозиции Тогда 
						ВидСправочникаОбъект.ИспользоватьНормализацию = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого Строка Из РеквизитыКУдалению Цикл
				ВидСправочникаОбъект.Реквизиты.Удалить(ВидСправочникаОбъект.Реквизиты.Индекс(Строка));
			КонецЦикла;
			
			ВидСправочникаОбъект.РеквизитПредставления = Справочники.нсиПредопределенныеРеквизиты.Наименование;
			
			Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	нсиХранилищеСтрока.Элемент,
				|	нсиХранилищеСтрока.Реквизит,
				|	нсиХранилищеСтрока.Значение,
				|	нсиХранилищеСтрока.УдалитьВерсияДанных,
				|	нсиХранилищеСтрока.УдалитьПометкаУдаления,
				|	нсиХранилищеСтрока.УдалитьВладелец,
				|	нсиХранилищеСтрока.ВладелецСсылка,
				|	нсиХранилищеСтрока.УдалитьРодитель,
				|	нсиХранилищеСтрока.УдалитьЭтоГруппа
				|ИЗ
				|	РегистрСведений.нсиХранилищеСтрока КАК нсиХранилищеСтрока
				|ГДЕ
				|	нсиХранилищеСтрока.ВидСправочника = &ВидСправочника
				|	И нсиХранилищеСтрока.Реквизит = &Реквизит"
			);
			Запрос.УстановитьПараметр("ВидСправочника",Выборка.Ссылка);
			Запрос.УстановитьПараметр("Реквизит",Справочники.нсиПредопределенныеРеквизиты.Код.УникальныйИдентификатор());
			ВыборкаЭлементов = Запрос.Выполнить().Выбрать();
			Пока ВыборкаЭлементов.Следующий() Цикл
				ИмяСправочникаУХ = нсиУниверсальноеХранилищеПовтИсп.ПолучитьИмяСправочникаХранилища(Выборка.Ссылка);
				СсылкаНового = Справочники[ИмяСправочникаУХ].ПолучитьСсылку(ВыборкаЭлементов.Элемент);
				Если ВыборкаЭлементов.УдалитьЭтоГруппа Тогда 
					НовыйЭлемент = Справочники[ИмяСправочникаУХ].СоздатьГруппу();
				Иначе
					НовыйЭлемент = Справочники[ИмяСправочникаУХ].СоздатьЭлемент();
				КонецЕсли;
				НовыйЭлемент.УстановитьСсылкуНового(СсылкаНового);
				НовыйЭлемент.пЭтоГруппа = ВыборкаЭлементов.УдалитьЭтоГруппа;
				НовыйЭлемент.Родитель = Справочники[ИмяСправочникаУХ].ПолучитьСсылку(ВыборкаЭлементов.УдалитьРодитель);
				НовыйЭлемент.ПометкаУдаления = ВыборкаЭлементов.УдалитьПометкаУдаления;
				НовыйЭлемент.Код = ВыборкаЭлементов.Значение;
				НовыйЭлемент.Владелец = Выборка.Ссылка;
				
				НаборСтрока = РегистрыСведений.нсиХранилищеСтрока.СоздатьНаборЗаписей();
				НаборСтрока.Отбор.ВидСправочника.Установить(Выборка.Ссылка);
				НаборСтрока.Отбор.Элемент.Установить(ВыборкаЭлементов.Элемент);
				НаборСтрока.Прочитать();
				Индекс = НаборСтрока.Количество()-1;
				Пока Индекс>=0 Цикл
					Если НаборСтрока[Индекс].Реквизит = Справочники.нсиПредопределенныеРеквизиты.Код.УникальныйИдентификатор() Тогда 
						НаборСтрока.Удалить(Индекс);
					ИначеЕсли НаборСтрока[Индекс].Реквизит = Справочники.нсиПредопределенныеРеквизиты.Наименование.УникальныйИдентификатор() Тогда 
						НовыйЭлемент.Наименование = НаборСтрока[Индекс].Значение;
						НаборСтрока.Удалить(Индекс);
					КонецЕсли;
					Индекс = Индекс - 1;
				КонецЦикла;
				
				НаборБулево = РегистрыСведений.нсиХранилищеБулево.СоздатьНаборЗаписей();
				НаборБулево.Отбор.ВидСправочника.Установить(Выборка.Ссылка);
				НаборБулево.Отбор.Элемент.Установить(ВыборкаЭлементов.Элемент);
				НаборБулево.Прочитать();
				Индекс = НаборБулево.Количество()-1;
				Пока Индекс>=0 Цикл
					Если НаборБулево[Индекс].Реквизит = Справочники.нсиПредопределенныеРеквизиты.УдалитьЗаписьНеНормализуема.УникальныйИдентификатор() Тогда 
						Если Метаданные.Справочники[ИмяСправочникаУХ].Реквизиты.Найти("ЗаписьНеНормализуема")<>Неопределено Тогда 
							НовыйЭлемент.ЗаписьНеНормализуема = НаборБулево[Индекс].Значение;
							НаборБулево.Удалить(Индекс);
						КонецЕсли;
					КонецЕсли;
					Индекс = Индекс - 1;
				КонецЦикла;
				
				
				НаборСсылка = РегистрыСведений.нсиХранилищеСсылка.СоздатьНаборЗаписей();
				НаборСсылка.Отбор.ВидСправочника.Установить(Выборка.Ссылка);
				НаборСсылка.Отбор.Элемент.Установить(ВыборкаЭлементов.Элемент);
				НаборСсылка.Прочитать();
				Индекс = НаборСсылка.Количество()-1;
				Пока Индекс>=0 Цикл
					Если НаборСсылка[Индекс].Реквизит = Справочники.нсиПредопределенныеРеквизиты.УдалитьКласс.УникальныйИдентификатор() Тогда 
						Если Метаданные.Справочники[ИмяСправочникаУХ].Реквизиты.Найти("Класс")<>Неопределено Тогда 
							Если ЗначениеЗаполнено(НаборСсылка[Индекс].Значение) Тогда 
								НовыйЭлемент.Класс = НаборСсылка[Индекс].Значение;
							КонецЕсли;
							НаборСсылка.Удалить(Индекс);
						КонецЕсли;
					ИначеЕсли НаборСсылка[Индекс].Реквизит = Справочники.нсиПредопределенныеРеквизиты.УдалитьТипПозиции.УникальныйИдентификатор() Тогда 
						Если Метаданные.Справочники[ИмяСправочникаУХ].Реквизиты.Найти("ТипПозиции")<>Неопределено Тогда 
							НовыйЭлемент.ТипПозиции = НаборСсылка[Индекс].Значение;
							НаборСсылка.Удалить(Индекс);
						КонецЕсли;
					ИначеЕсли НаборСсылка[Индекс].Реквизит = Справочники.нсиПредопределенныеРеквизиты.УдалитьЭталоннаяПозиция.УникальныйИдентификатор() Тогда 
						Если Метаданные.Справочники[ИмяСправочникаУХ].Реквизиты.Найти("ЭталоннаяПозиция")<>Неопределено Тогда 
							НовыйЭлемент.ЭталоннаяПозиция = Справочники[ИмяСправочникаУХ].ПолучитьСсылку(НаборСсылка[Индекс].УдалитьЗначениеИдентификатор);
							НаборСсылка.Удалить(Индекс);
						КонецЕсли;
					КонецЕсли;
					Индекс = Индекс - 1;
				КонецЦикла;
				НовыйЭлемент.ОбменДанными.Загрузка = Истина;
				НовыйЭлемент.Записать();
				НаборБулево.Записать();
				НаборСсылка.Записать();
				НаборСтрока.Записать();
			КонецЦикла;
			ВидСправочникаОбъект.Записать();
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось преобразовать справочник универсального хранилища """+Выборка.Наименование+""": "+ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

// Вызывается при переходе на версию конфигурации 2.0.1.2.
//
Процедура ОбновитьПредопределенныеВидыКонтактнойИнформацииКонтрагентов() 
	#Если Сервер тогда
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		Возврат;
	КонецЕсли;
	
	МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "ЮрАдресКонтрагента";
	ПараметрыВида.Подсказка = НСтр("ru='Юридический адрес контрагента'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 1;
	ПараметрыВида.НастройкиПроверки.АдресТолькоРоссийский = Ложь;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Телефон");
	ПараметрыВида.Вид = "ТелефонКонтрагента";
	ПараметрыВида.Подсказка = НСтр("ru='Телефон контрагента'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 2;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	#КонецЕсли
КонецПроцедуры


#КонецОбласти
