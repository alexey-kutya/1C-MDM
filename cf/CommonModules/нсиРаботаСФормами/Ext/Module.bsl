#Область ПрограммныйИнтерфейс

// Функция - производит установку отбора для списка по параметру. 
//
Функция ОтборВСпискеПоПараметру(ЭлементыОтбора, Параметры, ИмяПоляКомпоновки, КлючПараметра) Экспорт
	
	// ЭлементыОтбора = ЭтаФорма.Список.Отбор.Элементы
	
	// Проверка наличия свойства в параметрах по ключу
	Если Параметры.Свойство(КлючПараметра) Тогда 
		
		// Проверяем на существование отбора
		Поле = Новый ПолеКомпоновкиДанных(ИмяПоляКомпоновки);
		ЭлементОтбора = НайтиЭлементОтбораПоПредставлению(Поле, ЭлементыОтбора);
	
		// Добавляется новый элемент отбора
		Если ЭлементОтбора = Неопределено Тогда 
			ЭлементОтбора = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоляКомпоновки);
		КонецЕсли;
		
		// Вид сравнения по умолчанию "равно"
		ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
		
		// Включается отбор
		ЭлементОтбора.Использование 	= Истина;
		
		// Устанавливается значение отбора
		ЭлементОтбора.ПравоеЗначение 	= Параметры[КлючПараметра];	
		
		Возврат ЭлементОтбора;
	
	КонецЕсли;   			
	
	Возврат Неопределено;
	
КонецФункции	

// Функция - производит установку отбора для списка по значению. 
//
Функция ОтборВСпискеПоЗначению(ЭлементыОтбора, ИмяПоляКомпоновки, ЗначениеОтбора, 
	ВидСравнения = Неопределено, Использование = Истина) Экспорт
	
	Поле = Новый ПолеКомпоновкиДанных(ИмяПоляКомпоновки);
	Если ВидСравнения = Неопределено Тогда 
		ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	КонецЕсли;
	
	// ЭлементыОтбора = ЭтаФорма.Список.Отбор.Элементы
	
	// Проверяем на существование отбора	
	ЭлементОтбора = НайтиЭлементОтбораПоПредставлению(Поле, ЭлементыОтбора);

	// Добавляется новый элемент отбора
	Если ЭлементОтбора = Неопределено Тогда 
		ЭлементОтбора = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Поле;
	КонецЕсли;
	
	ЭлементОтбора.ВидСравнения 		= ВидСравнения;
	ЭлементОтбора.Использование 	= Использование;
	ЭлементОтбора.ПравоеЗначение 	= ЗначениеОтбора;	
	
	Возврат ЭлементОтбора;
	
КонецФункции	

// Функция - ищет в дереве идентификаторов нужный по представлению. 
//
Функция НайтиИдентификаторОтбораПоПредставлению(Представление, Идентификаторы) Экспорт
	
	ПорядокТочки = Найти(Представление,".")+1;
	
	Если ПорядокТочки = 1 Тогда 
		Возврат Идентификаторы.Элементы.Найти(""+Идентификаторы.Поле+"."+Представление);
	КонецЕсли;	
	
	ИмяПараметра = Сред(Представление, ПорядокТочки, СтрДлина(Представление)-ПорядокТочки+1);
	Если ТипЗнч(Идентификаторы) = Тип("ДоступноеПолеОтбораКомпоновкиДанных") Тогда 
		Идентификатор = Идентификаторы.Элементы.Найти(
			""+Идентификаторы.Поле+"."+Лев(Представление,ПорядокТочки-2));
	Иначе 
		Идентификатор = Идентификаторы.Элементы.Найти(Лев(Представление,ПорядокТочки-2));
	КонецЕсли;
	
	Возврат НайтиИдентификаторОтбораПоПредставлению(ИмяПараметра, Идентификатор);
	
КонецФункции	

// Функция - ищет в дереве отборов нужный отбор по полю. 
//
Функция НайтиЭлементОтбораПоПредставлению(Поле, ЭлементыОтбора) Экспорт 
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда 
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;	
	
	Если ТипЗнч(ЭлементыОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		Если ЭлементыОтбора.ЛевоеЗначение = Поле Тогда 
			Возврат ЭлементыОтбора; 			
		КонецЕсли;	
	Иначе 	
		Если ТипЗнч(ЭлементыОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда 
			ОтбиратьИзЭлементов = ЭлементыОтбора.Элементы;
		Иначе 
			ОтбиратьИзЭлементов = ЭлементыОтбора;
		КонецЕсли;	
		Для Каждого ЭлементОтбора Из ОтбиратьИзЭлементов Цикл 
			НайденЭлемент = НайтиЭлементОтбораПоПредставлению(Поле, ЭлементОтбора);
			Если НЕ НайденЭлемент = Неопределено Тогда 
				Если НайденЭлемент.ЛевоеЗначение = Поле Тогда
					Возврат НайденЭлемент; 			
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;	
	
	Возврат Неопределено; 
			
КонецФункции	

// Функция - ищет в дереве отборов нужную группу отборов по полю. 
//
Функция НайтиГруппуОтбораПоПредставлению(Поле, ЭлементыОтбора) Экспорт 
		
	Если ТипЗнч(ЭлементыОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		Возврат Неопределено;
	КонецЕсли;	
	Если ТипЗнч(ЭлементыОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда 
		Если ЭлементыОтбора.Представление = Поле Тогда
			Возврат ЭлементыОтбора;
		КонецЕсли;	
			
		ОтбиратьИзЭлементов = ЭлементыОтбора.Элементы;
	Иначе 
		ОтбиратьИзЭлементов = ЭлементыОтбора;
	КонецЕсли;	
	Для Каждого ЭлементОтбора Из ОтбиратьИзЭлементов Цикл 
		НайденЭлемент = НайтиГруппуОтбораПоПредставлению(Поле, ЭлементОтбора);
		Если НЕ НайденЭлемент = Неопределено Тогда 
			Возврат НайденЭлемент; 			
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Неопределено; 
			
КонецФункции	

// Процедура - удаляет лидирующие и конечные пробелы у текстовых реквизитов.
//
Процедура СократитьПробелыТекстовыхПолей(ТекущийОбъект) Экспорт 
	
	Для Каждого мРеквизит Из ТекущийОбъект.Ссылка.Метаданные().Реквизиты Цикл 
		Если ТипЗнч(ТекущийОбъект[мРеквизит.Имя]) = Тип("Строка") Тогда 
			ТекущийОбъект[мРеквизит.Имя] = СокрЛП(ТекущийОбъект[мРеквизит.Имя]);
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры	

// Функция проверяет заполненность комментария в табличной части задач
// бизнес-процесса "пакетный ввод элементов справочника".
Функция НеЗаполненыРезультатИКомментарии(ЭтаФорма) Экспорт 
	НеЗаполненКомментарий = Ложь;
	
	ЕстьОшибки = ПредопределенноеЗначение("Перечисление.нсиСтатусыОбработкиЗаявок.ЕстьОшибки");
	НадоУточнить = ПредопределенноеЗначение("Перечисление.нсиСтатусыОбработкиЗаявок.НадоУточнить");
	Отклонено = ПредопределенноеЗначение("Перечисление.нсиСтатусыОбработкиЗаявок.Отклонено");
	Уточнено = ПредопределенноеЗначение("Перечисление.нсиСтатусыОбработкиЗаявок.Уточнено");
	
	
	Для Каждого Строка Из ЭтаФорма.Задание.Предметы Цикл
		Если (Строка.Статус = ЕстьОшибки И ЭтаФорма.ИмяФормы = "БизнесПроцесс.нсиПакетныйВводЭлементовСправочника.Форма.ДействиеКонтрольИсполнения")
			ИЛИ Строка.Статус = НадоУточнить
			ИЛИ Строка.Статус = Отклонено
			ИЛИ Строка.Статус = Уточнено
			Тогда 
				Если НЕ ЗначениеЗаполнено(Строка.Комментарий) Тогда 
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						"Не заполнен комментарий в строке "+Строка.НомерСтроки+".",,
						"Предметы["+Формат(Строка.НомерСтроки-1,"ЧГ=0")+"].Комментарий",
						"Задание"
					);
					НеЗаполненКомментарий = Истина;
				КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НеЗаполненКомментарий;
КонецФункции

// Процедура устанавливает параметр выбора поля ввода из массива ссылок
// Параметры:
//	ПолеВвода - элемент формы (поле ввода)
//	ИмяПараметра - строка, имя параметра выбора
//	Массив - массив допустимых значений параметра выбора.
//
Процедура УстановитьПараметрыВыбораИзМассива(ПолеВвода, ИмяПараметра, Массив) Экспорт
	ФиксированныйМассив = Новый ФиксированныйМассив(Массив);
	ПараметрВыбора = Новый ПараметрВыбора("Отбор."+ИмяПараметра,ФиксированныйМассив);
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить(ПараметрВыбора);
	ФиксированныйМассивОтбора = Новый ФиксированныйМассив(МассивОтбора) ;
	ПолеВвода.ПараметрыВыбора = ФиксированныйМассивОтбора;
КонецПроцедуры

#КонецОбласти
