#Область ПрограммныйИнтерфейс

// Процедура - создает запись в нсиСтатусыОбработкиСправочников, если ее нет.
//
Процедура нсиСозданиеСтатусовОбработокПриЗаписи(Источник, Отказ) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ Объект ИЗ РегистрСведений.нсиСтатусыОбработкиСправочников ГДЕ Объект = &Объект");
	Запрос.УстановитьПараметр("Объект", Источник.Ссылка);

	Если Не Запрос.Выполнить().Выбрать().Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.нсиСтатусыОбработкиСправочников.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Объект = Источник.Ссылка;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

// Функция - возвращает для объекта признак ВременныйЭлемент из рс нсиСтатусыОбработкиСправочников.
//
Функция ПризнакИсточникаЭтоВременный(Объект) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	нсиСтатусыОбработкиСправочников.Объект
		|ИЗ
		|	РегистрСведений.нсиСтатусыОбработкиСправочников КАК нсиСтатусыОбработкиСправочников
		|ГДЕ
		|	нсиСтатусыОбработкиСправочников.Объект = &Объект
		|	И нсиСтатусыОбработкиСправочников.ВременныйЭлемент";

	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат Истина;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА РЕГИСТРАЦИИ ОБЪЕКТОВ (ПРО)

// Процедура БСП.
//
Процедура ДополнитьМассивПолучателейУзламиИзМассива(Источник, МассивУзлов) Экспорт 
	
	Если Константы.нсиНеРегистрироватьКОбменуПриЗаписи.Получить() Тогда 
		Возврат;
	КонецЕсли;	
	
	Для Каждого Элемент Из МассивУзлов Цикл
		
		Попытка
			
			Источник.ОбменДанными.Получатели.Добавить(Элемент);
			
		Исключение
			
			// фиксируем ошибку в ЖР
			ИмяПланаОбмена = Элемент.Метаданные().Имя;
			
			ОбъектМетаданных = Источник.Метаданные();
			
			СтрокаСообщения = НСтр("ru = 'Для состава плана обмена [ИмяПланаОбмена] не указана регистрация объекта [ПолноеИмя]'");
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "[ИмяПланаОбмена]", ИмяПланаОбмена);
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "[ПолноеИмя]",      ОбъектМетаданных.ПолноеИмя());
			
			ЗаписьЖурналаРегистрацииПРО(СтрокаСообщения, ОбъектМетаданных);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ-ОБРАБОТЧИКИ СОБЫТИЙ ПРО

// Функция возвращает массив ссылок на элементы справочников,
// которые ссылаются на позицию.
// Параметры:
//	Позиция - СправочникСсылка, ссылка на позицию, для которой ищутся элементы справочников, 
//				которые на неё ссылаются.
// Возвращает:
//	Массив ссылок на элементы справочников, которые ссылаются на позицию.
//
Функция ПолучитьСсылкиНаПозицию(Позиция, БезУдаленных = Истина) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	Массив = Новый Массив;
	Массив.Добавить(Позиция);
	Таблица = НайтиПоСсылкам(Массив);
	
	Массив = Новый Массив;
	Для Каждого Строка Из Таблица Цикл 
		Если Метаданные.Справочники.Содержит(Строка[2]) Тогда 
			Если НЕ Строка[1].ПометкаУдаления ИЛИ НЕ БезУдаленных Тогда 
				Массив.Добавить(Строка[1]);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	Возврат Массив;
КонецФункции

// Функция возвращает таблицу значений, содержащую имена реквизитов, имеющих определённый тип.
// Параметры:
//	Позиция - ссылка на элемент справочника, для которого надо вернуть таблицу реквизитов.
//	Тип - тип, по которому выполняется отбор реквизитов.
// Возвращает:
//	ТаблицаЗначений с колонками:
//		Реквизит - строка, имя реквизита,
//		ТабличнаяЧасть - если реквизит не в табличной части, то Неопределено, 
//						иначе строка - имя табличной части.
//
Функция ПолучитьТаблицуРеквизитовДляЗамены(Позиция, Тип) Экспорт
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Реквизит");
	ТЗ.Колонки.Добавить("ТабличнаяЧасть");
	
	Мтд = Позиция.Метаданные();
	Для Каждого Реквизит Из Мтд.Реквизиты Цикл
		Если Реквизит.Тип.СодержитТип(Тип) Тогда 
			НС = ТЗ.Добавить();
			НС.Реквизит = Реквизит.Имя;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Реквизит Из Мтд.СтандартныеРеквизиты Цикл
		Если Реквизит.Тип.СодержитТип(Тип) И НЕ Реквизит.Имя = "Ссылка" Тогда 
			НС = ТЗ.Добавить();
			НС.Реквизит = Реквизит.Имя;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТЧ Из Мтд.ТабличныеЧасти Цикл
		Для Каждого Реквизит Из ТЧ.Реквизиты Цикл
			Если Реквизит.Тип.СодержитТип(Тип) Тогда 
				НС = ТЗ.Добавить();
				НС.Реквизит = Реквизит.Имя;
				НС.ТабличнаяЧасть = ТЧ.Имя;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Возврат ТЗ;
КонецФункции

// Процедура возвращает Отказ = Истина, если у элемента справочника тип позиции "эталонная" меняется
// на другой и при этом к элементу справочника привязаны дублирующие позиции. Иначе возвращает Отказ = Ложь.
// Параметры:
//	 Объект - СправочникОбъект, проверяемый объект.
//	 Отказ - булево, переменная в которой возвращается результат проверки;
//
Процедура ПроверитьТипПозицииПередЗаписьюФункциональногоСправочника(Объект,Отказ) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	ИмяСправочника = Объект.Метаданные().Имя;
	Если Объект.Ссылка.ТипПозиции = Перечисления.нсиТипыПозицийСправочников.ЭталоннаяПозиция И
		Объект.ТипПозиции <> Перечисления.нсиТипыПозицийСправочников.ЭталоннаяПозиция
		И НЕ Объект.ЭтоМакет Тогда 
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Ссылка
			|ИЗ
			|	Справочник."+ИмяСправочника+"
			|ГДЕ
			|	ЭталоннаяПозиция = &ЭталоннаяПозиция
			|	И ТипПозиции = &ТипПозиции
			|	И НЕ ЭтоМакет"
		);
		Запрос.УстановитьПараметр("ЭталоннаяПозиция",Объект.Ссылка);
		Запрос.УстановитьПараметр("ТипПозиции",Перечисления.нсиТипыПозицийСправочников.ДублирующаяПозиция);
		
		Если НЕ Запрос.Выполнить().Пустой() Тогда 
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Тип эталонной позиции не может быть изменён, так как к эталону привязаны дубли.";
			Сообщение.Сообщить();

			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА РЕГИСТРАЦИИ ОБЪЕКТОВ (ПРО)

// Процедура БСП.
//
Функция ПолучитьЗначениеСвойстваОбъекта(Объект, СтрокаСвойствОбъекта)
	
	Значение = Объект;
	
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаСвойствОбъекта, ".");
	
	// значение получаем с учетом возможного разыменования свойства
	Для Каждого ИмяСвойства ИЗ МассивПодстрок Цикл
		
		Значение = Значение[ИмяСвойства];
		
	КонецЦикла;
	
	Возврат Значение;
	
КонецФункции

// Процедура БСП.
//
Процедура ЗаполнитьЗначенияСвойствИзОбъекта(ДеревоЗначений, Объект)
	
	Для Каждого СтрокаДерева ИЗ ДеревоЗначений.Строки Цикл
		
		Если СтрокаДерева.ЭтоГруппа Тогда
			
			ЗаполнитьЗначенияСвойствИзОбъекта(СтрокаДерева, Объект);
			
		Иначе
			
			СтрокаДерева.ЗначениеСвойства = ПолучитьЗначениеСвойстваОбъекта(Объект, СтрокаДерева.СвойствоОбъекта);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура БСП.
//
Процедура ЗаполнитьЗначенияСвойствИзВыборки(ДеревоЗначений, Выборка)
	
	Для Каждого СтрокаДерева ИЗ ДеревоЗначений.Строки Цикл
		
		Если СтрокаДерева.ЭтоГруппа Тогда
			
			ЗаполнитьЗначенияСвойствИзВыборки(СтрокаДерева, Выборка);
			
		Иначе
			
			СтрокаДерева.ЗначениеСвойства = Выборка[СтрокаДерева.КлючСвойстваОбъекта];
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// По умолчанию считаем, что элементы отбора корневой группы сравниваются по условию "И".
// Поэтому переменная ЭтоОператорИ по умолчанию принимает значение Истина.
//
Функция УсловиеИстинноДляВеткиДереваЗначений(ДеревоЗначений, Знач ЭтоОператорИ = Истина)
	
	// инициализиция
	Если ЭтоОператорИ Тогда // И
		Результат = Истина;
	Иначе // ИЛИ
		Результат = Ложь;
	КонецЕсли;
	
	Для Каждого СтрокаДерева ИЗ ДеревоЗначений.Строки Цикл
		
		Если СтрокаДерева.ЭтоГруппа Тогда
			
			РезультатЭлемента = УсловиеИстинноДляВеткиДереваЗначений(СтрокаДерева, СтрокаДерева.ЭтоОператорИ);
		Иначе
			
			РезультатЭлемента = УсловиеИстинноДляЭлемента(СтрокаДерева, ЭтоОператорИ);
		КонецЕсли;
		
		Если ЭтоОператорИ Тогда // И
			
			Результат = Результат И РезультатЭлемента;
			
			Если Не Результат Тогда
				Возврат Ложь;
			КонецЕсли;
			
		Иначе // ИЛИ
			
			Результат = Результат ИЛИ РезультатЭлемента;
			
			Если Результат Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Процедура БСП..
//
Функция УсловиеИстинноДляЭлемента(СтрокаДерева, ЭтоОператорИ)
	
	Перем ВидСравнения;
	
	ВидСравнения = СтрокаДерева.ВидСравнения;
	
	Попытка
		
		Если      ВидСравнения = "Равно"          Тогда Возврат СтрокаДерева.ЗначениеСвойства =  СтрокаДерева.ЗначениеКонстанты;
		ИначеЕсли ВидСравнения = "НеРавно"        Тогда Возврат СтрокаДерева.ЗначениеСвойства <> СтрокаДерева.ЗначениеКонстанты;
		ИначеЕсли ВидСравнения = "Больше"         Тогда Возврат СтрокаДерева.ЗначениеСвойства >  СтрокаДерева.ЗначениеКонстанты;
		ИначеЕсли ВидСравнения = "БольшеИлиРавно" Тогда Возврат СтрокаДерева.ЗначениеСвойства >= СтрокаДерева.ЗначениеКонстанты;
		ИначеЕсли ВидСравнения = "Меньше"         Тогда Возврат СтрокаДерева.ЗначениеСвойства <  СтрокаДерева.ЗначениеКонстанты;
		ИначеЕсли ВидСравнения = "МеньшеИлиРавно" Тогда Возврат СтрокаДерева.ЗначениеСвойства <= СтрокаДерева.ЗначениеКонстанты;
		КонецЕсли;
		
	Исключение
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Ложь;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С ЖУРНАЛОМ РЕГИСТРАЦИИ

// Процедура БСП
//
Процедура ЗаписьЖурналаРегистрацииПРО(Комментарий, ОбъектМетаданных)
	
	ЗаписьЖурналаРегистрации("Обмен данными.Правила регистрации объектов", УровеньЖурналаРегистрации.Ошибка, ОбъектМетаданных, , Комментарий);
	
КонецПроцедуры

#КонецОбласти
