
#Область ПрограммныйИнтерфейс

// Определяет использование в справочнике иерархии групп и элементов.
//
// Параметры:
// ИмяСправочника - Строка - краткое имя справочника;
//					СправочникСсылка.нсиВидыСправочников - ссылка на элемент справочника "Виды справочников".
//
// Возвращаемое значение:
// Булево - Истина, если справочник иерархический и вид иерархии - Иерархия групп и элементов, Ложь - иначе.
//
Функция ЭтоИерархияГруппИЭлементов(ИмяСправочника) Экспорт
	Если ТипЗнч(ИмяСправочника) = Тип("Строка") Тогда 
		Возврат 
			Метаданные.Справочники[ИмяСправочника].Иерархический
			И Метаданные.Справочники[ИмяСправочника].ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов;
	ИначеЕсли ТипЗнч(ИмяСправочника) = Тип("СправочникСсылка.нсиВидыСправочников") Тогда 
		Возврат ИмяСправочника.Иерархический И ИмяСправочника.ВидИерархии = Перечисления.нсиВидыИерархииСправочников.ИерархияГруппИЭлементов;
	КонецЕсли;		
	ВызватьИсключение "Неверный тип справочника!";
КонецФункции

// Создает элемент справочника указаного имени.
//
// Параметры:
// ИмяСправочника - Строка - краткое имя справочника;
//					СправочникСсылка.нсиВидыСправочников - ссылка на элемент справочника "Виды справочников".
//
// Возвращаемое значение:
// СправочникСсылка - ссылка на созданный элемент справочника.
//
Функция СоздатьЭлементСправочника(ИмяСправочника) Экспорт
	Если ТипЗнч(ИмяСправочника) = Тип("Строка") Тогда 
		Возврат Справочники[ИмяСправочника].СоздатьЭлемент();
	ИначеЕсли ТипЗнч(ИмяСправочника) = Тип("СправочникСсылка.нсиВидыСправочников") Тогда 
		ИмяСправочникаУХ = нсиУниверсальноеХранилищеПовтИсп.ПолучитьИмяСправочникаХранилища(ИмяСправочника);
		НовыйЭлемент = Справочники[ИмяСправочникаУХ].СоздатьЭлемент();
		НовыйЭлемент.Владелец = ИмяСправочника;
		пМетаданные = нсиУниверсальноеХранилище.ПолучитьМетаданные(ИмяСправочника);
		НовыйЭлемент.ДополнительныеСвойства.Вставить("пМетаданные",пМетаданные);
		Возврат НовыйЭлемент;
	КонецЕсли;		
	ВызватьИсключение "Неверный тип справочника!";
КонецФункции

// Создает группу справочника указаного имени.
//
// Параметры:
// ИмяСправочника - Строка - краткое имя справочника;
//					СправочникСсылка.нсиВидыСправочников - ссылка на элемент справочника "Виды справочников".
//
// Возвращаемое значение:
// СправочникСсылка - ссылка на созданную группу справочника.
//
Функция СоздатьГруппуСправочника(ИмяСправочника) Экспорт
	Если ТипЗнч(ИмяСправочника) = Тип("Строка") Тогда 
		Возврат Справочники[ИмяСправочника].СоздатьГруппу();
	ИначеЕсли ТипЗнч(ИмяСправочника) = Тип("СправочникСсылка.нсиВидыСправочников") Тогда 
		Если НЕ ЭтоИерархияГруппИЭлементов(ИмяСправочника) Тогда 
			ВызватьИсключение "Нельзя создать группу для справочника """+ИмяСправочника+"""! Неверный вид иерархии.";
		КонецЕсли;
		ИмяСправочникаУХ = нсиУниверсальноеХранилищеПовтИсп.ПолучитьИмяСправочникаХранилища(ИмяСправочника);
		НовыйЭлемент = Справочники[ИмяСправочникаУХ].СоздатьЭлемент();
		НовыйЭлемент.Владелец = ИмяСправочника;
		НовыйЭлемент.пЭтоГруппа = Истина;
		пМетаданные = нсиУниверсальноеХранилище.ПолучитьМетаданные(ИмяСправочника);
		НовыйЭлемент.ДополнительныеСвойства.Вставить("пМетаданные",пМетаданные);
		Возврат НовыйЭлемент;
	КонецЕсли;		
	ВызватьИсключение "Неверный тип справочника!";
КонецФункции

// Получает новую ссылку справочника указаного имени.
//
// Параметры:
// ИмяСправочника - Строка - краткое имя справочника;
//					СправочникСсылка.нсиВидыСправочников - ссылка на элемент справочника "Виды справочников".
//
// Возвращаемое значение:
// СправочникСсылка - новая ссылка справочника.
//
Функция ПолучитьНовуюСсылку(ИмяСправочника) Экспорт
	Если ТипЗнч(ИмяСправочника) = Тип("Строка") Тогда 
		Возврат Справочники[ИмяСправочника].ПолучитьСсылку(новый УникальныйИдентификатор);
	ИначеЕсли ТипЗнч(ИмяСправочника) = Тип("СправочникСсылка.нсиВидыСправочников") Тогда 
		ИмяСправочникаУХ = нсиУниверсальноеХранилищеПовтИсп.ПолучитьИмяСправочникаХранилища(ИмяСправочника);
		Возврат Справочники[ИмяСправочникаУХ].ПолучитьСсылку(новый УникальныйИдентификатор);
	КонецЕсли;
	ВызватьИсключение "Неверный тип справочника!";
КонецФункции

// Получает признак использования по умолчанию для справочника указаного имени.
//
// Параметры:
// ИмяСправочника - Строка - краткое имя справочника;
//					СправочникСсылка.нсиВидыСправочников - ссылка на элемент справочника "Виды справочников".
//
// Возвращаемое значение:
// Для справочника нсиДоговорыСПоставщиками - Перечисления.нсиПризнакиИспользованияПозицийДоговоровКонтрагентов.Используетс;
// Для справочника нсиДоговорыСПокупателями - Перечисления.нсиПризнакиИспользованияПозицийДоговоровКонтрагентов.Используетс;
// Для справочника нсиКонтрагенты - Перечисления.нсиПризнакиИспользованияПозицийКонтрагентов.Используетс;
// Для справочника нсиМТР - Перечисления.нсиПризнакиИспользованияПозицийМТР.Используетс;
// Для справочника нсиУслуги - Перечисления.нсиПризнакиИспользованияПозицийУслуг.Используетс;
// Для справочника нсиБанковскиеСчета - Перечисления.нсиПризнакиИспользованияПозицийБанковскиеСчета.Открыт;
// Для справочника типа СправочникСсылка.нсиВидыСправочников - Перечисления.нсиПризнакиИспользованияПозицийМТР.Используетс;
// иначе - Неопределено.
//
Функция ПолучитьПризнакИспользованияПоУмолчанию(ИмяСправочника) Экспорт
	ПризнакИспользования = Неопределено;
	Если ТипЗнч(ИмяСправочника) = Тип("Строка") Тогда 
		Если ИмяСправочника = "нсиДоговорыСПоставщиками" Тогда 
			ПризнакИспользования = Перечисления.нсиПризнакиИспользованияПозицийДоговоровКонтрагентов.Используется;
		ИначеЕсли ИмяСправочника = "нсиДоговорыСПокупателями" Тогда 
			ПризнакИспользования = Перечисления.нсиПризнакиИспользованияПозицийДоговоровКонтрагентов.Используется;
		ИначеЕсли ИмяСправочника = "нсиКонтрагенты" Тогда 
			ПризнакИспользования = Перечисления.нсиПризнакиИспользованияПозицийКонтрагентов.Используется;
		ИначеЕсли ИмяСправочника = "нсиМТР" Тогда 
			ПризнакИспользования = Перечисления.нсиПризнакиИспользованияПозицийМТР.Используется;
		ИначеЕсли ИмяСправочника = "нсиУслуги" Тогда 
			ПризнакИспользования = Перечисления.нсиПризнакиИспользованияПозицийУслуг.Используется;
		ИначеЕсли ИмяСправочника = "нсиБанковскиеСчета" Тогда 
			ПризнакИспользования = Перечисления.нсиПризнакиИспользованияПозицийБанковскиеСчета.Открыт;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ИмяСправочника) = Тип("СправочникСсылка.нсиВидыСправочников") Тогда 
		ПризнакИспользования = Перечисления.нсиПризнакиИспользованияПозицийМТР.Используется;
	КонецЕсли;	
	Возврат ПризнакИспользования;
КонецФункции

// Получает имя формы объекта для справочника указаного имени.
//
// Параметры:
// ИмяСправочника - Строка - краткое имя справочника;
//					СправочникСсылка.нсиВидыСправочников - ссылка на элемент справочника "Виды справочников".
//
// Возвращаемое значение:
// Строка - полное имя формы объекта справочника.
//
Функция ПолучитьИмяФормыОбъекта(ИмяСправочника, Ссылка) Экспорт
	
	Если ТипЗнч(ИмяСправочника) = Тип("Строка") Тогда 
		Возврат "Справочник."+ИмяСправочника+".ФормаОбъекта"
	ИначеЕсли ТипЗнч(ИмяСправочника) = Тип("СправочникСсылка.нсиВидыСправочников") Тогда 
		ИмяСправочникаУХ = нсиУниверсальноеХранилищеПовтИсп.ПолучитьИмяСправочникаХранилища(ИмяСправочника);
		Возврат "Справочник."+ИмяСправочникаУХ+".ФормаОбъекта"
	КонецЕсли;
	ВызватьИсключение "Неверный тип справочника!";
	
КонецФункции	

#КонецОбласти