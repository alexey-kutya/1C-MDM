
#Область ПрограммныйИнтерфейс

// Подписка на событие нсиКонтрольДублирующихПозиций.
//
// Параметры:
// Источник - СправочникОбъект.
// Отказ - Булево.
//
Процедура нсиКонтрольДублирующихПозицийПередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка тогда
		Возврат
	КонецЕсли;
	
	ВыполнитьКонтрольДублирующихПозиций(Источник, Ложь, Отказ);
	
КонецПроцедуры

// Процедура выполнения контроля дублирующих позиций.
//
// Параметры:
// Источник - СправочникОбъект.
// КонтролироватьМакеты - Булево.
// Отказ - Булево.
//
Процедура ВыполнитьКонтрольДублирующихПозиций(Источник, КонтролироватьМакеты, Отказ) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	мдИсточника = Источник.Метаданные();
	
	Если мдИсточника.Имя = "нсиУниверсальныйФункциональныйСправочник"
		ИЛИ мдИсточника.Имя = "нсиУниверсальныйКлассификатор" Тогда 
		
		ИмяСправочника = Источник.Владелец;
	Иначе
		ИмяСправочника = мдИсточника.Имя;
	КонецЕсли;
	
	ЕстьРеквизитЭтоМакет = НЕ (мдИсточника.Реквизиты.Найти("ЭтоМакет") = Неопределено);
	
	Если ЕстьРеквизитЭтоМакет тогда
		ЭтоМакет = Источник.ЭтоМакет;
	Иначе 
		ЭтоМакет = Ложь;
	КонецЕсли;	
	
	// Получение настройки поиска дублей.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	нсиНастройкиПоискаДублей.НастройкаОтбора
		|ИЗ
		|	РегистрСведений.нсиНастройкиПоискаДублей КАК нсиНастройкиПоискаДублей
		|ГДЕ
		|	нсиНастройкиПоискаДублей.ИмяСправочника = &ИмяСправочника
		|	И нсиНастройкиПоискаДублей.ПроверятьПриЗаписи = ИСТИНА
		|	И (нсиНастройкиПоискаДублей.ИспользоватьДляМакетов = ИСТИНА
		|			ИЛИ &ЭтоМакет = ЛОЖЬ
		|			ИЛИ &КонтролироватьМакеты = ИСТИНА)";
		
	Запрос.УстановитьПараметр("ИмяСправочника", ИмяСправочника);
	
	Запрос.УстановитьПараметр("ЭтоМакет", ЭтоМакет);
	Запрос.УстановитьПараметр("КонтролироватьМакеты", КонтролироватьМакеты);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() тогда
		Возврат
	Иначе 	
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда 
			НастройкаОтбора = Выборка.НастройкаОтбора;	
		Иначе 
			Возврат
		КонецЕсли;
	КонецЕсли;
	
	// Поиск дублирующих позиций.
	АдресКомпоновки = "";
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	
	нсиСравнениеДанных = нсиЗащитаКонфигурацииСервер.ПолучитьОбработку_нсиСравнениеДанных();
	Если нсиСравнениеДанных = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	нсиСравнениеДанных.ЗаполнениеКомпоновщикаНастроек(ИмяСправочника, АдресКомпоновки, КомпоновщикНастроек);
	
	Попытка
		нсиСохранениеНастроекСписков.ДесериализоватьОтбор(НастройкаОтбора, КомпоновщикНастроек.Настройки.Отбор);
		ЗаполнитьОтбор(КомпоновщикНастроек.Настройки.Отбор, Источник.Ссылка);
	Исключение
		Возврат	
	КонецПопытки;
	
	нсиРаботаСФормами.ОтборВСпискеПоЗначению(
		КомпоновщикНастроек.Настройки.Отбор.Элементы, "Ссылка", Источник.Ссылка, 
		ВидСравненияКомпоновкиДанных.НеРавно, Истина
	);
	
	Если ТипЗнч(ИмяСправочника) = Тип("СправочникСсылка.нсиВидыСправочников") Тогда 
		нсиРаботаСФормами.ОтборВСпискеПоЗначению(
			КомпоновщикНастроек.Настройки.Отбор.Элементы, "Владелец", Источник.Владелец, 
			ВидСравненияКомпоновкиДанных.Равно, Истина
		);
	КонецЕсли;
	
	Если ЕстьРеквизитЭтоМакет
		И Не КонтролироватьМакеты тогда
		нсиРаботаСФормами.ОтборВСпискеПоЗначению(
			КомпоновщикНастроек.Настройки.Отбор.Элементы, "Ссылка.ЭтоМакет", ЛОЖЬ, 
			ВидСравненияКомпоновкиДанных.Равно, Истина
		);
	КонецЕсли;
	
	ПараметрыНеточногоПоиска = Новый ТаблицаЗначений;
	ПараметрыНеточногоПоиска.Колонки.Добавить("Поле"             , Новый ОписаниеТипов("ПолеКомпоновкиДанных"));
	ПараметрыНеточногоПоиска.Колонки.Добавить("МетодСравнения"   , Новый ОписаниеТипов("ПеречислениеСсылка.нсиМетодыСравненияСтроковыхДанных"));
	ПараметрыНеточногоПоиска.Колонки.Добавить("ПроцентСовпадения", Новый ОписаниеТипов("Число"));
	ПараметрыНеточногоПоиска.Колонки.Добавить("ЭтоДопСведение"   , Новый ОписаниеТипов("Булево"));
	
	МассивСсылок = нсиСравнениеДанных.НайтиДанные(ИмяСправочника, КомпоновщикНастроек.Настройки, ПараметрыНеточногоПоиска,11);
	
	Если Не МассивСсылок = Неопределено И МассивСсылок.Количество()>0 тогда
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось записать объект.");
		Если МассивСсылок.Количество()>10 Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Обнаружено более 10 дублирующих позиций. Первые 10:");
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Обнаружены дублирующие позиции:");
		КонецЕсли;
		Для Индекс = 0 По Мин(9,МассивСсылок.ВГраница()) цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Строка(МассивСсылок[Индекс]),МассивСсылок[Индекс]);
		КонецЦикла;	
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьОтбор(Отбор, Предмет)
	ИменаРеквизитов = "";
	
	ПолучитьИменаРеквизитов(Отбор, ИменаРеквизитов);
	ЗначенияРеквизитов = ПолучитьЗначенияРеквизитов(Предмет, ИменаРеквизитов);
	ЗаполнитьПравыеЗначенияЭлементовОтбора(Отбор, ЗначенияРеквизитов);
КонецПроцедуры

Процедура ПолучитьИменаРеквизитов(ЭлементОтбора,ИменаРеквизитов)
	Если ТипЗнч(ЭлементОтбора) = Тип("ОтборКомпоновкиДанных") ИЛИ
		ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда 
		
		Для Каждого Э Из ЭлементОтбора.Элементы Цикл
			ПолучитьИменаРеквизитов(Э, ИменаРеквизитов);
		КонецЦикла;
		
	Иначе
		ИменаРеквизитов = ИменаРеквизитов + ?(ПустаяСтрока(ИменаРеквизитов),"",",") + Строка(ЭлементОтбора.ЛевоеЗначение);
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьПравыеЗначенияЭлементовОтбора(ЭлементОтбора,ЗначенияРеквизитов)
	Если ТипЗнч(ЭлементОтбора) = Тип("ОтборКомпоновкиДанных") ИЛИ
		ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда 
		
		Для Каждого Э Из ЭлементОтбора.Элементы Цикл
			ЗаполнитьПравыеЗначенияЭлементовОтбора(Э,ЗначенияРеквизитов);
		КонецЦикла;
	Иначе
		Если НЕ ЗначениеЗаполнено(ЭлементОтбора.ПравоеЗначение)
			ИЛИ ЭлементОтбора.ПравоеЗначение = "00000000-0000-0000-0000-000000000000" Тогда 
			ЭлементОтбора.ПравоеЗначение  = ЗначенияРеквизитов[Строка(ЭлементОтбора.ЛевоеЗначение)];
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьЗначенияРеквизитов(Ссылка, ИменаРеквизитов)
	
	Результат = Новый Соответствие();
	ИменаРеквизитов_ = СтрЗаменить(ИменаРеквизитов,",",Символы.ПС);
	КоличествоРеквизитов = СтрЧислоСтрок(ИменаРеквизитов_);
	
	Если ТипЗнч(Ссылка) <> Тип("СправочникСсылка.нсиУниверсальныйФункциональныйСправочник")
		И ТипЗнч(Ссылка) <> Тип("СправочникСсылка.нсиУниверсальныйКлассификатор") Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	" + ИменаРеквизитов + "
			|ИЗ
			|	" + Ссылка.Метаданные().ПолноеИмя() + " КАК Таблица
			|ГДЕ
			|	Таблица.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		Для Сч = 1 По КоличествоРеквизитов Цикл
			Если ТипЗнч(Выборка[Сч-1]) <> Тип("РезультатЗапроса") Тогда 
				Результат.Вставить(СтрПолучитьСтроку(ИменаРеквизитов_,Сч),Выборка[Сч-1]);
			КонецЕсли;
		КонецЦикла;
	Иначе
		пМетаданные = нсиУниверсальноеХранилище.ПолучитьМетаданные(Ссылка.Владелец);
		пОбъект = нсиУниверсальноеХранилище.ПолучитьОбъект(пМетаданные,Ссылка);
		Для Сч = 1 По КоличествоРеквизитов Цикл
			Имяреквизита = СтрПолучитьСтроку(ИменаРеквизитов_,Сч);
			Если ИмяРеквизита = "Наименование"
				ИЛИ ИмяРеквизита = "Код"
				ИЛИ ИмяРеквизита = "ПометкаУдаления"
				ИЛИ ИмяРеквизита = "Родитель"
				ИЛИ ИмяРеквизита = "Владелец" Тогда
				Результат.Вставить(Имяреквизита,Ссылка[Имяреквизита]);
			ИначеЕсли Ссылка.Метаданные().Реквизиты.Найти(ИмяРеквизита)<>Неопределено Тогда 
				Результат.Вставить(Имяреквизита,Ссылка[Имяреквизита]);
			ИначеЕсли пОбъект.Свойство(Имяреквизита) Тогда 
				Результат.Вставить(Имяреквизита,пОбъект[Имяреквизита]);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
