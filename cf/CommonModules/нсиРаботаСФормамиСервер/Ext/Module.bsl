#Область ПрограммныйИнтерфейс

// Функция возвращает организацию собственного контрагента.
//
Функция ПолучитьОрганизациюПоКонтрагенту(Контрагент) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка ИЗ Справочник.Организации ГДЕ Контрагент = &Контрагент";
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	Если  ВыборкаДетальныеЗаписи.Следующий() Тогда 
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
		
КонецФункции	

// Процедура управляет видимостью группы реквизитов работы с буфером и обработки заявок.
// 	
Процедура УправлениеВидимостьюОбработкиЗаявок(Форма) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьБизнесПроцессыИЗадачи = ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыИЗадачи");
	ВестиРучнуюОбработкуСправочников = ПолучитьФункциональнуюОпцию("нсиВестиРучнуюОбработкуСправочников");
	
	сткУстанавливаемыхПараметров = Новый Структура;
	ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	ИмяФормыМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Форма.ИмяФормы, ".");
	Мтд = Метаданные.Справочники[ИмяФормыМассив[1]];
	ПравоДоступаДобавление = ПравоДоступа("Добавление",Мтд,ПользовательИБ);
	ПолноеИмяОбъектаМетаданных	= ИмяФормыМассив[0] + "." + ИмяФормыМассив[1];

	Если ВестиРучнуюОбработкуСправочников Тогда
		Если ПравоДоступаДобавление Тогда
			сткУстанавливаемыхПараметров.Вставить("ТипОбъектаКонфигурации", ПолноеИмяОбъектаМетаданных);
		Иначе
			сткУстанавливаемыхПараметров.Вставить("ТипОбъектаКонфигурации", Неопределено);
		КонецЕсли;
	Иначе
		сткУстанавливаемыхПараметров.Вставить("ТипОбъектаКонфигурации", Неопределено);
	КонецЕсли;
	
	Форма.УстановитьПараметрыФункциональныхОпцийФормы(сткУстанавливаемыхПараметров);
	
	МЗ = РегистрыСведений.нсиДоступностьОперацийПоТипамОбъектов.СоздатьМенеджерЗаписи();
	МЗ.ТипОбъекта = ПолноеИмяОбъектаМетаданных;
	МЗ.Прочитать();
	
	УстановитьВидимость(Форма, "ГруппаЗаявок", МЗ.ИспользоватьЗаявки И ИспользоватьБизнесПроцессыИЗадачи);
	УстановитьВидимость(Форма, "ГруппаЗаявок1", МЗ.ИспользоватьЗаявки И ИспользоватьБизнесПроцессыИЗадачи);
	УстановитьВидимость(Форма, "ВводНовогоЭлементаСправочника1", МЗ.ИспользоватьЗаявки И ИспользоватьБизнесПроцессыИЗадачи);
	УстановитьВидимость(Форма, "БизнесПроцесснсиИзменениеЭлементаСправочникаСоздатьНаОсновании1", МЗ.ИспользоватьЗаявки И ИспользоватьБизнесПроцессыИЗадачи);
	УстановитьВидимость(Форма, "БизнесПроцесснсиУдалениеЭлементаСправочникаСоздатьНаОсновании1", МЗ.ИспользоватьЗаявки И ИспользоватьБизнесПроцессыИЗадачи);
	УстановитьВидимость(Форма, "ПакетныйВводЭлементовСправочника1", МЗ.ИспользоватьЗаявки И ИспользоватьБизнесПроцессыИЗадачи);
	
	УстановитьВидимость(Форма, "ФормаСоздатьНаОсновании", МЗ.ИспользоватьЗаявки И ИспользоватьБизнесПроцессыИЗадачи);
	УстановитьВидимость(Форма, "СтатусыОбработкиСправочников", МЗ.ИспользоватьБуфер И ПравоДоступаДобавление);
	УстановитьВидимость(Форма, "СтатусыОбработкиСправочников1", МЗ.ИспользоватьБуфер И ПравоДоступаДобавление);
	
	УстановитьВидимость(Форма, "ГруппаРаботаСЗаписями", ВестиРучнуюОбработкуСправочников И МЗ.ИспользоватьРучнуюОбработкуСправочников И ПравоДоступаДобавление);
КонецПроцедуры

// Процедура проверяет наличие элемента и устанавливает его видимость.
// Параметры:
//  Форма - управляемая форма;
//	Имя - строка - имя элемента управления;
//  Видимость - булево.
//
Процедура УстановитьВидимость(Форма,Имя,Видимость) Экспорт
	Если Форма.Элементы.Найти(Имя) <> Неопределено Тогда 
		Форма.Элементы[Имя].Видимость = Видимость;
	КонецЕсли;
КонецПроцедуры

// Процедура устанавливает тип предмета.
//
Процедура УстановитьТипПредмета(Предмет, ЭлементФормы) Экспорт
	
	Если Не ЗначениеЗаполнено(Предмет) Тогда
		ЭлементФормы.Заголовок = "";
		Возврат;
	КонецЕсли;
	
	ЦветТекстаЧерный = Новый Цвет(65, 48, 3);
	ЦветТекстаСерый = Новый Цвет(128, 128, 128);
	ЦветТекстаЗеленый = Новый Цвет(51, 153, 102);
	ЦветТекстаКрасный = Новый Цвет(220, 20, 60);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	нсиСтатусыОбработкиСправочников.ВременныйЭлемент,
		|	нсиСтатусыОбработкиСправочников.СозданаЗаявка,
		|	нсиСтатусыОбработкиСправочников.ОбработкаНачата,
		|	нсиСтатусыОбработкиСправочников.Обработано
		|ИЗ
		|	РегистрСведений.нсиСтатусыОбработкиСправочников КАК нсиСтатусыОбработкиСправочников
		|ГДЕ
		|	нсиСтатусыОбработкиСправочников.Объект = &Предмет";

	Запрос.УстановитьПараметр("Предмет", Предмет);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Если ВыборкаДетальныеЗаписи.ВременныйЭлемент Тогда
			ЭлементФормы.ЦветТекста = ЦветТекстаСерый;
//	ITRR Кутья АА Локализация	
//			ЭлементФормы.Заголовок = "(Временный элемент)";
			ЭлементФормы.Заголовок = НСтр("ru = '(Временный элемент)'; en = '(Temp item)'");
		ИначеЕсли ВыборкаДетальныеЗаписи.СозданаЗаявка Тогда
			ЭлементФормы.ЦветТекста = ЦветТекстаЗеленый;
//			ЭлементФормы.Заголовок = "(Создана заявка)";
			ЭлементФормы.Заголовок = НСтр("ru = '(Создана заявка)'; en = '(Request created)'");
		ИначеЕсли ВыборкаДетальныеЗаписи.ОбработкаНачата Тогда
			ЭлементФормы.ЦветТекста = ЦветТекстаКрасный;
//			ЭлементФормы.Заголовок = "(Обработка начата)";
			ЭлементФормы.Заголовок = НСтр("ru = '(Обработка начата)'; en = '(Processing started)'");
		Иначе                                         
			ЭлементФормы.ЦветТекста = ЦветТекстаЧерный;
//			ЭлементФормы.Заголовок = "(Постоянный элемент)";
			ЭлементФормы.Заголовок = НСтр("ru = '(Постоянный элемент)'; en = '(Permanent item)'");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Функция возвращает интервал обновления задач в списках задач.
// 
// Возвращаемое значение: 
// Число. 
// Интервал обновления задач в списках задач.
//
Функция ПолучитьИнтервалОбновленияСпискаЗадач() Экспорт
	Возврат Константы.нсиИнтервалОбновленияСпискаЗадач.Получить();
КонецФункции

// Процедура устанавливает видимость полей Код и Код оригинала, заполняет реквизит КодОригинала.
//	Параметры: Форма - управляемая форма элемента функционального справочника.
//
Процедура УстановитьВидимостьКодов(Форма) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Если Форма.Объект.ЭтоМакет Тогда 
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	нсиИзменениеЭлементаСправочника.Ссылка,
			|	нсиИзменениеЭлементаСправочника.ПредметОригинал.Код КАК КодОригинала
			|ИЗ
			|	БизнесПроцесс.нсиИзменениеЭлементаСправочника КАК нсиИзменениеЭлементаСправочника
			|ГДЕ
			|	нсиИзменениеЭлементаСправочника.Предмет = &Предмет"
		);
		Запрос.УстановитьПараметр("Предмет",Форма.Объект.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Если НЕ Выборка.Следующий() Тогда 
			Форма.Элементы.КодОригинала.Видимость = Ложь;
			Форма.Элементы.Код.Видимость = Истина;
			Форма.Элементы.Код.ТолькоПросмотр = Ложь;
		Иначе
			Форма.Элементы.КодОригинала.Видимость = Истина;
			Форма.КодОригинала = Выборка.КодОригинала;
			Форма.Элементы.Код.Видимость = Истина;
			Форма.Элементы.Код.ТолькоПросмотр = Истина;
			Форма.Элементы.Код.Заголовок = "Код макета";
		КонецЕсли;
	Иначе
		Форма.Элементы.КодОригинала.Видимость = Ложь;
		Форма.Элементы.Код.Видимость = Истина;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

// Процедура устанавливает доступность полей формы в зависимости от настроек блокировки реквизитов.
//
Процедура УстановитьДоступностьПолей(ЭтаФорма, СсылкаНаЭлемент) Экспорт
	
	РезСтруктура = нсиБлокировкаРеквизитов.ПолучитьСтруктуруОграничений(СсылкаНаЭлемент);
	
	Если РезСтруктура = "ТолькоПросмотр" Тогда
		ЭтаФорма.ТолькоПросмотр = Истина;
	Иначе
		
		нсиБлокировкаРеквизитов.ОбработатьРезультатБлокировкиРеквизитов(РезСтруктура, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает идентификатор пользовательской настройки.
//
Функция ПолучитьИдПользовательскойНастройкиОтбораКД(Настройки,ПредставлениеПользовательскойНастройки) Экспорт
	НастройкиОтбора = Настройки.Отбор.Элементы;
	Для Каждого Элемент Из НастройкиОтбора Цикл 
		Если Элемент.ПредставлениеПользовательскойНастройки = ПредставлениеПользовательскойНастройки Тогда 
			Возврат Элемент.ИдентификаторПользовательскойНастройки;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

// Функция возвращает элемент отбора пользовательской настройки.
//
Функция ПолучитьЭлементОтбораПользовательскойНастройкиКД(Настройки,Идентификатор) Экспорт
	Для каждого ТекНастройка Из Настройки.Элементы Цикл
		Если ТипЗнч(ТекНастройка) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда 
			Если ТекНастройка.ИдентификаторПользовательскойНастройки = Идентификатор Тогда
				Возврат ТекНастройка;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

// Функция возвращает параметр пользовательской настройки.
//
Функция ПолучитьПараметрПользовательскойНастройкиКД(Настройки,ИмяПараметра) Экспорт
	Для каждого ТекНастройка Из Настройки.Элементы Цикл
		Если ТипЗнч(ТекНастройка) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда 
			Если ТекНастройка.Параметр = новый ПараметрКомпоновкиДанных(ИмяПараметра) Тогда
				Возврат	ТекНастройка;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

// Процедура устанавливает дату в пользовательских настройках.
//
Процедура УстановитьДатуВПользовательскиеНастройкиПараметраКД(Настройки,ИмяПараметра,Дата) Экспорт
	Параметр = нсиРаботаСФормамиСервер.ПолучитьПараметрПользовательскойНастройкиКД(Настройки,ИмяПараметра);
	Если Параметр<>Неопределено Тогда 
		Если ТипЗнч(Параметр.Значение) = Тип("СтандартнаяДатаНачала") Тогда 
			Параметр.Значение.Вариант = ВариантСтандартнойДатыНачала.ПроизвольнаяДата;
			Параметр.Значение.Дата = Дата;
		Иначе
			Параметр.Значение = Дата;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура устанавливает дату в параметрах настроек компоновки данных.
//
Процедура УстановитьДатуВПараметрНастроекКД(Настройки,ИмяПараметра,Дата) Экспорт
	Параметр = Настройки.ПараметрыДанных.Элементы.Найти(ИмяПараметра);
	Если Параметр<>Неопределено Тогда
		Если ТипЗнч(Параметр.Значение) = Тип("СтандартнаяДатаНачала") Тогда 
			Параметр.Значение.Вариант = ВариантСтандартнойДатыНачала.ПроизвольнаяДата;
			Параметр.Значение.Дата = Дата;
		Иначе
			Параметр.Значение = Дата;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура выводит сообщение для задач без исполнителя.
//
Процедура ВывестиСообщениеПриОткрытииФормыЗадачи(ФормаЗадачи) Экспорт
	Если НЕ ЗначениеЗаполнено(ФормаЗадачи.Объект.Исполнитель) Тогда 
		Сообщение = Новый СообщениеПользователю;
//	ITRR Кутья АА Локализация	
//		Сообщение.Текст = "Задача не взята Вами в обработку. Форма открыта только на просмотр.";
		Сообщение.Текст = НСтр("ru = 'Задача не взята Вами в обработку. Форма открыта только на просмотр.'; en = 'The task is not taken by you in processing. The form is open only for viewing.'");
		Сообщение.Сообщить();
	КонецЕсли;
КонецПроцедуры

// Функция возвращает структуру цветов визуализации.
//
Функция ПолучитьЦветаВизуализации() Экспорт
	
	НастройкаЦветов = Константы.нсиНастройкаЦветовВизуализации.Получить();
	СтруктураЦветов = НастройкаЦветов.Получить();
	Если СтруктураЦветов = Неопределено Тогда
		ЦветКириллицы 	= Новый Цвет(0,0,0);
		ЦветЛатиницы 	= Новый Цвет(0,0,0);
		ЦветЦифры 		= Новый Цвет(0,0,0);
	Иначе
		ЦветКириллицы 	= СтруктураЦветов.ЦветКириллицы;
		ЦветЛатиницы 	= СтруктураЦветов.ЦветЛатиницы;
		ЦветЦифры 		= СтруктураЦветов.ЦветЦифры;
	КонецЕсли;
	
	Цвета = Новый Структура;
	Цвета.Вставить("Латиница", 	Новый Структура("Цвет, ЦветСтрока", ЦветЛатиницы , ""));
	Цвета.Вставить("Кириллица", Новый Структура("Цвет, ЦветСтрока", ЦветКириллицы, ""));
	Цвета.Вставить("Цифра", 	Новый Структура("Цвет, ЦветСтрока", ЦветЦифры , ""));
	
	Возврат Цвета;
	
КонецФункции

// Процедура устанавливает видимость кнопки
Процедура УстановитьВидимостьКнопки(Форма,Имя,Видимость) Экспорт
	Если Форма.Элементы.Найти(Имя) <> Неопределено Тогда 
		Форма.Элементы[Имя].Видимость = Видимость;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
