#Область ПрограммныйИнтерфейс

// Функция - возвращает доступность роли нсиРедактированиеСправочниковБезЗаявок.
//
Функция ПроверитьРедактированиеСправочниковБезЗаявок(СсылкаИмяСправочника) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(СсылкаИмяСправочника) = Тип("Строка") Тогда 
		ИмяСправочника = СсылкаИмяСправочника;
	Иначе
		ИмяСправочника = СсылкаИмяСправочника.Метаданные().Имя;
	КонецЕсли;
	
	
	Если ИмяСправочника = "нсиВидыСправочников" Тогда 
		пМетаданные = нсиУниверсальноеХранилище.ПолучитьМетаданные(СсылкаИмяСправочника);
		ПроверкаРедактированияСправочника = пМетаданные.ПраваДоступа.Добавление;
		
		ДоступноРедактированиеБезЗаявок = РольДоступна("нсиДобавлениеИзменениеБезЗаявок") 
			Или Не ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыИЗадачи");
		
	Иначе
		ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
		ПроверкаРедактированияСправочника = ПравоДоступа("Добавление",Метаданные.Справочники[ИмяСправочника],ПользовательИБ);
		МЗ = РегистрыСведений.нсиДоступностьОперацийПоТипамОбъектов.СоздатьМенеджерЗаписи();
		МЗ.ТипОбъекта = "Справочник."+ИмяСправочника;
		МЗ.Прочитать();
		
		ДоступноРедактированиеБезЗаявок = 
		РольДоступна("нсиДобавлениеИзменениеБезЗаявок") 
//	ITRR Кутья АА		
		ИЛИ РольДоступна("GlobalExpert") 
//	ITRR Кутья АА		
		ИЛИ (
			МЗ.ИспользоватьРучнуюОбработкуСправочников 
			И НЕ МЗ.ИспользоватьБуфер 
			И НЕ (МЗ.ИспользоватьЗаявки И ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыИЗадачи"))
		);
	КонецЕсли;
	
	Возврат (ДоступноРедактированиеБезЗаявок И ПроверкаРедактированияСправочника)
		ИЛИ РольДоступна("ПолныеПрава");
КонецФункции	

// Функция - возвращает доступность роли нсиУстановкаПометкиНаУдаление
//
Функция ПроверитьПометкуНаУдалениеБезЗаявок(СсылкаИмяСправочника) Экспорт
	
	Возврат РольДоступна("нсиУстановкаПометкиНаУдаление") И ПроверитьРедактированиеСправочниковБезЗаявок(СсылкаИмяСправочника);
	
КонецФункции	

// Функция - возвращает доступность роли нсиРедактированиеСправочниковБезЗаявок.
//
Функция ПроверитьПометкуНаУдалениеБизнесПроцессов(Ссылка = Неопределено) Экспорт
	
	ПроверкаРедактированияСправочника = Истина;
	Если ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.нсиВводНовогоЭлементаСправочника") Тогда 
		ПроверкаРедактированияБизнесПроцесса = РольДоступна("нсиДобавлениеИзменениеЗаявок");
	ИначеЕсли ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.нсиИзменениеЭлементаСправочника") Тогда 
		ПроверкаРедактированияБизнесПроцесса = РольДоступна("нсиДобавлениеИзменениеЗаявок");
	ИначеЕсли ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.нсиУдалениеЭлементаСправочника") Тогда 
		ПроверкаРедактированияБизнесПроцесса = РольДоступна("нсиДобавлениеИзменениеЗаявок");
	ИначеЕсли ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.нсиПакетныйВводЭлементовСправочника") Тогда 
		ПроверкаРедактированияБизнесПроцесса = РольДоступна("нсиДобавлениеИзменениеЗаявок");
	ИначеЕсли ТипЗнч(Ссылка) = Тип("БизнесПроцессСсылка.Задание") Тогда 
		ПроверкаРедактированияБизнесПроцесса = РольДоступна("ДобавлениеИзменениеЗаданий");
	Иначе	
		ПроверкаРедактированияБизнесПроцесса = Ложь;
	КонецЕсли;	
	
	Возврат РольДоступна("нсиУстановкаПометкиНаУдалениеБизнесПроцессов") И ПроверкаРедактированияБизнесПроцесса;
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// ФОНОВЫЕ ЗАДАНИЯ

// Процедура - сравнивает строку с массивом строк в фоне (для клиент-серверного режима).
//
Процедура СравнитьСтрокиНаСовпадение(ПризнакДляСвязи, СтрокаСравнения1, МассивСтрок2, 
	ПроцентСовпадения, МетодСравнения) Экспорт 
	
	нсиСравнениеДанных = нсиЗащитаКонфигурацииСервер.ПолучитьОбработку_нсиСравнениеДанных();
	Если нсиСравнениеДанных = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	нсиСравнениеДанных.СравнитьСтрокиНаСовпадениеЛинейно(
		ПризнакДляСвязи, СтрокаСравнения1, МассивСтрок2, ПроцентСовпадения, МетодСравнения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПОДСИСТЕМА "Полнотекстовый поиск"

// Процедура - выполняет полнотекстовый поиск и устанавливает отбор по результату в списке.
//
Процедура УстановитьОтборВСпискеПоПолнотекстовымДанным(Список, ИмяСправочника, СтрокаПолнотекстовогоПоиска, 
	ПроцентСовпадения) Экспорт 
	
	МассивОтбор = Новый Массив;
	МассивОтбор.Добавить(Метаданные.Справочники[ИмяСправочника]);
	РезультатыПоиска = Новый Массив;

	РазмерПорции = 50;
	СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок(СтрокаПолнотекстовогоПоиска, РазмерПорции);
	СписокПоиска.ПорогНечеткости  = СтрДлина(СтрокаПолнотекстовогоПоиска)*(100-ПроцентСовпадения)/100;
	СписокПоиска.ОбластьПоиска = МассивОтбор;     	
	СписокПоиска.ПерваяЧасть();
	Для Каждого Результат Из СписокПоиска Цикл
		РезультатыПоиска.Добавить(Результат.Значение);
	КонецЦикла; 	
	Для ИндексПозиций = 1 По Цел(СписокПоиска.ПолноеКоличество()/РазмерПорции) Цикл 
		СписокПоиска.СледующаяЧасть();
		Для Каждого Результат Из СписокПоиска Цикл
			РезультатыПоиска.Добавить(Результат.Значение);
		КонецЦикла; 	
	КонецЦикла;	
	
	Список.Параметры.УстановитьЗначениеПараметра("СсылкаНеОпределена", 	Ложь);
	Список.Параметры.УстановитьЗначениеПараметра("Ссылка", РезультатыПоиска);
		
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПОДСИСТЕМА "Сравнение данных"

// Процедура - заполняет параметр и оформление пользователем.
//
Процедура УстановитьПользователяВПараметрыИОформление(Список) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не Список.Параметры.Элементы.Найти("ПользователиГруппыДоступа") = Неопределено Тогда 
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ГруппыДоступаПользователи.Пользователь
			|ИЗ
			|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи1
			|		ПО ГруппыДоступаПользователи.Ссылка = ГруппыДоступаПользователи1.Ссылка
			|			И (ГруппыДоступаПользователи1.Пользователь = &Пользователь)";
		
		Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
		ПользователиГруппыДоступа = Новый СписокЗначений;
		ПользователиГруппыДоступа.ЗагрузитьЗначения(Результат);
		ПользователиГруппыДоступа.Добавить(ПараметрыСеанса.ТекущийПользователь);
		
		Список.Параметры.УстановитьЗначениеПараметра("ПользователиГруппыДоступа", ПользователиГруппыДоступа);   		
	КонецЕсли;	
	
	
	Если Не Список.Параметры.Элементы.Найти("Пользователь") = Неопределено Тогда 
		Список.Параметры.УстановитьЗначениеПараметра("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	КонецЕсли;	
	
	
	Для каждого ЭлементОформления из Список.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы Цикл 
		Если ЭлементОформления.Представление = "Пользователь" Тогда 
			ЭлементОформления.Отбор.Элементы[0].ПравоеЗначение  = ПараметрыСеанса.ТекущийПользователь;
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

// Процедура - формируется СКД и заполняются настройки.
//
Процедура ЗаполнениеКомпоновщикаНастроек(ИмяСправочника, АдресКомпоновки, КомпоновщикНастроек, 
	УникальныйИдентификаторФормы = Неопределено) Экспорт 
		
	УстановитьПривилегированныйРежим(Истина);
	
	нсиСравнениеДанных = нсиЗащитаКонфигурацииСервер.ПолучитьОбработку_нсиСравнениеДанных();
	Если нсиСравнениеДанных = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	нсиСравнениеДанных.ЗаполнениеКомпоновщикаНастроек(
		ИмяСправочника, АдресКомпоновки, КомпоновщикНастроек, УникальныйИдентификаторФормы);
		
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры	

// Процедура - выполняет расширенный поиск и устанавливает отбор по результату в списке.
//
Процедура УстановитьОтборВСпискеПоНайденнымДанным(Список, ИмяСправочника, КомпоновщикНастроек, 
	ПараметрыНеточногоПоиска) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	НачалоПоиска = ТекущаяДата();
		
	нсиСравнениеДанных = нсиЗащитаКонфигурацииСервер.ПолучитьОбработку_нсиСравнениеДанных();
	Если нсиСравнениеДанных = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	МассивСсылок = нсиСравнениеДанных.НайтиДанные(
		ИмяСправочника, 
		КомпоновщикНастроек, 
		ПараметрыНеточногоПоиска.Выгрузить());
		
	Если МассивСсылок.Количество() > 500 Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		"Результат поиска выдал слишком большое количество данных.
		|Воспользуйтесь стандартным отбором формы, 
		|либо попробуйте сузить область поиска.");
		
		Список.Параметры.УстановитьЗначениеПараметра("СсылкаНеОпределена", 	Истина);
		Список.Параметры.УстановитьЗначениеПараметра("Ссылка", 				Null);
	Иначе 	
		Список.Параметры.УстановитьЗначениеПараметра("СсылкаНеОпределена", 	Ложь);
		Список.Параметры.УстановитьЗначениеПараметра("Ссылка", 				МассивСсылок);
	КонецЕсли;        	
	                                                      
	КонецПоиска = ТекущаяДата();

	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры	

// Процедура - заполняет ПараметрыНеточногоПоиска и КомпоновщикНастроек. 
//
Процедура ЗаполнитьПараметрыИКомпоновщикНастроек(ВходящиеДанные, ПараметрыНеточногоПоиска, КомпоновщикНастроек) Экспорт
	
	Если ТипЗнч(ВходящиеДанные) = Тип("СправочникСсылка.нсиНастройкиПоискаДанных") Тогда 
		
		ВходящиеПараметрыНеточногоПоиска = ВходящиеДанные.ПараметрыНеточногоПоиска.Получить();
		Если ЗначениеЗаполнено(ВходящиеПараметрыНеточногоПоиска) Тогда 
			ПараметрыНеточногоПоиска.Загрузить(ВходящиеПараметрыНеточногоПоиска);   
		КонецЕсли;
		
		ВходящиеНастройкаКомпоновщика = ВходящиеДанные.НастройкаКомпоновщика.Получить();
		Если ЗначениеЗаполнено(ВходящиеНастройкаКомпоновщика) Тогда 
			КомпоновщикНастроек.ЗагрузитьНастройки(ВходящиеНастройкаКомпоновщика);
		КонецЕсли;
		
	Иначе 
		
		ПараметрыНеточногоПоиска.Загрузить(ВходящиеДанные.ПараметрыПоиска.Выгрузить());   
		КомпоновщикНастроек.ЗагрузитьНастройки(ВходящиеДанные.НастройкаПоиска);
	
	КонецЕсли;	
	
КонецПроцедуры

// Функция - возвращает значение константы нсиМетодСравненияСтроковыхДанных.
//
Функция ПолучитьМетодСравненияПоУмолчанию() Экспорт
	
	Возврат Константы.нсиМетодСравненияСтроковыхДанных.Получить();
	
КонецФункции	
 
////////////////////////////////////////////////////////////////////////////////
// ПОДСИСТЕМА "Поиск по классу"

// Процедура - присваивает выбранным элементам класс.
//
Процедура УстановкаКлассаПриПеретаскивании(МассивСсылок, Класс, ИмяСправочника, ПроверятьНаБуфер = Истина) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ Объект
		|ИЗ РегистрСведений.нсиСтатусыОбработкиСправочников  
		|ГДЕ Объект В(&Объект) "+ ?(ПроверятьНаБуфер,"И Пользователь = &Пользователь","") );
	Запрос.УстановитьПараметр("Объект", МассивСсылок);
	Запрос.УстановитьПараметр("Пользователь", ПользователиКлиентСервер.ТекущийПользователь());

	Результат = Запрос.Выполнить();
	СписокОбъектов = Результат.Выгрузить().ВыгрузитьКолонку("Объект");

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник."+ИмяСправочника);
		ЭлементБлокировки.ИсточникДанных = Результат;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка","Объект");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();  
	
		Для Каждого СтрокаТЧ из СписокОбъектов Цикл 
			
			ОбъектМТР = СтрокаТЧ.ПолучитьОбъект();
			ОбъектМТР.Класс = Класс;
			ОбъектМТР.Записать();
			
		КонецЦикла;
		
	ЗафиксироватьТранзакцию();	
	
КонецПроцедуры	

// Процедура - присваивает выбранным элементам дополнительный класс.
//
Процедура УстановкаДопКлассаПриПеретаскивании(МассивСсылок, Класс, ИмяСправочника, ПроверятьНаБуфер = Истина, 
		ВидДопКлассификатора = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ Объект
		|ИЗ РегистрСведений.нсиСтатусыОбработкиСправочников  
		|ГДЕ Объект В(&Объект) "+ ?(ПроверятьНаБуфер,"И Пользователь = &Пользователь","") );
	Запрос.УстановитьПараметр("Объект", МассивСсылок);
	Запрос.УстановитьПараметр("Пользователь", ПользователиКлиентСервер.ТекущийПользователь());

	Результат = Запрос.Выполнить();
	СписокОбъектов = Результат.Выгрузить().ВыгрузитьКолонку("Объект");

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник."+ИмяСправочника);
		ЭлементБлокировки.ИсточникДанных = Результат;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка","Объект");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();  
	
		Для Каждого СтрокаТЧ из СписокОбъектов Цикл 
			
			ОбъектМТР = СтрокаТЧ.ПолучитьОбъект();
			
			СтрокаТЧ = ОбъектМТР.ДополнительнаяКлассификация.Найти(
				?(ВидДопКлассификатора = Неопределено, Класс.Владелец, ВидДопКлассификатора),"ВидКлассификатора");
			Если Не ЗначениеЗаполнено(СтрокаТЧ) Тогда 
				СтрокаТЧ = ОбъектМТР.ДополнительнаяКлассификация.Добавить();
				СтрокаТЧ.ВидКлассификатора = ?(ВидДопКлассификатора = Неопределено, Класс.Владелец, ВидДопКлассификатора);
			КонецЕсли;
			СтрокаТЧ.Класс = Класс;
			ОбъектМТР.Записать();
			
		КонецЦикла;
		
	ЗафиксироватьТранзакцию();	
	
КонецПроцедуры	
  
// Процедура - строит дерево свойств и значений по выбранному классу.
//
Процедура ЗаполнитьДеревоСвойств(Класс, РедактируемоеДеревоСвойств, ИмяСправочника) Экспорт
	
	РедактируемоеДеревоСвойств.Строки.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Класс", Класс);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТехническиеХарактеристики.Характеристика.НаименованиеПоКлассификатору КАК Свойство,
		|	ТехническиеХарактеристики.Характеристика КАК Свойства,
		|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(ТехническиеХарактеристики.Значение) = 
		|   ТИП(Справочник.ЗначенияСвойствОбъектов) ТОГДА
		|		ТехническиеХарактеристики.Значение.Наименование
		|	ИНАЧЕ ТехническиеХарактеристики.Значение КОНЕЦ КАК Значение,
		|	ТехническиеХарактеристики.Значение КАК Значения
		|ИЗ
		|	Справочник."+ИмяСправочника+".ТехническиеХарактеристики КАК ТехническиеХарактеристики
		|ГДЕ
		|	(НЕ ТИПЗНАЧЕНИЯ(ТехническиеХарактеристики.Значение) = ТИПЗНАЧЕНИЯ(NULL))
		|	И ТехническиеХарактеристики.Характеристика.Класс В ИЕРАРХИИ(&Класс)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТехническиеХарактеристики.Характеристика.НаименованиеПоКлассификатору,
		|	ТехническиеХарактеристики.Характеристика,
		|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(ТехническиеХарактеристики.Значение) = 
		|   ТИП(Справочник.ЗначенияСвойствОбъектов) ТОГДА
		|		ТехническиеХарактеристики.Значение.Наименование
		|	ИНАЧЕ ТехническиеХарактеристики.Значение КОНЕЦ,
		|	ТехническиеХарактеристики.Значение
		|ИТОГИ ПО
		|	Свойство, Значение";

	ВыборкаСвойство = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСвойство.Следующий() Цикл
		
		СвойствоДерева = РедактируемоеДеревоСвойств.Строки.Добавить();
		СвойствоДерева.СвойствоЗначение = ВыборкаСвойство.Свойство;

		ВыборкаЗначение = ВыборкаСвойство.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
 		Пока ВыборкаЗначение.Следующий() Цикл
			
			СтрокаДерева = СвойствоДерева.Строки.Добавить();      
			СтрокаДерева.СвойствоЗначение = ВыборкаЗначение.Значение;
			
			ВыборкаЗначения = ВыборкаЗначение.Выбрать();
			Пока ВыборкаЗначения.Следующий() Цикл
				
				СвойствоДерева.Значения.Добавить(ВыборкаЗначения.Свойства);
				СтрокаДерева.Значения.Добавить(ВыборкаЗначения.Значения);
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;	
	
	
КонецПроцедуры

#КонецОбласти

