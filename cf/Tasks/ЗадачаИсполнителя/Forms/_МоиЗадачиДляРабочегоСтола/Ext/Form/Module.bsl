#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыИЗадачи") Тогда 
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Список.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", НачалоДня(ТекущаяДата()));
	Список.Параметры.УстановитьЗначениеПараметра("НезаполненнаяДата", Дата(1,1,1));
	
	//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
	//	Список.Отбор, "Выполнена", Ложь);
	
//	ITRR Кутья АА		
	ПараметрыОтбора = Новый Соответствие();
	ПараметрыОтбора.Вставить("ПоказыватьВыполненные", ПоказыватьВыполненные);	
	УстановитьОтбор(ПараметрыОтбора);	
//	ITRR Кутья АА		
			
	нсиБизнесПроцессы.УстановитьОформлениеЗадач(Список);
	
	Если Не Список.Параметры.Элементы.Найти("Пользователь") = Неопределено Тогда 
		Список.Параметры.УстановитьЗначениеПараметра("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	КонецЕсли;
	
	Список.Параметры.УстановитьЗначениеПараметра("Назначено", НСтр("ru = 'Назначено'; en = 'Appointed'"));
	Список.Параметры.УстановитьЗначениеПараметра("ОжидаетПринятия", НСтр("ru = 'Ожидает принятия к исполнению'; en = 'Waits for acceptance for execution'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ЗадачаВыполнена" ИЛИ ИмяСобытия = "ЗадачаИзменена" Тогда
		ОбновлениеОформления();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ИнтервалОбновления = нсиРаботаСФормамиСервер.ПолучитьИнтервалОбновленияСпискаЗадач();
	Если ИнтервалОбновления >= 1 Тогда 
		ПодключитьОбработчикОжидания("ОбновлениеОформления",ИнтервалОбновления);
	Иначе
		ОбновлениеОформления();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ОтключитьОбработчикОжидания("ОбновлениеОформления");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СгруппироватьПоВажности(Команда)
	СгруппироватьПоКолонке("Важность");
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоБезГруппировки(Команда)
	СгруппироватьПоКолонке("");
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоТочкеМаршрута(Команда)
	СгруппироватьПоКолонке("ТочкаМаршрута");
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоАвтору(Команда)
	СгруппироватьПоКолонке("Автор");
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоПредмету(Команда)
	СгруппироватьПоКолонке("ПредметСтрокой");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// НСИ

&НаКлиенте
Процедура СоздатьЗадание(Команда)
	БизнесПроцессыИЗадачиКлиент.СоздатьЗадание(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ВводНовогоЭлементаСправочника(Команда)
	ОткрытьФорму("БизнесПроцесс.нсиВводНовогоЭлементаСправочника.ФормаОбъекта", , ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеЭлементаСправочника(Команда)
	ОткрытьФорму("БизнесПроцесс.нсиИзменениеЭлементаСправочника.ФормаОбъекта", , ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура УдалениеЭлементаСправочника(Команда)
	ОткрытьФорму("БизнесПроцесс.нсиУдалениеЭлементаСправочника.ФормаОбъекта", , ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоТипуПредмета(Команда)
	СгруппироватьПоКолонке("ТипПредмета");
КонецПроцедуры

&НаКлиенте
Процедура ПакетныйВводЭлементовСправочника(Команда)
	ОткрытьФорму("БизнесПроцесс.нсиПакетныйВводЭлементовСправочника.ФормаОбъекта", , ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписок(Команда)
	ОбновлениеОформления();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	БизнесПроцессыИЗадачиКлиент.СписокЗадачПередНачаломДобавления(ЭтаФорма, Элемент, Отказ, Копирование, 
		Родитель, Группа);
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
//	ITRR Кутья АА		
	Если ОткрыватьСтандартнуюФорму(ВыбраннаяСтрока) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияРеквизитов = GlobalMDM.ЗначенияРеквизитовОбъектаНаСервере(ВыбраннаяСтрока, "Статус,Предмет");
	
	Если ЗначенияРеквизитов.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявки.Черновик") Тогда
		СтандартнаяОбработка = Ложь;
		Если ТипЗнч(ЗначенияРеквизитов.Предмет) = Тип("СправочникСсылка.GlobalSKU") Тогда
			ПутьКФорме = "Справочник.GlobalSKU.ФормаОбъекта";
		ИначеЕсли ТипЗнч(ЗначенияРеквизитов.Предмет) = Тип("СправочникСсылка.GlobalPartners") Тогда
			ПутьКФорме = "Справочник.GlobalPartners.ФормаОбъекта";
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", ЗначенияРеквизитов.Предмет);
		ПараметрыФормы.Вставить("РежимЗаявки", Истина);
		ПараметрыФормы.Вставить("РежимНовойЗаявки", Истина);
		
		ОткрытьФорму(ПутьКФорме, ПараметрыФормы);
		
		Возврат;
	КонецЕсли; 
//	ITRR Кутья АА		
	
	нсиБизнесПроцессыИЗадачиКлиент.СписокЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
КонецПроцедуры

//	ITRR Кутья АА		
&НаСервереБезКонтекста
Функция ОткрыватьСтандартнуюФорму(ЗадачаСсылка)
	
	Результат = Ложь;
	
	Если ТипЗнч(ЗадачаСсылка["БизнесПроцесс"]) = Тип("БизнесПроцессСсылка.Задание")
		И ЗадачаСсылка["БизнесПроцесс"]["ит_Назначение"] = ПредопределенноеЗначение("Перечисление.ВидыНазначенийБизнесПроцессов.Уведомление") Тогда
		Результат = Истина;
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции // ПолучитьНазначениеБизнесПроцесса()
//	ITRR Кутья АА		
 
&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
//	ITRR Кутья АА		
	Если ОткрыватьСтандартнуюФорму(Элемент.ТекущаяСтрока) Тогда
		Возврат;
	КонецЕсли; 
//	ITRR Кутья АА		
	
	нсиБизнесПроцессыИЗадачиКлиент.СписокЗадачПередНачаломИзменения(Элемент, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоКолонке(Знач ИмяКолонкиРеквизита)
	РежимГруппировки = ИмяКолонкиРеквизита;
	Список.Группировка.Элементы.Очистить();
	Если НЕ ПустаяСтрока(ИмяКолонкиРеквизита) Тогда
		ПолеГруппировки = Список.Группировка.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных(ИмяКолонкиРеквизита);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// НСИ
&НаКлиенте
Процедура ОбновлениеОформления()
	УстановитьОформлениеНаСервере();
	Элементы.Список.Обновить();
КонецПроцедуры

Процедура УстановитьОформлениеНаСервере()
	нсиБизнесПроцессы.УстановитьОформлениеЗадач(Список);
КонецПроцедуры

//	ITRR Кутья АА		
&НаКлиенте
Процедура ПоказыватьВыполненныеПриИзменении(Элемент)
	
	УстановитьОтборНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура СгруппироватьПоКолонкеНаСервере(Знач ИмяКолонкиРеквизита, ОчищатьГруппировку = Истина)
	РежимГруппировки = ИмяКолонкиРеквизита;
	Если НЕ ПустаяСтрока(РежимГруппировки) Тогда
		ПоказыватьВыполненные = Ложь;
		ПараметрыОтбора = Новый Соответствие();
		ПараметрыОтбора.Вставить("ПоказыватьВыполненные", ПоказыватьВыполненные);	
		УстановитьОтбор(ПараметрыОтбора);	
	КонецЕсли;
	Если ОчищатьГруппировку Тогда 
		Список.Группировка.Элементы.Очистить();
	КонецЕсли;
	Если НЕ ПустаяСтрока(ИмяКолонкиРеквизита) Тогда
		ПолеГруппировки = Список.Группировка.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных(ИмяКолонкиРеквизита);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборНаКлиенте()
	
	ПараметрыОтбора = Новый Соответствие();
	ПараметрыОтбора.Вставить("ПоказыватьВыполненные", ПоказыватьВыполненные);	
	УстановитьОтбор(ПараметрыОтбора);	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтбор(ПараметрыОтбора)
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.Отбор, "Выполнена");
	
	Если ПараметрыОтбора["ПоказыватьВыполненные"] Тогда
		СгруппироватьПоКолонкеНаСервере("");
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			Список.Отбор, "Выполнена", Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	СгруппироватьПоКолонкеНаСервере(Настройки["РежимГруппировки"]);
	УстановитьОтбор(Настройки);	
КонецПроцедуры

//	ITRR Кутья АА		

#КонецОбласти
